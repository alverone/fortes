(()=>{"use strict";var t={"./node_modules/@splidejs/splide/dist/js/splide.esm.js":
/*!*************************************************************!*\
  !*** ./node_modules/@splidejs/splide/dist/js/splide.esm.js ***!
  \*************************************************************/(t,e,n)=>{n.r(e),n.d(e,{CLASSES:()=>ve,CLASS_ACTIVE:()=>he,CLASS_ARROW:()=>te,CLASS_ARROWS:()=>Qt,CLASS_ARROW_NEXT:()=>ne,CLASS_ARROW_PREV:()=>ee,CLASS_AUTOPLAY:()=>ce,CLASS_CLONE:()=>Kt,CLASS_CONTAINER:()=>Jt,CLASS_INITIALIZED:()=>de,CLASS_LIST:()=>Xt,CLASS_LOADING:()=>me,CLASS_NEXT:()=>pe,CLASS_PAGINATION:()=>ie,CLASS_PAGINATION_PAGE:()=>se,CLASS_PAUSE:()=>ae,CLASS_PLAY:()=>le,CLASS_PREV:()=>fe,CLASS_PROGRESS:()=>oe,CLASS_PROGRESS_BAR:()=>re,CLASS_ROOT:()=>Ut,CLASS_SLIDE:()=>Zt,CLASS_SLIDER:()=>Yt,CLASS_SPINNER:()=>ue,CLASS_TRACK:()=>qt,CLASS_VISIBLE:()=>ge,EVENT_ACTIVE:()=>pt,EVENT_ARROWS_MOUNTED:()=>Lt,EVENT_ARROWS_UPDATED:()=>Nt,EVENT_AUTOPLAY_PAUSE:()=>Vt,EVENT_AUTOPLAY_PLAY:()=>Rt,EVENT_AUTOPLAY_PLAYING:()=>It,EVENT_CLICK:()=>ft,EVENT_DESTROY:()=>Tt,EVENT_DRAG:()=>wt,EVENT_DRAGGED:()=>At,EVENT_DRAGGING:()=>Ct,EVENT_HIDDEN:()=>$t,EVENT_INACTIVE:()=>gt,EVENT_LAZYLOAD_LOADED:()=>zt,EVENT_MOUNTED:()=>lt,EVENT_MOVE:()=>ut,EVENT_MOVED:()=>dt,EVENT_NAVIGATION_MOUNTED:()=>Ot,EVENT_PAGINATION_MOUNTED:()=>Pt,EVENT_PAGINATION_UPDATED:()=>Dt,EVENT_READY:()=>at,EVENT_REFRESH:()=>yt,EVENT_REPOSITIONED:()=>Et,EVENT_RESIZE:()=>_t,EVENT_RESIZED:()=>St,EVENT_SCROLL:()=>xt,EVENT_SCROLLED:()=>kt,EVENT_SHIFTED:()=>ht,EVENT_SLIDE_KEYDOWN:()=>vt,EVENT_UPDATED:()=>bt,EVENT_VISIBLE:()=>mt,EventBus:()=>ct,EventInterface:()=>Bt,RequestInterval:()=>jt,STATUS_CLASSES:()=>$e,Splide:()=>Ye,SplideRenderer:()=>Ze,State:()=>Wt,Throttle:()=>Mt,default:()=>Ye});
/*!
 * Splide.js
 * Version  : 3.5.8
 * License  : MIT
 * Copyright: 2021 Naotoshi Fujita
 */
const i="splide",s=`data-${i}`,o={CREATED:1,MOUNTED:2,IDLE:3,MOVING:4,DESTROYED:5};function r(t){t.length=0}function c(t){return!d(t)&&"object"==typeof t}function l(t){return Array.isArray(t)}function a(t){return"string"==typeof t}function u(t){return void 0===t}function d(t){return null===t}function h(t){return t instanceof HTMLElement}function f(t){return l(t)?t:[t]}function p(t,e){f(t).forEach(e)}function g(t,e){return t.indexOf(e)>-1}function m(t,e){return t.push(...f(e)),t}const $=Array.prototype;function v(t,e,n){return $.slice.call(t,e,n)}function y(t,e,n){t&&p(e,(e=>{e&&t.classList[n?"add":"remove"](e)}))}function b(t,e){y(t,a(e)?e.split(" "):e,!0)}function _(t,e){p(e,t.appendChild.bind(t))}function S(t,e){p(t,(t=>{const n=e.parentNode;n&&n.insertBefore(t,e)}))}function E(t,e){return h(t)&&(t.msMatchesSelector||t.matches).call(t,e)}function w(t,e){return t?v(t.children).filter((t=>E(t,e))):[]}function C(t,e){return e?w(t,e)[0]:t.firstElementChild}function A(t,e,n){if(t){let i=Object.keys(t);i=n?i.reverse():i;for(let n=0;n<i.length;n++){const s=i[n];if("__proto__"!==s&&!1===e(t[s],s))break}}return t}function x(t){return v(arguments,1).forEach((e=>{A(e,((n,i)=>{t[i]=e[i]}))})),t}function k(t,e){return A(e,((e,n)=>{l(e)?t[n]=e.slice():c(e)?t[n]=k(c(t[n])?t[n]:{},e):t[n]=e})),t}function T(t,e){t&&p(e,(e=>{t.removeAttribute(e)}))}function L(t,e,n){c(e)?A(e,((e,n)=>{L(t,n,e)})):d(n)?T(t,e):t.setAttribute(e,String(n))}function N(t,e,n){const i=document.createElement(t);return e&&(a(e)?b(i,e):L(i,e)),n&&_(n,i),i}function P(t,e,n){if(u(n))return getComputedStyle(t)[e];if(!d(n)){const{style:i}=t;n=`${n}`,i[e]!==n&&(i[e]=n)}}function D(t,e){P(t,"display",e)}function O(t,e){return t.getAttribute(e)}function R(t,e){return t&&t.classList.contains(e)}function I(t){return t.getBoundingClientRect()}function V(t){p(t,(t=>{t&&t.parentNode&&t.parentNode.removeChild(t)}))}function z(t){return C((new DOMParser).parseFromString(t,"text/html").body)}function B(t,e){t.preventDefault(),e&&(t.stopPropagation(),t.stopImmediatePropagation())}function j(t,e){return t&&t.querySelector(e)}function W(t,e){return v(t.querySelectorAll(e))}function M(t,e){y(t,e,!1)}function F(t){return a(t)?t:t?`${t}px`:""}function H(t,e=""){if(!t)throw new Error(`[${i}] ${e}`)}function G(t){setTimeout(t)}const U=()=>{};function Y(t){return requestAnimationFrame(t)}const{min:q,max:X,floor:Z,ceil:K,abs:J}=Math;function Q(t,e,n,i){const s=q(e,n),o=X(e,n);return i?s<t&&t<o:s<=t&&t<=o}function tt(t,e,n){const i=q(e,n),s=X(e,n);return q(X(i,t),s)}function et(t){return+(t>0)-+(t<0)}function nt(t){return t.replace(/([a-z0-9])([A-Z])/g,"$1-$2").toLowerCase()}function it(t,e){return p(e,(e=>{t=t.replace("%s",`${e}`)})),t}function st(t){return t<10?`0${t}`:`${t}`}const ot={};function rt(t){return`${t}${st(ot[t]=(ot[t]||0)+1)}`}function ct(){let t={};function e(e,i){n(e,((e,n)=>{const s=t[e];t[e]=s&&s.filter((t=>t._key?t._key!==i:i||t._namespace!==n))}))}function n(t,e){f(t).join(" ").split(" ").forEach((t=>{const n=t.split(".");e(n[0],n[1])}))}return{on:function(e,i,s,o=10){n(e,((e,n)=>{t[e]=t[e]||[],m(t[e],{_event:e,_callback:i,_namespace:n,_priority:o,_key:s}).sort(((t,e)=>t._priority-e._priority))}))},off:e,offBy:function(n){A(t,((t,i)=>{e(i,n)}))},emit:function(e){(t[e]||[]).forEach((t=>{t._callback.apply(t,v(arguments,1))}))},destroy:function(){t={}}}}const lt="mounted",at="ready",ut="move",dt="moved",ht="shifted",ft="click",pt="active",gt="inactive",mt="visible",$t="hidden",vt="slide:keydown",yt="refresh",bt="updated",_t="resize",St="resized",Et="repositioned",wt="drag",Ct="dragging",At="dragged",xt="scroll",kt="scrolled",Tt="destroy",Lt="arrows:mounted",Nt="arrows:updated",Pt="pagination:mounted",Dt="pagination:updated",Ot="navigation:mounted",Rt="autoplay:play",It="autoplay:playing",Vt="autoplay:pause",zt="lazyload:loaded";function Bt(t){const{event:e}=t,n={};let i=[];function s(t,e,n){o(t,e,((t,e)=>{i=i.filter((i=>!!(i[0]!==t||i[1]!==e||n&&i[2]!==n)||(t.removeEventListener(e,i[2],i[3]),!1)))}))}function o(t,e,n){p(t,(t=>{t&&e.split(" ").forEach(n.bind(null,t))}))}function r(){i=i.filter((t=>s(t[0],t[1]))),e.offBy(n)}return e.on(Tt,r,n),{on:function(t,i,s){e.on(t,i,n,s)},off:function(t){e.off(t,n)},emit:e.emit,bind:function(t,e,n,s){o(t,e,((t,e)=>{i.push([t,e,n,s]),t.addEventListener(e,n,s)}))},unbind:s,destroy:r}}function jt(t,e,n,i){const{now:s}=Date;let o,r,c=0,l=!0,a=0;function u(){if(!l){const r=s()-o;if(r>=t?(c=1,o=s()):c=r/t,n&&n(c),1===c&&(e(),i&&++a>=i))return d();Y(u)}}function d(){l=!0}function h(){cancelAnimationFrame(r),c=0,r=0,l=!0}return{start:function(e){!e&&h(),o=s()-(e?c*t:0),l=!1,Y(u)},rewind:function(){o=s(),c=0,n&&n(c)},pause:d,cancel:h,set:function(e){t=e},isPaused:function(){return l}}}function Wt(t){let e=t;return{set:function(t){e=t},is:function(t){return g(f(t),e)}}}function Mt(t,e){let n;return function(){n||(n=jt(e||0,(()=>{t.apply(this,arguments),n=null}),null,1),n.start())}}const Ft="ttb",Ht={marginRight:["marginBottom","marginLeft"],autoWidth:["autoHeight"],fixedWidth:["fixedHeight"],paddingLeft:["paddingTop","paddingRight"],paddingRight:["paddingBottom","paddingLeft"],width:["height"],left:["top","right"],right:["bottom","left"],x:["y"],X:["Y"],Y:["X"],ArrowLeft:["ArrowUp","ArrowRight"],ArrowRight:["ArrowDown","ArrowLeft"]};function Gt(t,e,n){return{resolve:function(t,e){const{direction:i}=n;return Ht[t]["rtl"!==i||e?i===Ft?0:-1:1]||t},orient:function(t){return t*("rtl"===n.direction?1:-1)}}}const Ut=i,Yt=`${i}__slider`,qt=`${i}__track`,Xt=`${i}__list`,Zt=`${i}__slide`,Kt=`${Zt}--clone`,Jt=`${Zt}__container`,Qt=`${i}__arrows`,te=`${i}__arrow`,ee=`${te}--prev`,ne=`${te}--next`,ie=`${i}__pagination`,se=`${ie}__page`,oe=`${i}__progress`,re=`${oe}__bar`,ce=`${i}__autoplay`,le=`${i}__play`,ae=`${i}__pause`,ue=`${i}__spinner`,de="is-initialized",he="is-active",fe="is-prev",pe="is-next",ge="is-visible",me="is-loading",$e=[he,ge,fe,pe,me],ve={slide:Zt,clone:Kt,arrows:Qt,arrow:te,prev:ee,next:ne,pagination:ie,page:se,spinner:ue};const ye="role",be="aria-controls",_e="aria-current",Se="aria-label",Ee="aria-hidden",we="tabindex",Ce="aria-orientation",Ae=[ye,be,_e,Se,Ee,Ce,we,"disabled"],xe="slide",ke="loop",Te="fade";function Le(t,e,n,i){const{on:s,emit:o,bind:r,destroy:c}=Bt(t),{Components:l,root:a,options:u}=t,{isNavigation:d,updateOnMove:h}=u,{resolve:f}=l.Direction,p=O(i,"style"),g=n>-1,m=C(i,`.${Jt}`),$=u.focusableNodes&&W(i,u.focusableNodes);let v;function b(){const s=g?n:e,o=it(u.i18n.slideX,s+1),r=t.splides.map((t=>t.splide.root.id)).join(" ");L(i,Se,o),L(i,be,r),L(i,ye,"menuitem"),E(w())}function _(){v||S()}function S(){if(!v){const{index:n}=t;E(w()),function(t){const e=!t&&!w();L(i,Ee,e||null),L(i,we,!e&&u.slideFocus?0:null),$&&$.forEach((t=>{L(t,we,e?-1:null)}));t!==R(i,ge)&&(y(i,ge,t),o(t?mt:$t,A))}(function(){if(t.is(Te))return w();const e=I(l.Elements.track),n=I(i),s=f("left"),o=f("right");return Z(e[s])<=K(n[s])&&Z(n[o])<=K(e[o])}()),y(i,fe,e===n-1),y(i,pe,e===n+1)}}function E(t){t!==R(i,he)&&(y(i,he,t),d&&L(i,_e,t||null),o(t?pt:gt,A))}function w(){const{index:i}=t;return i===e||u.cloneStatus&&i===n}const A={index:e,slideIndex:n,slide:i,container:m,isClone:g,mount:function(){g||(i.id=`${a.id}-slide${st(e+1)}`),r(i,"click keydown",(t=>{o("click"===t.type?ft:vt,A,t)})),s([yt,Et,ht,dt,kt],S),s(Ot,b),h&&s(ut,_)},destroy:function(){v=!0,c(),M(i,$e),T(i,Ae),L(i,"style",p)},update:S,style:function(t,e,n){P(n&&m||i,t,e)},isWithin:function(n,i){let s=J(n-e);return g||!u.rewind&&!t.is(ke)||(s=q(s,t.length-s)),s<=i}};return A}const Ne="http://www.w3.org/2000/svg",Pe="m15.5 0.932-4.3 4.38 14.5 14.6-14.5 14.5 4.3 4.4 14.6-14.6 4.4-4.3-4.4-4.4-14.6-14.6z";const De=`${s}-interval`;const Oe={passive:!1,capture:!0},Re="touchmove mousemove",Ie="touchend touchcancel mouseup";const Ve=["Left","Right","Up","Down"];const ze=`${s}-lazy`,Be=`${ze}-srcset`,je=`[${ze}], [${Be}]`;const We=[" ","Enter","Spacebar"];var Me=Object.freeze({__proto__:null,Options:function(t,e,n){const i=Mt(a);let o,r,c;function l(t){t&&removeEventListener("resize",i)}function a(){const e=(i=t=>t[1].matches,v(r).filter(i)[0]||[]);var i;e[0]!==c&&function(e){const i=n.breakpoints[e]||o;i.destroy?(t.options=o,t.destroy("completely"===i.destroy)):(t.state.is(5)&&(l(!0),t.mount()),t.options=i)}(c=e[0])}return{setup:function(){try{k(n,JSON.parse(O(t.root,s)))}catch(t){H(!1,t.message)}o=k({},n);const{breakpoints:e}=n;if(e){const t="min"===n.mediaQuery;r=Object.keys(e).sort(((e,n)=>t?+n-+e:+e-+n)).map((e=>[e,matchMedia(`(${t?"min":"max"}-width:${e}px)`)])),a()}},mount:function(){r&&addEventListener("resize",i)},destroy:l}},Direction:Gt,Elements:function(t,e,n){const{on:s}=Bt(t),{root:o}=t,c={},l=[];let a,u,d,h;function f(){!function(){u=C(o,`.${Yt}`),d=j(o,`.${qt}`),h=C(d,`.${Xt}`),H(d&&h,"A track/list element is missing."),m(l,w(h,`.${Zt}:not(.${Kt})`));const t=v(`.${ce}`),e=v(`.${Qt}`);x(c,{root:o,slider:u,track:d,list:h,slides:l,arrows:e,autoplay:t,prev:j(e,`.${ee}`),next:j(e,`.${ne}`),bar:j(v(`.${oe}`),`.${re}`),play:j(t,`.${le}`),pause:j(t,`.${ae}`)})}(),function(){const t=o.id||rt(i);o.id=t,d.id=d.id||`${t}-track`,h.id=h.id||`${t}-list`}(),b(o,a=y())}function p(){[o,d,h].forEach((t=>{T(t,"style")})),r(l),M(o,a)}function g(){p(),f()}function $(){M(o,a),b(o,a=y())}function v(t){return C(o,t)||C(u,t)}function y(){return[`${Ut}--${n.type}`,`${Ut}--${n.direction}`,n.drag&&`${Ut}--draggable`,n.isNavigation&&`${Ut}--nav`,he]}return x(c,{setup:f,mount:function(){s(yt,g,8),s(bt,$)},destroy:p})},Slides:function(t,e,n){const{on:i,emit:s,bind:o}=Bt(t),{slides:c,list:l}=e.Elements,u=[];function d(){c.forEach(((t,e)=>{v(t,e,-1)}))}function m(){w((t=>{t.destroy()})),r(u)}function $(){m(),d()}function v(e,n,i){const s=Le(t,n,i,e);s.mount(),u.push(s)}function y(t){return t?C((t=>!t.isClone)):u}function w(t,e){y(e).forEach(t)}function C(t){return u.filter("function"==typeof t?t:e=>a(t)?E(e.slide,t):g(f(t),e.index))}return{mount:function(){d(),i(yt,$),i([lt,yt],(()=>{u.sort(((t,e)=>t.index-e.index))}))},destroy:m,update:function(){w((t=>{t.update()}))},register:v,get:y,getIn:function(t){const{Controller:i}=e,s=i.toIndex(t),o=i.hasFocus()?1:n.perPage;return C((t=>Q(t.index,s,s+o-1)))},getAt:function(t){return C(t)[0]},add:function(t,e){p(t,(t=>{if(a(t)&&(t=z(t)),h(t)){const i=c[e];i?S(t,i):_(l,t),b(t,n.classes.slide),function(t,e){const n=W(t,"img");let{length:i}=n;i?n.forEach((t=>{o(t,"load error",(()=>{--i||e()}))})):e()}(t,s.bind(null,_t))}})),s(yt)},remove:function(t){V(C(t).map((t=>t.slide))),s(yt)},forEach:w,filter:C,style:function(t,e,n){w((i=>{i.style(t,e,n)}))},getLength:function(t){return t?c.length:u.length},isEnough:function(){return u.length>n.perPage}}},Layout:function(t,e,n){const{on:i,bind:s,emit:o}=Bt(t),{Slides:r}=e,{resolve:l}=e.Direction,{root:a,track:u,list:d}=e.Elements,{getAt:h}=r;let f,p;function g(){p=null,f=n.direction===Ft,P(a,"maxWidth",F(n.width)),P(u,l("paddingLeft"),$(!1)),P(u,l("paddingRight"),$(!0)),m()}function m(){const t=I(a);p&&p.width===t.width&&p.height===t.height||(P(u,"height",function(){let t="";f&&(t=v(),H(t,"height or heightRatio is missing."),t=`calc(${t} - ${$(!1)} - ${$(!0)})`);return t}()),r.style(l("marginRight"),F(n.gap)),r.style("width",(n.autoWidth?"":F(n.fixedWidth)||(f?"":y()))||null),r.style("height",F(n.fixedHeight)||(f?n.autoHeight?"":y():v())||null,!0),p=t,o(St))}function $(t){const{padding:e}=n,i=l(t?"right":"left");return e&&F(e[i]||(c(e)?0:e))||"0px"}function v(){return F(n.height||I(d).width*n.heightRatio)}function y(){const t=F(n.gap);return`calc((100%${t&&` + ${t}`})/${n.perPage||1}${t&&` - ${t}`})`}function b(t,e){const n=h(t);if(n){const t=I(n.slide)[l("right")],i=I(d)[l("left")];return J(t-i)+(e?0:_())}return 0}function _(){const t=h(0);return t&&parseFloat(P(t.slide,l("marginRight")))||0}return{mount:function(){g(),s(window,"resize load",Mt(o.bind(this,_t))),i([bt,yt],g),i(_t,m)},listSize:function(){return I(d)[l("width")]},slideSize:function(t,e){const n=h(t||0);return n?I(n.slide)[l("width")]+(e?0:_()):0},sliderSize:function(){return b(t.length-1,!0)-b(-1,!0)},totalSize:b,getPadding:function(t){return parseFloat(P(u,l("padding"+(t?"Right":"Left"))))||0}}},Clones:function(t,e,n){const{on:i,emit:s}=Bt(t),{Elements:o,Slides:c}=e,{resolve:l}=e.Direction,u=[];let d;function h(){(d=$())&&(!function(e){const i=c.get().slice(),{length:s}=i;if(s){for(;i.length<e;)m(i,i);m(i.slice(-e),i.slice(0,e)).forEach(((r,l)=>{const a=l<e,d=function(e,i){const s=e.cloneNode(!0);return b(s,n.classes.clone),s.id=`${t.root.id}-clone${st(i+1)}`,s}(r.slide,l);a?S(d,i[0].slide):_(o.list,d),m(u,d),c.register(d,l-e+(a?0:s),r.index)}))}}(d),s(_t))}function f(){V(u),r(u)}function p(){f(),h()}function g(){d<$()&&s(yt)}function $(){let{clones:e}=n;if(t.is(ke)){if(!e){const i=function(t,e){if(a(e)){const n=N("div",{style:`width: ${e}; position: absolute;`},t);e=I(n).width,V(n)}return e}(o.list,n[l("fixedWidth")]);e=(i&&K(I(o.track)[l("width")]/i)||n[l("autoWidth")]&&t.length||n.perPage)*(n.drag?(n.flickMaxPages||1)+1:2)}}else e=0;return e}return{mount:function(){h(),i(yt,p),i([bt,_t],g)},destroy:f}},Move:function(t,e,n){const{on:i,emit:s}=Bt(t),{slideSize:o,getPadding:r,totalSize:c,listSize:l,sliderSize:a}=e.Layout,{resolve:d,orient:h}=e.Direction,{list:f,track:p}=e.Elements;let g;function m(){E()||(e.Scroll.cancel(),$(t.index),s(Et))}function $(t){v(b(t,!0))}function v(e,n){if(!t.is(Te)){const i=n?e:function(e){if(t.is(ke)){const t=h(e-_()),n=w(!1,e)&&t<0,i=w(!0,e)&&t>0;(n||i)&&(e=y(e,i))}return e}(e);f.style.transform=`translate${d("X")}(${i}px)`,e!==i&&s(ht)}}function y(t,e){const n=t-S(e),i=a();return t-=h(i*(K(J(n)/i)||1))*(e?1:-1)}function b(e,i){const s=h(c(e-1)-function(t){const{focus:e}=n;return"center"===e?(l()-o(t,!0))/2:+e*o(t)||0}(e));return i?function(e){n.trimSpace&&t.is(xe)&&(e=tt(e,0,h(a()-l())));return e}(s):s}function _(){const t=d("left");return I(f)[t]-I(p)[t]+h(r(!1))}function S(t){return b(t?e.Controller.getEnd():0,!!n.trimSpace)}function E(){return t.state.is(4)&&n.waitForTransition}function w(t,e){e=u(e)?_():e;const n=!0!==t&&h(e)<h(S(!1)),i=!1!==t&&h(e)>h(S(!0));return n||i}return{mount:function(){g=e.Transition,i([lt,St,bt,yt],m)},destroy:function(){T(f,"style")},move:function(i,o,r,c){if(!E()){const{set:l}=t.state,a=_();i!==o&&(g.cancel(),v(y(a,i>o),!0)),l(4),s(ut,o,r,i),g.start(o,(()=>{l(3),s(dt,o,r,i),"move"===n.trimSpace&&i!==r&&a===_()?e.Controller.go(i>r?">":"<",!1,c):c&&c()}))}},jump:$,translate:v,shift:y,cancel:function(){v(_()),g.cancel()},toIndex:function(t){const n=e.Slides.get();let i=0,s=1/0;for(let e=0;e<n.length;e++){const o=n[e].index,r=J(b(o,!0)-t);if(!(r<=s))break;s=r,i=o}return i},toPosition:b,getPosition:_,getLimit:S,isBusy:E,exceededLimit:w}},Controller:function(t,e,n){const{on:i}=Bt(t),{Move:s}=e,{getPosition:o,getLimit:r}=s,{isEnough:c,getLength:l}=e.Slides,d=t.is(ke),h=t.is(xe);let f,p,g,m=n.start||0,$=m;function v(){f=l(!0),p=n.perMove,g=n.perPage,m=tt(m,0,f-1)}function y(t,n,i,o,r){const c=n?t:k(t);e.Scroll.scroll(n||i?s.toPosition(c,!0):t,o,(()=>{T(s.toIndex(s.getPosition())),r&&r()}))}function b(t){return S(!1,t)}function _(t){return S(!0,t)}function S(t,e){const n=p||(L()?1:g),i=E(m+n*(t?-1:1),m);return-1!==i||!h||(s=o(),c=r(!t),l=1,J(s-c)<l)?e?i:C(i):t?0:w();var s,c,l}function E(t,e,i){if(c()){const s=w();t<0||t>s?t=Q(0,t,e,!0)||Q(s,e,t,!0)?A(x(t)):d?p||L()?t:t<0?-(f%g||g):f:n.rewind?t<0?s:0:-1:i||t===e||(t=p?t:A(x(e)+(t<e?-1:1)))}else t=-1;return t}function w(){let t=f-g;return(L()||d&&p)&&(t=f-1),X(t,0)}function C(t){return d?c()?t%f+(t<0?f:0):-1:t}function A(t){return tt(L()?t:g*t,0,w())}function x(t){return L()||(t=Q(t,f-g,f-1)?f-1:t,t=Z(t/g)),t}function k(t){const e=s.toIndex(t);return h?tt(e,0,w()):e}function T(t){t!==m&&($=m,m=t)}function L(){return!u(n.focus)||n.isNavigation}return{mount:function(){v(),i([bt,yt],v,9)},go:function(t,e,i){const o=function(t){let e=m;if(a(t)){const[,n,i]=t.match(/([+\-<>])(\d+)?/)||[];"+"===n||"-"===n?e=E(m+ +`${n}${+i||1}`,m,!0):">"===n?e=i?A(+i):b(!0):"<"===n&&(e=_(!0))}else e=d?t:tt(t,0,w());return e}(t);if(n.useScroll)y(o,!0,!0,n.speed,i);else{const t=C(o);t>-1&&!s.isBusy()&&(e||t!==m)&&(T(t),s.move(o,t,$,i))}},scroll:y,getNext:b,getPrev:_,getAdjacent:S,getEnd:w,setIndex:T,getIndex:function(t){return t?$:m},toIndex:A,toPage:x,toDest:k,hasFocus:L}},Arrows:function(t,e,n){const{on:i,bind:s,emit:o}=Bt(t),{classes:r,i18n:c}=n,{Elements:l,Controller:a}=e;let u,d=l.arrows,h=l.prev,f=l.next;const p={};function g(){if(n.arrows&&(h&&f||(d=N("div",r.arrows),h=m(!0),f=m(!1),u=!0,_(d,[h,f]),S(d,C("slider"===n.arrows&&l.slider||t.root)))),h&&f)if(p.prev)D(d,!1===n.arrows?"none":"");else{const{id:t}=l.track;L(h,be,t),L(f,be,t),p.prev=h,p.next=f,function(){const{go:t}=a;i([lt,dt,bt,yt,kt],$),s(f,"click",(()=>{t(">",!0)})),s(h,"click",(()=>{t("<",!0)}))}(),o(Lt,h,f)}}function m(t){return z(`<button class="${r.arrow} ${t?r.prev:r.next}" type="button"><svg xmlns="${Ne}" viewBox="0 0 40 40" width="40" height="40"><path d="${n.arrowPath||Pe}" />`)}function $(){const e=t.index,n=a.getPrev(),i=a.getNext(),s=n>-1&&e<n?c.last:c.prev,r=i>-1&&e>i?c.first:c.next;h.disabled=n<0,f.disabled=i<0,L(h,Se,s),L(f,Se,r),o(Nt,h,f,n,i)}return{arrows:p,mount:function(){g(),i(bt,g)},destroy:function(){u?V(d):(T(h,Ae),T(f,Ae))}}},Autoplay:function(t,e,n){const{on:i,bind:s,emit:o}=Bt(t),r=jt(n.interval,t.go.bind(t,">"),(function(t){const{bar:e}=l;e&&P(e,"width",100*t+"%"),o(It,t)})),{isPaused:c}=r,{Elements:l}=e;let a,u,d;function h(t){const e=t?"pause":"play",i=l[e];i&&(L(i,be,l.track.id),L(i,Se,n.i18n[e]),s(i,"click",t?p:f))}function f(){c()&&e.Slides.isEnough()&&(r.start(!n.resetProgress),u=a=d=!1,o(Rt))}function p(t=!0){c()||(r.pause(),o(Vt)),d=t}function g(){d||(a||u?p(!1):f())}function m(){const i=e.Slides.getAt(t.index);r.set(i&&+O(i.slide,De)||n.interval)}return{mount:function(){const{autoplay:t}=n;t&&(h(!0),h(!1),function(){const{root:t}=l;n.pauseOnHover&&s(t,"mouseenter mouseleave",(t=>{a="mouseenter"===t.type,g()}));n.pauseOnFocus&&s(t,"focusin focusout",(t=>{u="focusin"===t.type,g()}));i([ut,xt,yt],r.rewind),i(ut,m)}(),"pause"!==t&&f())},destroy:r.cancel,play:f,pause:p,isPaused:c}},Cover:function(t,e,n){const{on:i}=Bt(t);function s(t){e.Slides.forEach((e=>{const n=C(e.container||e.slide,"img");n&&n.src&&o(t,n,e)}))}function o(t,e,n){n.style("background",t?`center/cover no-repeat url("${e.src}")`:"",!0),D(e,t?"none":"")}return{mount:function(){n.cover&&(i(zt,((t,e)=>{o(!0,t,e)})),i([lt,bt,yt],s.bind(null,!0)))},destroy:function(){s(!1)}}},Scroll:function(t,e,n){const{on:i,emit:s}=Bt(t),{Move:o}=e,{getPosition:r,getLimit:c,exceededLimit:l}=o;let a,u;function d(e,i,p,g){const m=r();let $=1;var v;i=i||(v=J(e-m),X(v/1.5,800)),u=p,f(),a=jt(i,h,(i=>{const s=r(),a=(m+(e-m)*function(t){const{easingFunc:e}=n;return e?e(t):1-Math.pow(1-t,4)}(i)-r())*$;var u;o.translate(s+a),t.is(xe)&&!g&&l()&&($*=.6,J(a)<10&&(u=l(!1),d(c(!u),600,null,!0)))}),1),s(xt),a.start()}function h(){const e=r(),n=o.toIndex(e);Q(n,0,t.length-1)||o.translate(o.shift(e,n>0),!0),u&&u(),s(kt)}function f(){a&&a.cancel()}function p(){a&&!a.isPaused()&&(f(),h())}return{mount:function(){i(ut,f),i([bt,yt],p)},destroy:f,scroll:d,cancel:p}},Drag:function(t,e,n){const{on:i,emit:s,bind:o,unbind:r}=Bt(t),{Move:l,Scroll:a,Controller:u}=e,{track:d}=e.Elements,{resolve:h,orient:f}=e.Direction,{getPosition:p,exceededLimit:g}=l;let m,$,v,y,b,_,S,w,C,A=!1;function x(){const{drag:t}=n;V(!t),b="free"===t}function k(t){if(!w){const{noDrag:e}=n,i=I(t);!(!e||!E(t.target,e))||!i&&t.button||(l.isBusy()?B(t,!0):(C=i?d:window,v=null,y=null,S=!1,o(C,Re,T,Oe),o(C,Ie,L,Oe),l.cancel(),a.cancel(),N(t)))}}function T(e){if(y||s(wt),y=e,e.cancelable){const i=O(e)-O($);if(_){l.translate(m+function(e){return e/(A&&t.is(xe)?5:1)}(i));const n=R(e)-R($)>200,o=A!==(A=g());(n||o)&&N(e),s(Ct),S=!0,B(e)}else{let{dragMinThreshold:t}=n;t=c(t)?t:{mouse:0,touch:+t||10},_=J(i)>(I(e)?t.touch:t.mouse),D()&&B(e)}}}function L(i){r(C,Re,T),r(C,Ie,L);const{index:o}=t;if(y){if(_||i.cancelable&&D()){const s=function(e){if(t.is(ke)||!A){const t=$===y&&v||$,n=O(y)-O(t),i=R(e)-R(t),s=R(e)-R(y)<200;if(i&&s)return n/i}return 0}(i),r=function(t){return p()+et(t)*q(J(t)*(n.flickPower||600),b?1/0:e.Layout.listSize()*(n.flickMaxPages||1))}(s);b?u.scroll(r):t.is(Te)?u.go(o+f(et(s))):u.go(u.toDest(r),!0),B(i)}s(At)}else b||p()===l.toPosition(o)||u.go(o,!0);_=!1}function N(t){v=$,$=t,m=p()}function P(t){!w&&S&&B(t,!0)}function D(){return J(O(y)-O($))>J(O(y,!0)-O($,!0))}function O(t,e){return(I(t)?t.touches[0]:t)[`page${h(e?"Y":"X")}`]}function R(t){return t.timeStamp}function I(t){return"undefined"!=typeof TouchEvent&&t instanceof TouchEvent}function V(t){w=t}return{mount:function(){o(d,Re,U,Oe),o(d,Ie,U,Oe),o(d,"touchstart mousedown",k,Oe),o(d,"click",P,{capture:!0}),o(d,"dragstart",B),i([lt,bt],x)},disable:V,isDragging:function(){return _}}},Keyboard:function(t,e,n){const{on:i,bind:s,unbind:o}=Bt(t),{root:r}=e.Elements,{resolve:c}=e.Direction;let l,a;function u(){const{keyboard:t="global"}=n;t&&("focused"===t?(l=r,L(r,we,0)):l=window,s(l,"keydown",m))}function d(){o(l,"keydown"),h(l)&&T(l,we)}function f(){a=!0,G((()=>{a=!1}))}function p(){d(),u()}function m(e){if(!a){const{key:n}=e,i=g(Ve,n)?`Arrow${n}`:n;i===c("ArrowLeft")?t.go("<"):i===c("ArrowRight")&&t.go(">")}}return{mount:function(){u(),i(bt,p),i(ut,f)},destroy:d}},LazyLoad:function(t,e,n){const{on:i,off:s,bind:o,emit:r}=Bt(t),c="sequential"===n.lazyLoad;let l=[],a=0;function u(){h(),d()}function d(){e.Slides.forEach((t=>{W(t.slide,je).forEach((e=>{const i=O(e,ze),s=O(e,Be);if(i!==e.src||s!==e.srcset){const o=n.classes.spinner,r=e.parentElement,c=C(r,`.${o}`)||N("span",o,r);L(c,ye,"presentation"),l.push({_img:e,_Slide:t,src:i,srcset:s,_spinner:c}),!e.src&&D(e,"none")}}))})),c&&g()}function h(){a=0,l=[]}function f(){l=l.filter((e=>{const i=n.perPage*((n.preloadPages||1)+1)-1;return!e._Slide.isWithin(t.index,i)||p(e)})),l.length||s(dt)}function p(t){const{_img:e}=t;b(t._Slide.slide,me),o(e,"load error",(e=>{!function(t,e){const{_Slide:n}=t;M(n.slide,me),e||(V(t._spinner),D(t._img,""),r(zt,t._img,n),r(_t));c&&g()}(t,"error"===e.type)})),["src","srcset"].forEach((n=>{t[n]&&(L(e,n,t[n]),T(e,"src"===n?ze:Be))}))}function g(){a<l.length&&p(l[a++])}return{mount:function(){n.lazyLoad&&(d(),i(yt,u),c||i([lt,yt,dt,kt],f))},destroy:h}},Pagination:function(t,e,n){const{on:i,emit:s,bind:o,unbind:c}=Bt(t),{Slides:l,Elements:a,Controller:u}=e,{hasFocus:d,getIndex:h}=u,f=[];let p;function g(){m(),n.pagination&&l.isEnough()&&(!function(){const{length:e}=t,{classes:i,i18n:s,perPage:r}=n,c="slider"===n.pagination&&a.slider||a.root,u=d()?e:K(e/r);p=N("ul",i.pagination,c);for(let t=0;t<u;t++){const e=N("li",null,p),n=N("button",{class:i.page,type:"button"},e),c=l.getIn(t).map((t=>t.slide.id)),a=!d()&&r>1?s.pageX:s.slideX;o(n,"click",$.bind(null,t)),L(n,be,c.join(" ")),L(n,Se,it(a,t+1)),f.push({li:e,button:n,page:t})}}(),s(Pt,{list:p,items:f},v(t.index)),y())}function m(){p&&(V(p),f.forEach((t=>{c(t.button,"click")})),r(f),p=null)}function $(t){u.go(`>${t}`,!0,(()=>{const e=l.getAt(u.toIndex(t));var n;e&&((n=e.slide).setActive&&n.setActive()||n.focus({preventScroll:!0}))}))}function v(t){return f[u.toPage(t)]}function y(){const t=v(h(!0)),e=v(h());t&&(M(t.button,he),T(t.button,_e)),e&&(b(e.button,he),L(e.button,_e,!0)),s(Dt,{list:p,items:f},t,e)}return{items:f,mount:function(){g(),i([bt,yt],g),i([ut,kt],y)},destroy:m,getAt:v,update:y}},Sync:function(t,e,n){const{list:i}=e.Elements,s=[];function o(){t.splides.forEach((e=>{var n;!e.isParent&&(n=e.splide,[t,n].forEach((e=>{const i=Bt(e),o=e===t?n:t;i.on(ut,((t,e,n)=>{o.go(o.is(ke)?n:t)})),s.push(i)})))})),n.isNavigation&&function(){const e=Bt(t),{on:n}=e;n(ft,a),n(vt,u),n([lt,bt],l),L(i,ye,"menu"),s.push(e),e.emit(Ot,t.splides)}()}function c(){T(i,Ae),s.forEach((t=>{t.destroy()})),r(s)}function l(){L(i,Ce,n.direction!==Ft?"horizontal":null)}function a(e){t.go(e.index)}function u(t,e){g(We,e.key)&&(a(t),B(e))}return{mount:o,destroy:c,remount:function(){c(),o()}}},Wheel:function(t,e,n){const{bind:i}=Bt(t);function s(i){if(i.cancelable){const{deltaY:s}=i;if(s){const o=s<0;t.go(o?"<":">"),function(i){return!n.releaseWheel||t.state.is(4)||-1!==e.Controller.getAdjacent(i)}(o)&&B(i)}}}return{mount:function(){n.wheel&&i(e.Elements.track,"wheel",s,Oe)}}}});const Fe={type:"slide",speed:400,waitForTransition:!0,perPage:1,cloneStatus:!0,arrows:!0,pagination:!0,interval:5e3,pauseOnHover:!0,pauseOnFocus:!0,resetProgress:!0,easing:"cubic-bezier(0.25, 1, 0.5, 1)",drag:!0,direction:"ltr",slideFocus:!0,trimSpace:!0,focusableNodes:"a, button, textarea, input, select, iframe",classes:ve,i18n:{prev:"Previous slide",next:"Next slide",first:"Go to first slide",last:"Go to last slide",slideX:"Go to slide %s",pageX:"Go to page %s",play:"Start autoplay",pause:"Pause autoplay"}};function He(t,e,n){const{on:i}=Bt(t);return{mount:function(){i([lt,yt],(()=>{G((()=>{e.Slides.style("transition",`opacity ${n.speed}ms ${n.easing}`)}))}))},start:function(t,n){const{track:i}=e.Elements;P(i,"height",F(I(i).height)),G((()=>{n(),P(i,"height","")}))},cancel:U}}function Ge(t,e,n){const{bind:i}=Bt(t),{Move:s,Controller:o}=e,{list:r}=e.Elements;let c;function l(){a("")}function a(t){P(r,"transition",t)}return{mount:function(){i(r,"transitionend",(t=>{t.target===r&&c&&(l(),c())}))},start:function(e,i){const r=s.toPosition(e,!0),l=s.getPosition(),u=function(e){const{rewindSpeed:i}=n;if(t.is(xe)&&i){const t=o.getIndex(!0),n=o.getEnd();if(0===t&&e>=n||t>=n&&0===e)return i}return n.speed}(e);J(r-l)>=1&&u>=1?(a(`transform ${u}ms ${n.easing}`),s.translate(r,!0),c=i):(s.jump(e),i())},cancel:l}}const Ue=class{constructor(t,e){this.event=ct(),this.Components={},this.state=Wt(1),this.splides=[],this._options={},this._Extensions={};const n=a(t)?j(document,t):t;H(n,`${n} is invalid.`),this.root=n,k(Fe,Ue.defaults),k(k(this._options,Fe),e||{})}mount(t,e){const{state:n,Components:i}=this;H(n.is([1,5]),"Already mounted!"),n.set(1),this._Components=i,this._Transition=e||this._Transition||(this.is(Te)?He:Ge),this._Extensions=t||this._Extensions;return A(x({},Me,this._Extensions,{Transition:this._Transition}),((t,e)=>{const n=t(this,i,this._options);i[e]=n,n.setup&&n.setup()})),A(i,(t=>{t.mount&&t.mount()})),this.emit(lt),b(this.root,de),n.set(3),this.emit(at),this}sync(t){return this.splides.push({splide:t}),t.splides.push({splide:this,isParent:!0}),this.state.is(3)&&(this._Components.Sync.remount(),t.Components.Sync.remount()),this}go(t){return this._Components.Controller.go(t),this}on(t,e){return this.event.on(t,e,null,20),this}off(t){return this.event.off(t),this}emit(t){return this.event.emit(t,...v(arguments,1)),this}add(t,e){return this._Components.Slides.add(t,e),this}remove(t){return this._Components.Slides.remove(t),this}is(t){return this._options.type===t}refresh(){return this.emit(yt),this}destroy(t=!0){const{event:e,state:n}=this;return n.is(1)?e.on(at,this.destroy.bind(this,t),this):(A(this._Components,(e=>{e.destroy&&e.destroy(t)}),!0),e.emit(Tt),e.destroy(),t&&r(this.splides),n.set(5)),this}get options(){return this._options}set options(t){const{_options:e}=this;k(e,t),this.state.is(1)||this.emit(bt,e)}get length(){return this._Components.Slides.getLength(!0)}get index(){return this._Components.Controller.getIndex()}};let Ye=Ue;Ye.defaults={},Ye.STATES=o;const qe={listTag:"ul",slideTag:"li"};class Xe{constructor(t,e){this.styles={},this.id=t,this.options=e}rule(t,e,n,i){i=i||"default";const s=this.styles[i]=this.styles[i]||{};(s[t]=s[t]||{})[e]=n}build(){let t="";return this.styles.default&&(t+=this.buildSelectors(this.styles.default)),Object.keys(this.styles).sort(((t,e)=>"min"===this.options.mediaQuery?+t-+e:+e-+t)).forEach((e=>{"default"!==e&&(t+=`@media screen and (max-width: ${e}px) {`,t+=this.buildSelectors(this.styles[e]),t+="}")})),t}buildSelectors(t){let e="";return A(t,((t,n)=>{n=`#${this.id} ${n}`.trim(),e+=`${n} {`,A(t,((t,n)=>{(t||0===t)&&(e+=`${n}: ${t};`)})),e+="}"})),e}}class Ze{constructor(t,e,n,i){this.slides=[],this.options={},this.breakpoints=[],k(Fe,i||{}),k(k(this.options,Fe),e||{}),this.contents=t,this.config=x({},qe,n||{}),this.id=this.config.id||rt("splide"),this.Style=new Xe(this.id,this.options),this.Direction=Gt(0,0,this.options),H(this.contents.length,"Provide at least 1 content."),this.init()}static clean(t){const{on:e}=Bt(t),{root:n}=t,i=W(n,`.${Kt}`);e(lt,(()=>{V(C(n,"style"))})),V(i)}init(){this.parseBreakpoints(),this.initSlides(),this.registerRootStyles(),this.registerTrackStyles(),this.registerSlideStyles(),this.registerListStyles()}initSlides(){m(this.slides,this.contents.map(((t,e)=>{(t=a(t)?{html:t}:t).styles=t.styles||{},t.attrs=t.attrs||{},this.cover(t);const n=`${this.options.classes.slide} ${0===e?he:""}`;return x(t.attrs,{class:`${n} ${t.attrs.class||""}`.trim(),style:this.buildStyles(t.styles)}),t}))),this.isLoop()&&this.generateClones(this.slides)}registerRootStyles(){this.breakpoints.forEach((([t,e])=>{this.Style.rule(" ","max-width",F(e.width),t)}))}registerTrackStyles(){const{Style:t}=this,e=`.${qt}`;this.breakpoints.forEach((([n,i])=>{t.rule(e,this.resolve("paddingLeft"),this.cssPadding(i,!1),n),t.rule(e,this.resolve("paddingRight"),this.cssPadding(i,!0),n),t.rule(e,"height",this.cssTrackHeight(i),n)}))}registerListStyles(){const{Style:t}=this,e=`.${Xt}`;this.breakpoints.forEach((([n,i])=>{t.rule(e,"transform",this.buildTranslate(i),n),this.cssSlideHeight(i)||t.rule(e,"aspect-ratio",this.cssAspectRatio(i),n)}))}registerSlideStyles(){const{Style:t}=this,e=`.${Zt}`;this.breakpoints.forEach((([n,i])=>{t.rule(e,"width",this.cssSlideWidth(i),n),t.rule(e,"height",this.cssSlideHeight(i)||"100%",n),t.rule(e,this.resolve("marginRight"),F(i.gap)||"0px",n),t.rule(`${e} > img`,"display",i.cover?"none":"inline",n)}))}buildTranslate(t){const{resolve:e,orient:n}=this.Direction,i=[];return i.push(this.cssOffsetClones(t)),i.push(this.cssOffsetGaps(t)),this.isCenter(t)&&(i.push(this.buildCssValue(n(-50),"%")),i.push(...this.cssOffsetCenter(t))),i.filter(Boolean).map((t=>`translate${e("X")}(${t})`)).join(" ")}cssOffsetClones(t){const{resolve:e,orient:n}=this.Direction,i=this.getCloneCount();if(this.isFixedWidth(t)){const{value:s,unit:o}=this.parseCssValue(t[e("fixedWidth")]);return this.buildCssValue(n(s)*i,o)}return`${n(100*i/t.perPage)}%`}cssOffsetCenter(t){const{resolve:e,orient:n}=this.Direction;if(this.isFixedWidth(t)){const{value:i,unit:s}=this.parseCssValue(t[e("fixedWidth")]);return[this.buildCssValue(n(i/2),s)]}const i=[],{perPage:s,gap:o}=t;if(i.push(`${n(50/s)}%`),o){const{value:t,unit:e}=this.parseCssValue(o),r=(t/s-t)/2;i.push(this.buildCssValue(n(r),e))}return i}cssOffsetGaps(t){const e=this.getCloneCount();if(e&&t.gap){const{orient:n}=this.Direction,{value:i,unit:s}=this.parseCssValue(t.gap);if(this.isFixedWidth(t))return this.buildCssValue(n(i*e),s);const{perPage:o}=t,r=e/o;return this.buildCssValue(n(r*i),s)}return""}resolve(t){return nt(this.Direction.resolve(t))}cssPadding(t,e){const{padding:n}=t,i=this.Direction.resolve(e?"right":"left",!0);return n&&F(n[i]||(c(n)?0:n))||"0px"}cssTrackHeight(t){let e="";return this.isVertical()&&(e=this.cssHeight(t),H(e,'"height" is missing.'),e=`calc(${e} - ${this.cssPadding(t,!1)} - ${this.cssPadding(t,!0)})`),e}cssHeight(t){return F(t.height)}cssSlideWidth(t){return t.autoWidth?"":F(t.fixedWidth)||(this.isVertical()?"":this.cssSlideSize(t))}cssSlideHeight(t){return F(t.fixedHeight)||(this.isVertical()?t.autoHeight?"":this.cssSlideSize(t):this.cssHeight(t))}cssSlideSize(t){const e=F(t.gap);return`calc((100%${e&&` + ${e}`})/${t.perPage||1}${e&&` - ${e}`})`}cssAspectRatio(t){const{heightRatio:e}=t;return e?""+1/e:""}buildCssValue(t,e){return`${t}${e}`}parseCssValue(t){if(a(t)){return{value:parseFloat(t)||0,unit:t.replace(/\d*(\.\d*)?/,"")||"px"}}return{value:t,unit:"px"}}parseBreakpoints(){const{breakpoints:t}=this.options;this.breakpoints.push(["default",this.options]),t&&A(t,((t,e)=>{this.breakpoints.push([e,k(k({},this.options),t)])}))}isFixedWidth(t){return!!t[this.Direction.resolve("fixedWidth")]}isLoop(){return this.options.type===ke}isCenter(t){if("center"===t.focus){if(this.isLoop())return!0;if(this.options.type===xe)return!this.options.trimSpace}return!1}isVertical(){return this.options.direction===Ft}buildClasses(){const{options:t}=this;return[Ut,`${Ut}--${t.type}`,`${Ut}--${t.direction}`,t.drag&&`${Ut}--draggable`,t.isNavigation&&`${Ut}--nav`,he,!this.config.hidden&&"is-rendered"].filter(Boolean).join(" ")}buildAttrs(t){let e="";return A(t,((t,n)=>{e+=t?` ${nt(n)}="${t}"`:""})),e.trim()}buildStyles(t){let e="";return A(t,((t,n)=>{e+=` ${nt(n)}:${t};`})),e.trim()}renderSlides(){const{slideTag:t}=this.config;return this.slides.map((e=>`<${t} ${this.buildAttrs(e.attrs)}>${e.html||""}</${t}>`)).join("")}cover(t){const{styles:e,html:n=""}=t;if(this.options.cover&&!this.options.lazyLoad){const t=n.match(/<img.*?src\s*=\s*(['"])(.+?)\1.*?>/);t&&t[2]&&(e.background=`center/cover no-repeat url('${t[2]}')`)}}generateClones(t){const{classes:e}=this.options,n=this.getCloneCount(),i=t.slice();for(;i.length<n;)m(i,i);m(i.slice(-n).reverse(),i.slice(0,n)).forEach(((i,s)=>{const o=x({},i.attrs,{class:`${i.attrs.class} ${e.clone}`}),r=x({},i,{attrs:o});s<n?t.unshift(r):t.push(r)}))}getCloneCount(){if(this.isLoop()){const{options:t}=this;if(t.clones)return t.clones;return X(...this.breakpoints.map((([,t])=>t.perPage)))*((t.flickMaxPages||1)+1)}return 0}renderArrows(){let t="";return t+=`<div class="${this.options.classes.arrows}">`,t+=this.renderArrow(!0),t+=this.renderArrow(!1),t+="</div>",t}renderArrow(t){const{classes:e,i18n:n}=this.options,i={class:`${e.arrow} ${t?e.prev:e.next}`,type:"button",ariaLabel:t?n.prev:n.next};return`<button ${this.buildAttrs(i)}><svg xmlns="${Ne}" viewBox="0 0 40 40" width="40" height="40"><path d="${this.options.arrowPath||Pe}" /></svg></button>`}html(){const{rootClass:t,listTag:e,arrows:n,beforeTrack:i,afterTrack:s,slider:o,beforeSlider:r,afterSlider:c}=this.config;let l="";return l+=`<div id="${this.id}" class="${this.buildClasses()} ${t||""}">`,l+=`<style>${this.Style.build()}</style>`,o&&(l+=r||"",l+='<div class="splide__slider">'),l+=i||"",n&&(l+=this.renderArrows()),l+='<div class="splide__track">',l+=`<${e} class="splide__list">`,l+=this.renderSlides(),l+=`</${e}>`,l+="</div>",l+=s||"",o&&(l+="</div>",l+=c||""),l+="</div>",l}}},"./src/models/Style.ts":
/*!*****************************!*\
  !*** ./src/models/Style.ts ***!
  \*****************************/(t,e,n)=>{n.r(e),n.d(e,{DesignStyle:()=>s});var i,s=(t=>(t.Cozy="cozy",t.Japandi="japandi",t.Modern="modern",t.Fusion="fusion",t.NeoClassic="neoclassic",t))(s||{});(i=s||(s={})).fromString=function(t){return"cozy"===t?"cozy":"japandi"===t?"japandi":"neoclassic"===t?"neoclassic":"modern"===t?"modern":"fusion"===t?"fusion":"cozy"},i.fromNumber=function(t){return 0===t?"cozy":1===t?"japandi":2===t?"fusion":3===t?"modern":"neoclassic"}},"./src/utils/LocalStorageHandler.ts":
/*!******************************************!*\
  !*** ./src/utils/LocalStorageHandler.ts ***!
  \******************************************/(t,e,n)=>{n.r(e),n.d(e,{LocalStorageHandler:()=>i});class i{get(t){try{return JSON.parse(localStorage.getItem(t))}catch(e){return localStorage.getItem(t)}}set(t,e){localStorage.setItem(t,e.toString())}init(){this.set("style","cozy"),this.set("bath",!0),this.set("shower",!1),this.set("ceiling","stretch ceiling"),this.set("flooring","laminat"),this.set("hygienic_shower",!1),this.set("second_gypsum_layer",!1),this.set("floor_screed",!1),this.set("heated_flooring",!1),this.set("denoising",!1),this.set("entrance_doors",!1),this.set("conditioning",!1),this.set("amount_of_rooms",2),this.set("amount_of_bathrooms",1),this.set("appliances","gorenje"),this.set("appliances_bool_total",!1),this.set("furniture_bool",!0),this.set("space",50)}initPortugal(){this.set("style","cozy"),this.set("space",50),this.set("amount_of_rooms",2),this.set("amount_of_bathrooms",1),this.set("bath",!0),this.set("shower",!1),this.set("flooring","laminat"),this.set("finishing_materials",!1),this.set("demontage",!1),this.set("cement_screed",!1),this.set("heated_flooring",0),this.set("denoising",!1),this.set("entrance_doors",!1),this.set("windows_installation",0),this.set("builtin_furniture",!1),this.set("conditioning",0),this.set("furniture_bool",!1),this.set("appliances_bool_total",!1),this.set("appliances","gorenje"),this.set("transportation_expenses",5)}storageToRequestBody(t){const e={};for(const n in t)"length"!==n&&"costPerMetre"!=n&&("true"!==String(t[n])?"false"!==String(t[n])?isFinite(Number(t[n]))?e[n]=Number(t[n]):e[n]=t[n]:e[n]=0:e[n]=1);return JSON.stringify(e)}}}},e={};function n(i){var s=e[i];if(void 0!==s)return s.exports;var o=e[i]={exports:{}};return t[i](o,o.exports,n),o.exports}n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var i={};(()=>{
/*!**************************!*\
  !*** ./src/logics_19.ts ***!
  \**************************/
n.r(i);var t=n(/*! @splidejs/splide */"./node_modules/@splidejs/splide/dist/js/splide.esm.js"),e=n(/*! ./utils/LocalStorageHandler */"./src/utils/LocalStorageHandler.ts"),s=n(/*! ./models/Style */"./src/models/Style.ts");$((function(){const n=$(window).width();$(".choiceactive.card").toggleClass("choiceActiveBorder"),$("#laminat").prop("checked",!0);const i={arrows:!1,pagination:!1,speed:550,flickPower:400,breakpoints:{480:{pagination:!0,speed:650}}},o=(new e.LocalStorageHandler,new t.default(".slider-container.splide",i));if(o.mount(),$("input").each((function(){$(this).attr("name",$(this).data("name"))})),$(".slider-wrapper.splide").length){$(".fact-link").on("click",(function(){$(this).is(".active")||($(".fact-container.active").removeClass("active"),$(".fact-container").eq($(this).index()).addClass("active"),$(".fact-link.active").removeClass("active"),$(this).addClass("active"))})),$(".tab-new").on("click",(function(){if($(this).is(".active"))return;let t=$(this).index();$(".tab-new.active").removeClass("active"),$(this).addClass("active"),$(".slider-image-new").removeClass("active"),$(".slider-image-new").each((function(){$(this).index()==t&&$(this).addClass("active")}));const e=s.DesignStyle.fromNumber(t);$(".calculator-slide.splide__slide .calculator-slide, .calculator-slide .color-var, .wrap-border.calculator-btn").toggle(!1),$(`.calculator-slide.splide__slide .calculator-slide .color-1, .calculator-slide.${e}, .specification-${e}.color-1`).toggle(!0),$(".calculator-slide.splide__slide .calculator-slide").eq(t).toggle(!0),$(".calculator-tab.w--current").removeClass("w--current"),$(".calculator-tab").eq(t).addClass("w--current"),$(".color-tab.active, .slide-nav.active").removeClass("active"),$(".div-block-14 .color-tab").each((function(){0==$(this).index()&&$(this).addClass("active")})),o.refresh()}));const e=new t.default(".slider-wrapper.splide",i);e.mount(),e.on("move",(()=>setTimeout((()=>{$(".splide__list").css("height",$(".splide__slide.is-active .active img").css("height"))}),n>480?550:750))),$(".splide__list").css("height",$(".splide__slide.is-active .active img").css("height")),$(".slick-btn-prev, .slick-btn-next").on("click",(function(){let t=e.index,n="",i="";switch($(".slick-btn-prev, .slick-btn-next").removeClass("disabled"),0==$(this).index()?(e.go("<"),t---1==0&&$(this).addClass("disabled")):(e.go(">"),1+t++==4&&$(this).addClass("disabled")),t){case 0:n="",i="Дивитись спальню";break;case 1:n="Дивитись вітальню",i="Дивитись кухню";break;case 2:n="Дивитись спальню",i="Дивитись душ";break;case 3:n="Дивитись кухню",i="Дивитись ванну";break;case 4:n="Дивитись душ",i="";break;default:return}$(".slick-prev-text").html(n),$(".slick-next-text").html(i)}))}$(".calculator-tab").on("click",(function(){const t=$(this).index(),e=s.DesignStyle.fromNumber(t);$(".calculator-slide.splide__slide .calculator-slide, .calculator-slide .color-var, .wrap-border.calculator-btn").toggle(!1),$(`.calculator-slide.splide__slide .calculator-slide .color-1, .calculator-slide.${e}, .specification-${e}.color-1`).toggle(!0),$(".calculator-slide.splide__slide .calculator-slide").eq(t).toggle(!0),$(".calculator-tab.w--current").removeClass("w--current"),$(`.calculator-tab:eq(${t})`).addClass("w--current"),$(".color-tab.active, .slide-nav.active").removeClass("active"),$(".tab-new").eq(t).trigger("click"),$(".div-block-14 .color-tab").each((function(){0==$(this).index()&&$(this).addClass("active")})),o.refresh()})),$(".increment-field .increment").on("click",(function(){$(this).siblings(".increment-input").length<=0&&$(this).siblings(".increment-input").val(0)})),$("#wf-form-consult").on("submit",(t=>{if($("#agreementCheckbox").is(":checked")?$(".warning.agreementcheckbox").toggle(!1):$(".warning.agreementcheckbox").toggle(!0),$("#phone").val()?$(".warning.inputs.phone").toggle(!1):$(".warning.inputs.phone").toggle(!0),$("#name").val()?$(".warning.inputs.name").toggle(!1):$(".warning.inputs.name").toggle(!0),$(".warning").is(":visible"))return t.preventDefault(),!1;{t.preventDefault();let e=$("#submitBtn").html();$("#submitBtn").html("Зачекайте...");const n=new FormData($("#wf-form-consult").get(0));fetch("https://script.google.com/macros/s/AKfycbxaZQTrmT0wZsVWErYh9k8yxgTqUn1v9NfBTXyZCv01dFmRsp-4/exec",{method:"POST",body:n}).then((()=>{$("#submitBtn").html(e)})).catch((t=>console.error("Error!",t.message))).finally((()=>{window.location.href.includes("/ru")?window.location.assign("/ru/kdyakuiemo"):window.location.assign("/kdyakuiemo")}))}})),$(".choice").on("click",(function(t){if(!$("#appliancesBool").is(":checked"))return t.preventDefault(),$(".choiceActive").toggleClass("choiceActive"),void $(".choiceActiveBorder").toggleClass("choiceActiveBorder");$(this).hasClass("choiceActive")||($(".choiceActive").removeClass("choiceActive"),$(".choiceActiveBorder").removeClass("choiceActiveBorder"),$(this).addClass("choiceActive"),$(this).parent().addClass("choiceActiveBorder"),$("#node").is(":checked")&&$("#appliances").prop("checked","checked"))})),$("#node").on("change",(function(){$("#node").is(":checked")&&$(".choiceActive").length&&($(".choiceActive").toggleClass("choiceActive"),$(".choiceActiveBorder").toggleClass("choiceActiveBorder"))})),$("#appliancesBool").on("change",(function(){$(this).is(":checked")&&!$(".choiceActiveBorder").length&&($(".choice").first().toggleClass("choiceActive"),$(".choice").first().parent().toggleClass("choiceActiveBorder"))})),$(".hover-text").on("click",(function(){let t=$(this);t.siblings(".hover-modal").css("display","flex"),0==parseInt(t.siblings(".hover-modal").css("opacity"))?(function(t){const e=t.getBoundingClientRect();return e.top>=0&&e.left>=0&&e.bottom<=(window.innerHeight||document.documentElement.clientHeight)&&e.right<=(window.innerWidth||document.documentElement.clientWidth)}(t.siblings(".hover-modal").get(0))||$([document.documentElement,document.body]).animate({scrollTop:t.siblings(".hover-modal").offset().top-96},450),t.siblings(".hover-modal").animate({bottom:42,opacity:1},200,"swing")):t.siblings(".hover-modal").animate({bottom:12,opacity:0},200,(function(){t.siblings(".hover-modal").toggle(!1)}))})),$(".submit-container .button").on("click",(function(t){t.preventDefault(),window.open($('.calculator-btn:not([style*="display: none"]) a').data("href"),"_blank")})),$(".closing-btn").on("click",(function(){let t=$(this);t.parent(".hover-modal").animate({bottom:12,opacity:0},200,(function(){t.parent(".hover-modal").toggle(!1)}))})),n<=480&&$(".tab-new").eq(1).trigger("click"),n>=992&&($(".preview-image, .blackbg-text").on({mouseenter:()=>$(".video-cursor").css("opacity",1),mouseleave:()=>$(".video-cursor").css("opacity",0)}),$(".project-link-image").on({mouseenter:()=>$(".project-dot").css("opacity",1),mouseleave:()=>$(".project-dot").css("opacity",0)}),$(".arrow-right").on({mouseenter:()=>$(".small-hover.right").css("opacity",1),mouseleave:()=>$(".small-hover.right").css("opacity",0)}),$(".arrow-left").on({mouseenter:()=>$(".small-hover.left").css("opacity",1),mouseleave:()=>$(".small-hover.left").css("opacity",0)}),$(".color-tab").on("click",(function(){let t=$(this).index(),e=$(".calculator-tab.w--current").index();const n=s.DesignStyle.fromNumber(e);$(this).not(".active")&&($(".color-tab.active").removeClass("active"),$(".div-block-14 .color-tab").each((function(){$(this).index()==t&&$(this).addClass("active")})),$(".color-var, .wrap-border.calculator-btn").toggle(!1),$(`.calculator-slide .color-${t+1}, .wrap-border.calculator-btn.specification-${n}.color-${t+1}`).toggle(!0))})),$(".calculator-slider-option").on("click",(function(){$(".calculator-slider-option.active").removeClass("active"),$(this).addClass("active"),o.go(parseInt($(this).data("slider-index")))})),$(".calculator-arrow").on("click",(function(){$(this).is(".arrow-right")?o.go(">"):o.go("<"),$(".calculator-slider-option.active").removeClass("active"),$(`.calculator-slider-option:eq(${o.index})`).addClass("active")})),$("form input").on("keydown",(t=>{"Enter"==t.key&&t.preventDefault()}))),n<=767&&($(".star").on("mouseleave",(function(){$(this).removeClass("hidden"),$(this).siblings(".image-price").removeClass("active")})),$(".image-price").on("click",(function(){$(this).is(".active")&&($(this).siblings(".star").removeClass("hidden"),$(this).removeClass("active"))})),$(".star").on("click",(function(){$(this).is(".hidden")?($(this).removeClass("hidden"),$(this).siblings(".image-price").removeClass("active")):($(this).addClass("hidden"),$(this).siblings(".image-price").removeClass("active"))})))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LE1BQU1KLEdBQUcsYUFDYmdnQixFQUFFNWYsTUFBTXFnQixTQUFTLFNBQVMvb0IsWUFBWSxVQUN0Q3NvQixFQUFFNWYsTUFBTTFJLFlBQVksVUFFeEIsSUFFQXNvQixFQUFFLFNBQVMva0IsR0FBRyxTQUFTLFdBQ2pCK2tCLEVBQUU1ZixNQUFNSixHQUFHLFlBQ2JnZ0IsRUFBRTVmLE1BQU0xSSxZQUFZLFVBQ3BCc29CLEVBQUU1ZixNQUFNcWdCLFNBQVMsZ0JBQWdCL29CLFlBQVksWUFFN0Nzb0IsRUFBRTVmLE1BQU0vTSxTQUFTLFVBQ2pCMnNCLEVBQUU1ZixNQUFNcWdCLFNBQVMsZ0JBQWdCL29CLFlBQVksVUFFakQsSUE2QkosRyIsInNvdXJjZXMiOlsid2VicGFjazovL2ZvcnRlcy8uL25vZGVfbW9kdWxlcy9Ac3BsaWRlanMvc3BsaWRlL2Rpc3QvanMvc3BsaWRlLmVzbS5qcyIsIndlYnBhY2s6Ly9mb3J0ZXMvLi9zcmMvbW9kZWxzL1N0eWxlLnRzIiwid2VicGFjazovL2ZvcnRlcy8uL3NyYy91dGlscy9Mb2NhbFN0b3JhZ2VIYW5kbGVyLnRzIiwid2VicGFjazovL2ZvcnRlcy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9mb3J0ZXMvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL2ZvcnRlcy93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2ZvcnRlcy93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL2ZvcnRlcy8uL3NyYy9sb2dpY3NfMTkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBTcGxpZGUuanNcbiAqIFZlcnNpb24gIDogMy41LjhcbiAqIExpY2Vuc2UgIDogTUlUXG4gKiBDb3B5cmlnaHQ6IDIwMjEgTmFvdG9zaGkgRnVqaXRhXG4gKi9cbmNvbnN0IFBST0pFQ1RfQ09ERSA9IFwic3BsaWRlXCI7XG5jb25zdCBEQVRBX0FUVFJJQlVURSA9IGBkYXRhLSR7UFJPSkVDVF9DT0RFfWA7XG5cbmNvbnN0IENSRUFURUQgPSAxO1xuY29uc3QgTU9VTlRFRCA9IDI7XG5jb25zdCBJRExFID0gMztcbmNvbnN0IE1PVklORyA9IDQ7XG5jb25zdCBERVNUUk9ZRUQgPSA1O1xuY29uc3QgU1RBVEVTID0ge1xuICBDUkVBVEVELFxuICBNT1VOVEVELFxuICBJRExFLFxuICBNT1ZJTkcsXG4gIERFU1RST1lFRFxufTtcblxuY29uc3QgREVGQVVMVF9FVkVOVF9QUklPUklUWSA9IDEwO1xuY29uc3QgREVGQVVMVF9VU0VSX0VWRU5UX1BSSU9SSVRZID0gMjA7XG5cbmZ1bmN0aW9uIGVtcHR5KGFycmF5KSB7XG4gIGFycmF5Lmxlbmd0aCA9IDA7XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KHN1YmplY3QpIHtcbiAgcmV0dXJuICFpc051bGwoc3ViamVjdCkgJiYgdHlwZW9mIHN1YmplY3QgPT09IFwib2JqZWN0XCI7XG59XG5mdW5jdGlvbiBpc0FycmF5KHN1YmplY3QpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoc3ViamVjdCk7XG59XG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHN1YmplY3QpIHtcbiAgcmV0dXJuIHR5cGVvZiBzdWJqZWN0ID09PSBcImZ1bmN0aW9uXCI7XG59XG5mdW5jdGlvbiBpc1N0cmluZyhzdWJqZWN0KSB7XG4gIHJldHVybiB0eXBlb2Ygc3ViamVjdCA9PT0gXCJzdHJpbmdcIjtcbn1cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKHN1YmplY3QpIHtcbiAgcmV0dXJuIHR5cGVvZiBzdWJqZWN0ID09PSBcInVuZGVmaW5lZFwiO1xufVxuZnVuY3Rpb24gaXNOdWxsKHN1YmplY3QpIHtcbiAgcmV0dXJuIHN1YmplY3QgPT09IG51bGw7XG59XG5mdW5jdGlvbiBpc0hUTUxFbGVtZW50KHN1YmplY3QpIHtcbiAgcmV0dXJuIHN1YmplY3QgaW5zdGFuY2VvZiBIVE1MRWxlbWVudDtcbn1cblxuZnVuY3Rpb24gdG9BcnJheSh2YWx1ZSkge1xuICByZXR1cm4gaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFt2YWx1ZV07XG59XG5cbmZ1bmN0aW9uIGZvckVhY2godmFsdWVzLCBpdGVyYXRlZSkge1xuICB0b0FycmF5KHZhbHVlcykuZm9yRWFjaChpdGVyYXRlZSk7XG59XG5cbmZ1bmN0aW9uIGluY2x1ZGVzKGFycmF5LCB2YWx1ZSkge1xuICByZXR1cm4gYXJyYXkuaW5kZXhPZih2YWx1ZSkgPiAtMTtcbn1cblxuZnVuY3Rpb24gcHVzaChhcnJheSwgaXRlbXMpIHtcbiAgYXJyYXkucHVzaCguLi50b0FycmF5KGl0ZW1zKSk7XG4gIHJldHVybiBhcnJheTtcbn1cblxuY29uc3QgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxuZnVuY3Rpb24gc2xpY2UoYXJyYXlMaWtlLCBzdGFydCwgZW5kKSB7XG4gIHJldHVybiBhcnJheVByb3RvLnNsaWNlLmNhbGwoYXJyYXlMaWtlLCBzdGFydCwgZW5kKTtcbn1cblxuZnVuY3Rpb24gZmluZChhcnJheUxpa2UsIHByZWRpY2F0ZSkge1xuICByZXR1cm4gc2xpY2UoYXJyYXlMaWtlKS5maWx0ZXIocHJlZGljYXRlKVswXTtcbn1cblxuZnVuY3Rpb24gdG9nZ2xlQ2xhc3MoZWxtLCBjbGFzc2VzLCBhZGQpIHtcbiAgaWYgKGVsbSkge1xuICAgIGZvckVhY2goY2xhc3NlcywgKG5hbWUpID0+IHtcbiAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgIGVsbS5jbGFzc0xpc3RbYWRkID8gXCJhZGRcIiA6IFwicmVtb3ZlXCJdKG5hbWUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFkZENsYXNzKGVsbSwgY2xhc3Nlcykge1xuICB0b2dnbGVDbGFzcyhlbG0sIGlzU3RyaW5nKGNsYXNzZXMpID8gY2xhc3Nlcy5zcGxpdChcIiBcIikgOiBjbGFzc2VzLCB0cnVlKTtcbn1cblxuZnVuY3Rpb24gYXBwZW5kKHBhcmVudCwgY2hpbGRyZW4pIHtcbiAgZm9yRWFjaChjaGlsZHJlbiwgcGFyZW50LmFwcGVuZENoaWxkLmJpbmQocGFyZW50KSk7XG59XG5cbmZ1bmN0aW9uIGJlZm9yZShub2RlcywgcmVmKSB7XG4gIGZvckVhY2gobm9kZXMsIChub2RlKSA9PiB7XG4gICAgY29uc3QgcGFyZW50ID0gcmVmLnBhcmVudE5vZGU7XG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShub2RlLCByZWYpO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXMoZWxtLCBzZWxlY3Rvcikge1xuICByZXR1cm4gaXNIVE1MRWxlbWVudChlbG0pICYmIChlbG1bXCJtc01hdGNoZXNTZWxlY3RvclwiXSB8fCBlbG0ubWF0Y2hlcykuY2FsbChlbG0sIHNlbGVjdG9yKTtcbn1cblxuZnVuY3Rpb24gY2hpbGRyZW4ocGFyZW50LCBzZWxlY3Rvcikge1xuICByZXR1cm4gcGFyZW50ID8gc2xpY2UocGFyZW50LmNoaWxkcmVuKS5maWx0ZXIoKGNoaWxkKSA9PiBtYXRjaGVzKGNoaWxkLCBzZWxlY3RvcikpIDogW107XG59XG5cbmZ1bmN0aW9uIGNoaWxkKHBhcmVudCwgc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHNlbGVjdG9yID8gY2hpbGRyZW4ocGFyZW50LCBzZWxlY3RvcilbMF0gOiBwYXJlbnQuZmlyc3RFbGVtZW50Q2hpbGQ7XG59XG5cbmZ1bmN0aW9uIGZvck93bihvYmplY3QsIGl0ZXJhdGVlLCByaWdodCkge1xuICBpZiAob2JqZWN0KSB7XG4gICAgbGV0IGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuICAgIGtleXMgPSByaWdodCA/IGtleXMucmV2ZXJzZSgpIDoga2V5cztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGtleSA9IGtleXNbaV07XG4gICAgICBpZiAoa2V5ICE9PSBcIl9fcHJvdG9fX1wiKSB7XG4gICAgICAgIGlmIChpdGVyYXRlZShvYmplY3Rba2V5XSwga2V5KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gb2JqZWN0O1xufVxuXG5mdW5jdGlvbiBhc3NpZ24ob2JqZWN0KSB7XG4gIHNsaWNlKGFyZ3VtZW50cywgMSkuZm9yRWFjaCgoc291cmNlKSA9PiB7XG4gICAgZm9yT3duKHNvdXJjZSwgKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgIG9iamVjdFtrZXldID0gc291cmNlW2tleV07XG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gb2JqZWN0O1xufVxuXG5mdW5jdGlvbiBtZXJnZShvYmplY3QsIHNvdXJjZSkge1xuICBmb3JPd24oc291cmNlLCAodmFsdWUsIGtleSkgPT4ge1xuICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgb2JqZWN0W2tleV0gPSB2YWx1ZS5zbGljZSgpO1xuICAgIH0gZWxzZSBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICBvYmplY3Rba2V5XSA9IG1lcmdlKGlzT2JqZWN0KG9iamVjdFtrZXldKSA/IG9iamVjdFtrZXldIDoge30sIHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gb2JqZWN0O1xufVxuXG5mdW5jdGlvbiByZW1vdmVBdHRyaWJ1dGUoZWxtLCBhdHRycykge1xuICBpZiAoZWxtKSB7XG4gICAgZm9yRWFjaChhdHRycywgKGF0dHIpID0+IHtcbiAgICAgIGVsbS5yZW1vdmVBdHRyaWJ1dGUoYXR0cik7XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2V0QXR0cmlidXRlKGVsbSwgYXR0cnMsIHZhbHVlKSB7XG4gIGlmIChpc09iamVjdChhdHRycykpIHtcbiAgICBmb3JPd24oYXR0cnMsICh2YWx1ZTIsIG5hbWUpID0+IHtcbiAgICAgIHNldEF0dHJpYnV0ZShlbG0sIG5hbWUsIHZhbHVlMik7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgaXNOdWxsKHZhbHVlKSA/IHJlbW92ZUF0dHJpYnV0ZShlbG0sIGF0dHJzKSA6IGVsbS5zZXRBdHRyaWJ1dGUoYXR0cnMsIFN0cmluZyh2YWx1ZSkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZSh0YWcsIGF0dHJzLCBwYXJlbnQpIHtcbiAgY29uc3QgZWxtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWcpO1xuICBpZiAoYXR0cnMpIHtcbiAgICBpc1N0cmluZyhhdHRycykgPyBhZGRDbGFzcyhlbG0sIGF0dHJzKSA6IHNldEF0dHJpYnV0ZShlbG0sIGF0dHJzKTtcbiAgfVxuICBwYXJlbnQgJiYgYXBwZW5kKHBhcmVudCwgZWxtKTtcbiAgcmV0dXJuIGVsbTtcbn1cblxuZnVuY3Rpb24gc3R5bGUoZWxtLCBwcm9wLCB2YWx1ZSkge1xuICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKSB7XG4gICAgcmV0dXJuIGdldENvbXB1dGVkU3R5bGUoZWxtKVtwcm9wXTtcbiAgfVxuICBpZiAoIWlzTnVsbCh2YWx1ZSkpIHtcbiAgICBjb25zdCB7IHN0eWxlOiBzdHlsZTIgfSA9IGVsbTtcbiAgICB2YWx1ZSA9IGAke3ZhbHVlfWA7XG4gICAgaWYgKHN0eWxlMltwcm9wXSAhPT0gdmFsdWUpIHtcbiAgICAgIHN0eWxlMltwcm9wXSA9IHZhbHVlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBkaXNwbGF5KGVsbSwgZGlzcGxheTIpIHtcbiAgc3R5bGUoZWxtLCBcImRpc3BsYXlcIiwgZGlzcGxheTIpO1xufVxuXG5mdW5jdGlvbiBmb2N1cyhlbG0pIHtcbiAgZWxtW1wic2V0QWN0aXZlXCJdICYmIGVsbVtcInNldEFjdGl2ZVwiXSgpIHx8IGVsbS5mb2N1cyh7IHByZXZlbnRTY3JvbGw6IHRydWUgfSk7XG59XG5cbmZ1bmN0aW9uIGdldEF0dHJpYnV0ZShlbG0sIGF0dHIpIHtcbiAgcmV0dXJuIGVsbS5nZXRBdHRyaWJ1dGUoYXR0cik7XG59XG5cbmZ1bmN0aW9uIGhhc0NsYXNzKGVsbSwgY2xhc3NOYW1lKSB7XG4gIHJldHVybiBlbG0gJiYgZWxtLmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpO1xufVxuXG5mdW5jdGlvbiByZWN0KHRhcmdldCkge1xuICByZXR1cm4gdGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xufVxuXG5mdW5jdGlvbiByZW1vdmUobm9kZXMpIHtcbiAgZm9yRWFjaChub2RlcywgKG5vZGUpID0+IHtcbiAgICBpZiAobm9kZSAmJiBub2RlLnBhcmVudE5vZGUpIHtcbiAgICAgIG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBtZWFzdXJlKHBhcmVudCwgdmFsdWUpIHtcbiAgaWYgKGlzU3RyaW5nKHZhbHVlKSkge1xuICAgIGNvbnN0IGRpdiA9IGNyZWF0ZShcImRpdlwiLCB7IHN0eWxlOiBgd2lkdGg6ICR7dmFsdWV9OyBwb3NpdGlvbjogYWJzb2x1dGU7YCB9LCBwYXJlbnQpO1xuICAgIHZhbHVlID0gcmVjdChkaXYpLndpZHRoO1xuICAgIHJlbW92ZShkaXYpO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gcGFyc2VIdG1sKGh0bWwpIHtcbiAgcmV0dXJuIGNoaWxkKG5ldyBET01QYXJzZXIoKS5wYXJzZUZyb21TdHJpbmcoaHRtbCwgXCJ0ZXh0L2h0bWxcIikuYm9keSk7XG59XG5cbmZ1bmN0aW9uIHByZXZlbnQoZSwgc3RvcFByb3BhZ2F0aW9uKSB7XG4gIGUucHJldmVudERlZmF1bHQoKTtcbiAgaWYgKHN0b3BQcm9wYWdhdGlvbikge1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBxdWVyeShwYXJlbnQsIHNlbGVjdG9yKSB7XG4gIHJldHVybiBwYXJlbnQgJiYgcGFyZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xufVxuXG5mdW5jdGlvbiBxdWVyeUFsbChwYXJlbnQsIHNlbGVjdG9yKSB7XG4gIHJldHVybiBzbGljZShwYXJlbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVDbGFzcyhlbG0sIGNsYXNzZXMpIHtcbiAgdG9nZ2xlQ2xhc3MoZWxtLCBjbGFzc2VzLCBmYWxzZSk7XG59XG5cbmZ1bmN0aW9uIHVuaXQodmFsdWUpIHtcbiAgcmV0dXJuIGlzU3RyaW5nKHZhbHVlKSA/IHZhbHVlIDogdmFsdWUgPyBgJHt2YWx1ZX1weGAgOiBcIlwiO1xufVxuXG5mdW5jdGlvbiBhc3NlcnQoY29uZGl0aW9uLCBtZXNzYWdlID0gXCJcIikge1xuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihgWyR7UFJPSkVDVF9DT0RFfV0gJHttZXNzYWdlfWApO1xuICB9XG59XG5cbmZ1bmN0aW9uIG5leHRUaWNrKGNhbGxiYWNrKSB7XG4gIHNldFRpbWVvdXQoY2FsbGJhY2spO1xufVxuXG5jb25zdCBub29wID0gKCkgPT4ge1xufTtcblxuZnVuY3Rpb24gcmFmKGZ1bmMpIHtcbiAgcmV0dXJuIHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jKTtcbn1cblxuY29uc3QgeyBtaW4sIG1heCwgZmxvb3IsIGNlaWwsIGFicyB9ID0gTWF0aDtcblxuZnVuY3Rpb24gYXBwcm94aW1hdGVseUVxdWFsKHgsIHksIGVwc2lsb24pIHtcbiAgcmV0dXJuIGFicyh4IC0geSkgPCBlcHNpbG9uO1xufVxuXG5mdW5jdGlvbiBiZXR3ZWVuKG51bWJlciwgbWluT3JNYXgsIG1heE9yTWluLCBleGNsdXNpdmUpIHtcbiAgY29uc3QgbWluaW11bSA9IG1pbihtaW5Pck1heCwgbWF4T3JNaW4pO1xuICBjb25zdCBtYXhpbXVtID0gbWF4KG1pbk9yTWF4LCBtYXhPck1pbik7XG4gIHJldHVybiBleGNsdXNpdmUgPyBtaW5pbXVtIDwgbnVtYmVyICYmIG51bWJlciA8IG1heGltdW0gOiBtaW5pbXVtIDw9IG51bWJlciAmJiBudW1iZXIgPD0gbWF4aW11bTtcbn1cblxuZnVuY3Rpb24gY2xhbXAobnVtYmVyLCB4LCB5KSB7XG4gIGNvbnN0IG1pbmltdW0gPSBtaW4oeCwgeSk7XG4gIGNvbnN0IG1heGltdW0gPSBtYXgoeCwgeSk7XG4gIHJldHVybiBtaW4obWF4KG1pbmltdW0sIG51bWJlciksIG1heGltdW0pO1xufVxuXG5mdW5jdGlvbiBzaWduKHgpIHtcbiAgcmV0dXJuICsoeCA+IDApIC0gKyh4IDwgMCk7XG59XG5cbmZ1bmN0aW9uIGNhbWVsVG9LZWJhYihzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC8oW2EtejAtOV0pKFtBLVpdKS9nLCBcIiQxLSQyXCIpLnRvTG93ZXJDYXNlKCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdChzdHJpbmcsIHJlcGxhY2VtZW50cykge1xuICBmb3JFYWNoKHJlcGxhY2VtZW50cywgKHJlcGxhY2VtZW50KSA9PiB7XG4gICAgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UoXCIlc1wiLCBgJHtyZXBsYWNlbWVudH1gKTtcbiAgfSk7XG4gIHJldHVybiBzdHJpbmc7XG59XG5cbmZ1bmN0aW9uIHBhZChudW1iZXIpIHtcbiAgcmV0dXJuIG51bWJlciA8IDEwID8gYDAke251bWJlcn1gIDogYCR7bnVtYmVyfWA7XG59XG5cbmNvbnN0IGlkcyA9IHt9O1xuZnVuY3Rpb24gdW5pcXVlSWQocHJlZml4KSB7XG4gIHJldHVybiBgJHtwcmVmaXh9JHtwYWQoaWRzW3ByZWZpeF0gPSAoaWRzW3ByZWZpeF0gfHwgMCkgKyAxKX1gO1xufVxuXG5mdW5jdGlvbiBFdmVudEJ1cygpIHtcbiAgbGV0IGhhbmRsZXJzID0ge307XG4gIGZ1bmN0aW9uIG9uKGV2ZW50cywgY2FsbGJhY2ssIGtleSwgcHJpb3JpdHkgPSBERUZBVUxUX0VWRU5UX1BSSU9SSVRZKSB7XG4gICAgZm9yRWFjaEV2ZW50KGV2ZW50cywgKGV2ZW50LCBuYW1lc3BhY2UpID0+IHtcbiAgICAgIGhhbmRsZXJzW2V2ZW50XSA9IGhhbmRsZXJzW2V2ZW50XSB8fCBbXTtcbiAgICAgIHB1c2goaGFuZGxlcnNbZXZlbnRdLCB7XG4gICAgICAgIF9ldmVudDogZXZlbnQsXG4gICAgICAgIF9jYWxsYmFjazogY2FsbGJhY2ssXG4gICAgICAgIF9uYW1lc3BhY2U6IG5hbWVzcGFjZSxcbiAgICAgICAgX3ByaW9yaXR5OiBwcmlvcml0eSxcbiAgICAgICAgX2tleToga2V5XG4gICAgICB9KS5zb3J0KChoYW5kbGVyMSwgaGFuZGxlcjIpID0+IGhhbmRsZXIxLl9wcmlvcml0eSAtIGhhbmRsZXIyLl9wcmlvcml0eSk7XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gb2ZmKGV2ZW50cywga2V5KSB7XG4gICAgZm9yRWFjaEV2ZW50KGV2ZW50cywgKGV2ZW50LCBuYW1lc3BhY2UpID0+IHtcbiAgICAgIGNvbnN0IGV2ZW50SGFuZGxlcnMgPSBoYW5kbGVyc1tldmVudF07XG4gICAgICBoYW5kbGVyc1tldmVudF0gPSBldmVudEhhbmRsZXJzICYmIGV2ZW50SGFuZGxlcnMuZmlsdGVyKChoYW5kbGVyKSA9PiB7XG4gICAgICAgIHJldHVybiBoYW5kbGVyLl9rZXkgPyBoYW5kbGVyLl9rZXkgIT09IGtleSA6IGtleSB8fCBoYW5kbGVyLl9uYW1lc3BhY2UgIT09IG5hbWVzcGFjZTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIG9mZkJ5KGtleSkge1xuICAgIGZvck93bihoYW5kbGVycywgKGV2ZW50SGFuZGxlcnMsIGV2ZW50KSA9PiB7XG4gICAgICBvZmYoZXZlbnQsIGtleSk7XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gZW1pdChldmVudCkge1xuICAgIChoYW5kbGVyc1tldmVudF0gfHwgW10pLmZvckVhY2goKGhhbmRsZXIpID0+IHtcbiAgICAgIGhhbmRsZXIuX2NhbGxiYWNrLmFwcGx5KGhhbmRsZXIsIHNsaWNlKGFyZ3VtZW50cywgMSkpO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgaGFuZGxlcnMgPSB7fTtcbiAgfVxuICBmdW5jdGlvbiBmb3JFYWNoRXZlbnQoZXZlbnRzLCBpdGVyYXRlZSkge1xuICAgIHRvQXJyYXkoZXZlbnRzKS5qb2luKFwiIFwiKS5zcGxpdChcIiBcIikuZm9yRWFjaCgoZXZlbnROUykgPT4ge1xuICAgICAgY29uc3QgZnJhZ21lbnRzID0gZXZlbnROUy5zcGxpdChcIi5cIik7XG4gICAgICBpdGVyYXRlZShmcmFnbWVudHNbMF0sIGZyYWdtZW50c1sxXSk7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBvbixcbiAgICBvZmYsXG4gICAgb2ZmQnksXG4gICAgZW1pdCxcbiAgICBkZXN0cm95XG4gIH07XG59XG5cbmNvbnN0IEVWRU5UX01PVU5URUQgPSBcIm1vdW50ZWRcIjtcbmNvbnN0IEVWRU5UX1JFQURZID0gXCJyZWFkeVwiO1xuY29uc3QgRVZFTlRfTU9WRSA9IFwibW92ZVwiO1xuY29uc3QgRVZFTlRfTU9WRUQgPSBcIm1vdmVkXCI7XG5jb25zdCBFVkVOVF9TSElGVEVEID0gXCJzaGlmdGVkXCI7XG5jb25zdCBFVkVOVF9DTElDSyA9IFwiY2xpY2tcIjtcbmNvbnN0IEVWRU5UX0FDVElWRSA9IFwiYWN0aXZlXCI7XG5jb25zdCBFVkVOVF9JTkFDVElWRSA9IFwiaW5hY3RpdmVcIjtcbmNvbnN0IEVWRU5UX1ZJU0lCTEUgPSBcInZpc2libGVcIjtcbmNvbnN0IEVWRU5UX0hJRERFTiA9IFwiaGlkZGVuXCI7XG5jb25zdCBFVkVOVF9TTElERV9LRVlET1dOID0gXCJzbGlkZTprZXlkb3duXCI7XG5jb25zdCBFVkVOVF9SRUZSRVNIID0gXCJyZWZyZXNoXCI7XG5jb25zdCBFVkVOVF9VUERBVEVEID0gXCJ1cGRhdGVkXCI7XG5jb25zdCBFVkVOVF9SRVNJWkUgPSBcInJlc2l6ZVwiO1xuY29uc3QgRVZFTlRfUkVTSVpFRCA9IFwicmVzaXplZFwiO1xuY29uc3QgRVZFTlRfUkVQT1NJVElPTkVEID0gXCJyZXBvc2l0aW9uZWRcIjtcbmNvbnN0IEVWRU5UX0RSQUcgPSBcImRyYWdcIjtcbmNvbnN0IEVWRU5UX0RSQUdHSU5HID0gXCJkcmFnZ2luZ1wiO1xuY29uc3QgRVZFTlRfRFJBR0dFRCA9IFwiZHJhZ2dlZFwiO1xuY29uc3QgRVZFTlRfU0NST0xMID0gXCJzY3JvbGxcIjtcbmNvbnN0IEVWRU5UX1NDUk9MTEVEID0gXCJzY3JvbGxlZFwiO1xuY29uc3QgRVZFTlRfREVTVFJPWSA9IFwiZGVzdHJveVwiO1xuY29uc3QgRVZFTlRfQVJST1dTX01PVU5URUQgPSBcImFycm93czptb3VudGVkXCI7XG5jb25zdCBFVkVOVF9BUlJPV1NfVVBEQVRFRCA9IFwiYXJyb3dzOnVwZGF0ZWRcIjtcbmNvbnN0IEVWRU5UX1BBR0lOQVRJT05fTU9VTlRFRCA9IFwicGFnaW5hdGlvbjptb3VudGVkXCI7XG5jb25zdCBFVkVOVF9QQUdJTkFUSU9OX1VQREFURUQgPSBcInBhZ2luYXRpb246dXBkYXRlZFwiO1xuY29uc3QgRVZFTlRfTkFWSUdBVElPTl9NT1VOVEVEID0gXCJuYXZpZ2F0aW9uOm1vdW50ZWRcIjtcbmNvbnN0IEVWRU5UX0FVVE9QTEFZX1BMQVkgPSBcImF1dG9wbGF5OnBsYXlcIjtcbmNvbnN0IEVWRU5UX0FVVE9QTEFZX1BMQVlJTkcgPSBcImF1dG9wbGF5OnBsYXlpbmdcIjtcbmNvbnN0IEVWRU5UX0FVVE9QTEFZX1BBVVNFID0gXCJhdXRvcGxheTpwYXVzZVwiO1xuY29uc3QgRVZFTlRfTEFaWUxPQURfTE9BREVEID0gXCJsYXp5bG9hZDpsb2FkZWRcIjtcblxuZnVuY3Rpb24gRXZlbnRJbnRlcmZhY2UoU3BsaWRlMikge1xuICBjb25zdCB7IGV2ZW50IH0gPSBTcGxpZGUyO1xuICBjb25zdCBrZXkgPSB7fTtcbiAgbGV0IGxpc3RlbmVycyA9IFtdO1xuICBmdW5jdGlvbiBvbihldmVudHMsIGNhbGxiYWNrLCBwcmlvcml0eSkge1xuICAgIGV2ZW50Lm9uKGV2ZW50cywgY2FsbGJhY2ssIGtleSwgcHJpb3JpdHkpO1xuICB9XG4gIGZ1bmN0aW9uIG9mZihldmVudHMpIHtcbiAgICBldmVudC5vZmYoZXZlbnRzLCBrZXkpO1xuICB9XG4gIGZ1bmN0aW9uIGJpbmQodGFyZ2V0cywgZXZlbnRzLCBjYWxsYmFjaywgb3B0aW9ucykge1xuICAgIGZvckVhY2hFdmVudCh0YXJnZXRzLCBldmVudHMsICh0YXJnZXQsIGV2ZW50MikgPT4ge1xuICAgICAgbGlzdGVuZXJzLnB1c2goW3RhcmdldCwgZXZlbnQyLCBjYWxsYmFjaywgb3B0aW9uc10pO1xuICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQyLCBjYWxsYmFjaywgb3B0aW9ucyk7XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gdW5iaW5kKHRhcmdldHMsIGV2ZW50cywgY2FsbGJhY2spIHtcbiAgICBmb3JFYWNoRXZlbnQodGFyZ2V0cywgZXZlbnRzLCAodGFyZ2V0LCBldmVudDIpID0+IHtcbiAgICAgIGxpc3RlbmVycyA9IGxpc3RlbmVycy5maWx0ZXIoKGxpc3RlbmVyKSA9PiB7XG4gICAgICAgIGlmIChsaXN0ZW5lclswXSA9PT0gdGFyZ2V0ICYmIGxpc3RlbmVyWzFdID09PSBldmVudDIgJiYgKCFjYWxsYmFjayB8fCBsaXN0ZW5lclsyXSA9PT0gY2FsbGJhY2spKSB7XG4gICAgICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQyLCBsaXN0ZW5lclsyXSwgbGlzdGVuZXJbM10pO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGZvckVhY2hFdmVudCh0YXJnZXRzLCBldmVudHMsIGl0ZXJhdGVlKSB7XG4gICAgZm9yRWFjaCh0YXJnZXRzLCAodGFyZ2V0KSA9PiB7XG4gICAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAgIGV2ZW50cy5zcGxpdChcIiBcIikuZm9yRWFjaChpdGVyYXRlZS5iaW5kKG51bGwsIHRhcmdldCkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgbGlzdGVuZXJzID0gbGlzdGVuZXJzLmZpbHRlcigoZGF0YSkgPT4gdW5iaW5kKGRhdGFbMF0sIGRhdGFbMV0pKTtcbiAgICBldmVudC5vZmZCeShrZXkpO1xuICB9XG4gIGV2ZW50Lm9uKEVWRU5UX0RFU1RST1ksIGRlc3Ryb3ksIGtleSk7XG4gIHJldHVybiB7XG4gICAgb24sXG4gICAgb2ZmLFxuICAgIGVtaXQ6IGV2ZW50LmVtaXQsXG4gICAgYmluZCxcbiAgICB1bmJpbmQsXG4gICAgZGVzdHJveVxuICB9O1xufVxuXG5mdW5jdGlvbiBSZXF1ZXN0SW50ZXJ2YWwoaW50ZXJ2YWwsIG9uSW50ZXJ2YWwsIG9uVXBkYXRlLCBsaW1pdCkge1xuICBjb25zdCB7IG5vdyB9ID0gRGF0ZTtcbiAgbGV0IHN0YXJ0VGltZTtcbiAgbGV0IHJhdGUgPSAwO1xuICBsZXQgaWQ7XG4gIGxldCBwYXVzZWQgPSB0cnVlO1xuICBsZXQgY291bnQgPSAwO1xuICBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgaWYgKCFwYXVzZWQpIHtcbiAgICAgIGNvbnN0IGVsYXBzZWQgPSBub3coKSAtIHN0YXJ0VGltZTtcbiAgICAgIGlmIChlbGFwc2VkID49IGludGVydmFsKSB7XG4gICAgICAgIHJhdGUgPSAxO1xuICAgICAgICBzdGFydFRpbWUgPSBub3coKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJhdGUgPSBlbGFwc2VkIC8gaW50ZXJ2YWw7XG4gICAgICB9XG4gICAgICBpZiAob25VcGRhdGUpIHtcbiAgICAgICAgb25VcGRhdGUocmF0ZSk7XG4gICAgICB9XG4gICAgICBpZiAocmF0ZSA9PT0gMSkge1xuICAgICAgICBvbkludGVydmFsKCk7XG4gICAgICAgIGlmIChsaW1pdCAmJiArK2NvdW50ID49IGxpbWl0KSB7XG4gICAgICAgICAgcmV0dXJuIHBhdXNlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJhZih1cGRhdGUpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBzdGFydChyZXN1bWUpIHtcbiAgICAhcmVzdW1lICYmIGNhbmNlbCgpO1xuICAgIHN0YXJ0VGltZSA9IG5vdygpIC0gKHJlc3VtZSA/IHJhdGUgKiBpbnRlcnZhbCA6IDApO1xuICAgIHBhdXNlZCA9IGZhbHNlO1xuICAgIHJhZih1cGRhdGUpO1xuICB9XG4gIGZ1bmN0aW9uIHBhdXNlKCkge1xuICAgIHBhdXNlZCA9IHRydWU7XG4gIH1cbiAgZnVuY3Rpb24gcmV3aW5kKCkge1xuICAgIHN0YXJ0VGltZSA9IG5vdygpO1xuICAgIHJhdGUgPSAwO1xuICAgIGlmIChvblVwZGF0ZSkge1xuICAgICAgb25VcGRhdGUocmF0ZSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICBjYW5jZWxBbmltYXRpb25GcmFtZShpZCk7XG4gICAgcmF0ZSA9IDA7XG4gICAgaWQgPSAwO1xuICAgIHBhdXNlZCA9IHRydWU7XG4gIH1cbiAgZnVuY3Rpb24gc2V0KHRpbWUpIHtcbiAgICBpbnRlcnZhbCA9IHRpbWU7XG4gIH1cbiAgZnVuY3Rpb24gaXNQYXVzZWQoKSB7XG4gICAgcmV0dXJuIHBhdXNlZDtcbiAgfVxuICByZXR1cm4ge1xuICAgIHN0YXJ0LFxuICAgIHJld2luZCxcbiAgICBwYXVzZSxcbiAgICBjYW5jZWwsXG4gICAgc2V0LFxuICAgIGlzUGF1c2VkXG4gIH07XG59XG5cbmZ1bmN0aW9uIFN0YXRlKGluaXRpYWxTdGF0ZSkge1xuICBsZXQgc3RhdGUgPSBpbml0aWFsU3RhdGU7XG4gIGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgIHN0YXRlID0gdmFsdWU7XG4gIH1cbiAgZnVuY3Rpb24gaXMoc3RhdGVzKSB7XG4gICAgcmV0dXJuIGluY2x1ZGVzKHRvQXJyYXkoc3RhdGVzKSwgc3RhdGUpO1xuICB9XG4gIHJldHVybiB7IHNldCwgaXMgfTtcbn1cblxuZnVuY3Rpb24gVGhyb3R0bGUoZnVuYywgZHVyYXRpb24pIHtcbiAgbGV0IGludGVydmFsO1xuICBmdW5jdGlvbiB0aHJvdHRsZWQoKSB7XG4gICAgaWYgKCFpbnRlcnZhbCkge1xuICAgICAgaW50ZXJ2YWwgPSBSZXF1ZXN0SW50ZXJ2YWwoZHVyYXRpb24gfHwgMCwgKCkgPT4ge1xuICAgICAgICBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIGludGVydmFsID0gbnVsbDtcbiAgICAgIH0sIG51bGwsIDEpO1xuICAgICAgaW50ZXJ2YWwuc3RhcnQoKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRocm90dGxlZDtcbn1cblxuZnVuY3Rpb24gT3B0aW9ucyhTcGxpZGUyLCBDb21wb25lbnRzMiwgb3B0aW9ucykge1xuICBjb25zdCB0aHJvdHRsZWRPYnNlcnZlID0gVGhyb3R0bGUob2JzZXJ2ZSk7XG4gIGxldCBpbml0aWFsT3B0aW9ucztcbiAgbGV0IHBvaW50cztcbiAgbGV0IGN1cnJQb2ludDtcbiAgZnVuY3Rpb24gc2V0dXAoKSB7XG4gICAgdHJ5IHtcbiAgICAgIG1lcmdlKG9wdGlvbnMsIEpTT04ucGFyc2UoZ2V0QXR0cmlidXRlKFNwbGlkZTIucm9vdCwgREFUQV9BVFRSSUJVVEUpKSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgYXNzZXJ0KGZhbHNlLCBlLm1lc3NhZ2UpO1xuICAgIH1cbiAgICBpbml0aWFsT3B0aW9ucyA9IG1lcmdlKHt9LCBvcHRpb25zKTtcbiAgICBjb25zdCB7IGJyZWFrcG9pbnRzIH0gPSBvcHRpb25zO1xuICAgIGlmIChicmVha3BvaW50cykge1xuICAgICAgY29uc3QgaXNNaW4gPSBvcHRpb25zLm1lZGlhUXVlcnkgPT09IFwibWluXCI7XG4gICAgICBwb2ludHMgPSBPYmplY3Qua2V5cyhicmVha3BvaW50cykuc29ydCgobiwgbSkgPT4gaXNNaW4gPyArbSAtICtuIDogK24gLSArbSkubWFwKChwb2ludCkgPT4gW1xuICAgICAgICBwb2ludCxcbiAgICAgICAgbWF0Y2hNZWRpYShgKCR7aXNNaW4gPyBcIm1pblwiIDogXCJtYXhcIn0td2lkdGg6JHtwb2ludH1weClgKVxuICAgICAgXSk7XG4gICAgICBvYnNlcnZlKCk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIG1vdW50KCkge1xuICAgIGlmIChwb2ludHMpIHtcbiAgICAgIGFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgdGhyb3R0bGVkT2JzZXJ2ZSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGRlc3Ryb3koY29tcGxldGVseSkge1xuICAgIGlmIChjb21wbGV0ZWx5KSB7XG4gICAgICByZW1vdmVFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIHRocm90dGxlZE9ic2VydmUpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBvYnNlcnZlKCkge1xuICAgIGNvbnN0IGl0ZW0gPSBmaW5kKHBvaW50cywgKGl0ZW0yKSA9PiBpdGVtMlsxXS5tYXRjaGVzKSB8fCBbXTtcbiAgICBpZiAoaXRlbVswXSAhPT0gY3VyclBvaW50KSB7XG4gICAgICBvbk1hdGNoKGN1cnJQb2ludCA9IGl0ZW1bMF0pO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBvbk1hdGNoKHBvaW50KSB7XG4gICAgY29uc3QgbmV3T3B0aW9ucyA9IG9wdGlvbnMuYnJlYWtwb2ludHNbcG9pbnRdIHx8IGluaXRpYWxPcHRpb25zO1xuICAgIGlmIChuZXdPcHRpb25zLmRlc3Ryb3kpIHtcbiAgICAgIFNwbGlkZTIub3B0aW9ucyA9IGluaXRpYWxPcHRpb25zO1xuICAgICAgU3BsaWRlMi5kZXN0cm95KG5ld09wdGlvbnMuZGVzdHJveSA9PT0gXCJjb21wbGV0ZWx5XCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoU3BsaWRlMi5zdGF0ZS5pcyhERVNUUk9ZRUQpKSB7XG4gICAgICAgIGRlc3Ryb3kodHJ1ZSk7XG4gICAgICAgIFNwbGlkZTIubW91bnQoKTtcbiAgICAgIH1cbiAgICAgIFNwbGlkZTIub3B0aW9ucyA9IG5ld09wdGlvbnM7XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgc2V0dXAsXG4gICAgbW91bnQsXG4gICAgZGVzdHJveVxuICB9O1xufVxuXG5jb25zdCBSVEwgPSBcInJ0bFwiO1xuY29uc3QgVFRCID0gXCJ0dGJcIjtcblxuY29uc3QgT1JJRU5UQVRJT05fTUFQID0ge1xuICBtYXJnaW5SaWdodDogW1wibWFyZ2luQm90dG9tXCIsIFwibWFyZ2luTGVmdFwiXSxcbiAgYXV0b1dpZHRoOiBbXCJhdXRvSGVpZ2h0XCJdLFxuICBmaXhlZFdpZHRoOiBbXCJmaXhlZEhlaWdodFwiXSxcbiAgcGFkZGluZ0xlZnQ6IFtcInBhZGRpbmdUb3BcIiwgXCJwYWRkaW5nUmlnaHRcIl0sXG4gIHBhZGRpbmdSaWdodDogW1wicGFkZGluZ0JvdHRvbVwiLCBcInBhZGRpbmdMZWZ0XCJdLFxuICB3aWR0aDogW1wiaGVpZ2h0XCJdLFxuICBsZWZ0OiBbXCJ0b3BcIiwgXCJyaWdodFwiXSxcbiAgcmlnaHQ6IFtcImJvdHRvbVwiLCBcImxlZnRcIl0sXG4gIHg6IFtcInlcIl0sXG4gIFg6IFtcIllcIl0sXG4gIFk6IFtcIlhcIl0sXG4gIEFycm93TGVmdDogW1wiQXJyb3dVcFwiLCBcIkFycm93UmlnaHRcIl0sXG4gIEFycm93UmlnaHQ6IFtcIkFycm93RG93blwiLCBcIkFycm93TGVmdFwiXVxufTtcbmZ1bmN0aW9uIERpcmVjdGlvbihTcGxpZGUyLCBDb21wb25lbnRzMiwgb3B0aW9ucykge1xuICBmdW5jdGlvbiByZXNvbHZlKHByb3AsIGF4aXNPbmx5KSB7XG4gICAgY29uc3QgeyBkaXJlY3Rpb24gfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgaW5kZXggPSBkaXJlY3Rpb24gPT09IFJUTCAmJiAhYXhpc09ubHkgPyAxIDogZGlyZWN0aW9uID09PSBUVEIgPyAwIDogLTE7XG4gICAgcmV0dXJuIE9SSUVOVEFUSU9OX01BUFtwcm9wXVtpbmRleF0gfHwgcHJvcDtcbiAgfVxuICBmdW5jdGlvbiBvcmllbnQodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgKiAob3B0aW9ucy5kaXJlY3Rpb24gPT09IFJUTCA/IDEgOiAtMSk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICByZXNvbHZlLFxuICAgIG9yaWVudFxuICB9O1xufVxuXG5jb25zdCBDTEFTU19ST09UID0gUFJPSkVDVF9DT0RFO1xuY29uc3QgQ0xBU1NfU0xJREVSID0gYCR7UFJPSkVDVF9DT0RFfV9fc2xpZGVyYDtcbmNvbnN0IENMQVNTX1RSQUNLID0gYCR7UFJPSkVDVF9DT0RFfV9fdHJhY2tgO1xuY29uc3QgQ0xBU1NfTElTVCA9IGAke1BST0pFQ1RfQ09ERX1fX2xpc3RgO1xuY29uc3QgQ0xBU1NfU0xJREUgPSBgJHtQUk9KRUNUX0NPREV9X19zbGlkZWA7XG5jb25zdCBDTEFTU19DTE9ORSA9IGAke0NMQVNTX1NMSURFfS0tY2xvbmVgO1xuY29uc3QgQ0xBU1NfQ09OVEFJTkVSID0gYCR7Q0xBU1NfU0xJREV9X19jb250YWluZXJgO1xuY29uc3QgQ0xBU1NfQVJST1dTID0gYCR7UFJPSkVDVF9DT0RFfV9fYXJyb3dzYDtcbmNvbnN0IENMQVNTX0FSUk9XID0gYCR7UFJPSkVDVF9DT0RFfV9fYXJyb3dgO1xuY29uc3QgQ0xBU1NfQVJST1dfUFJFViA9IGAke0NMQVNTX0FSUk9XfS0tcHJldmA7XG5jb25zdCBDTEFTU19BUlJPV19ORVhUID0gYCR7Q0xBU1NfQVJST1d9LS1uZXh0YDtcbmNvbnN0IENMQVNTX1BBR0lOQVRJT04gPSBgJHtQUk9KRUNUX0NPREV9X19wYWdpbmF0aW9uYDtcbmNvbnN0IENMQVNTX1BBR0lOQVRJT05fUEFHRSA9IGAke0NMQVNTX1BBR0lOQVRJT059X19wYWdlYDtcbmNvbnN0IENMQVNTX1BST0dSRVNTID0gYCR7UFJPSkVDVF9DT0RFfV9fcHJvZ3Jlc3NgO1xuY29uc3QgQ0xBU1NfUFJPR1JFU1NfQkFSID0gYCR7Q0xBU1NfUFJPR1JFU1N9X19iYXJgO1xuY29uc3QgQ0xBU1NfQVVUT1BMQVkgPSBgJHtQUk9KRUNUX0NPREV9X19hdXRvcGxheWA7XG5jb25zdCBDTEFTU19QTEFZID0gYCR7UFJPSkVDVF9DT0RFfV9fcGxheWA7XG5jb25zdCBDTEFTU19QQVVTRSA9IGAke1BST0pFQ1RfQ09ERX1fX3BhdXNlYDtcbmNvbnN0IENMQVNTX1NQSU5ORVIgPSBgJHtQUk9KRUNUX0NPREV9X19zcGlubmVyYDtcbmNvbnN0IENMQVNTX0lOSVRJQUxJWkVEID0gXCJpcy1pbml0aWFsaXplZFwiO1xuY29uc3QgQ0xBU1NfQUNUSVZFID0gXCJpcy1hY3RpdmVcIjtcbmNvbnN0IENMQVNTX1BSRVYgPSBcImlzLXByZXZcIjtcbmNvbnN0IENMQVNTX05FWFQgPSBcImlzLW5leHRcIjtcbmNvbnN0IENMQVNTX1ZJU0lCTEUgPSBcImlzLXZpc2libGVcIjtcbmNvbnN0IENMQVNTX0xPQURJTkcgPSBcImlzLWxvYWRpbmdcIjtcbmNvbnN0IFNUQVRVU19DTEFTU0VTID0gW0NMQVNTX0FDVElWRSwgQ0xBU1NfVklTSUJMRSwgQ0xBU1NfUFJFViwgQ0xBU1NfTkVYVCwgQ0xBU1NfTE9BRElOR107XG5jb25zdCBDTEFTU0VTID0ge1xuICBzbGlkZTogQ0xBU1NfU0xJREUsXG4gIGNsb25lOiBDTEFTU19DTE9ORSxcbiAgYXJyb3dzOiBDTEFTU19BUlJPV1MsXG4gIGFycm93OiBDTEFTU19BUlJPVyxcbiAgcHJldjogQ0xBU1NfQVJST1dfUFJFVixcbiAgbmV4dDogQ0xBU1NfQVJST1dfTkVYVCxcbiAgcGFnaW5hdGlvbjogQ0xBU1NfUEFHSU5BVElPTixcbiAgcGFnZTogQ0xBU1NfUEFHSU5BVElPTl9QQUdFLFxuICBzcGlubmVyOiBDTEFTU19TUElOTkVSXG59O1xuXG5mdW5jdGlvbiBFbGVtZW50cyhTcGxpZGUyLCBDb21wb25lbnRzMiwgb3B0aW9ucykge1xuICBjb25zdCB7IG9uIH0gPSBFdmVudEludGVyZmFjZShTcGxpZGUyKTtcbiAgY29uc3QgeyByb290IH0gPSBTcGxpZGUyO1xuICBjb25zdCBlbGVtZW50cyA9IHt9O1xuICBjb25zdCBzbGlkZXMgPSBbXTtcbiAgbGV0IGNsYXNzZXM7XG4gIGxldCBzbGlkZXI7XG4gIGxldCB0cmFjaztcbiAgbGV0IGxpc3Q7XG4gIGZ1bmN0aW9uIHNldHVwKCkge1xuICAgIGNvbGxlY3QoKTtcbiAgICBpZGVudGlmeSgpO1xuICAgIGFkZENsYXNzKHJvb3QsIGNsYXNzZXMgPSBnZXRDbGFzc2VzKCkpO1xuICB9XG4gIGZ1bmN0aW9uIG1vdW50KCkge1xuICAgIG9uKEVWRU5UX1JFRlJFU0gsIHJlZnJlc2gsIERFRkFVTFRfRVZFTlRfUFJJT1JJVFkgLSAyKTtcbiAgICBvbihFVkVOVF9VUERBVEVELCB1cGRhdGUpO1xuICB9XG4gIGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgW3Jvb3QsIHRyYWNrLCBsaXN0XS5mb3JFYWNoKChlbG0pID0+IHtcbiAgICAgIHJlbW92ZUF0dHJpYnV0ZShlbG0sIFwic3R5bGVcIik7XG4gICAgfSk7XG4gICAgZW1wdHkoc2xpZGVzKTtcbiAgICByZW1vdmVDbGFzcyhyb290LCBjbGFzc2VzKTtcbiAgfVxuICBmdW5jdGlvbiByZWZyZXNoKCkge1xuICAgIGRlc3Ryb3koKTtcbiAgICBzZXR1cCgpO1xuICB9XG4gIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICByZW1vdmVDbGFzcyhyb290LCBjbGFzc2VzKTtcbiAgICBhZGRDbGFzcyhyb290LCBjbGFzc2VzID0gZ2V0Q2xhc3NlcygpKTtcbiAgfVxuICBmdW5jdGlvbiBjb2xsZWN0KCkge1xuICAgIHNsaWRlciA9IGNoaWxkKHJvb3QsIGAuJHtDTEFTU19TTElERVJ9YCk7XG4gICAgdHJhY2sgPSBxdWVyeShyb290LCBgLiR7Q0xBU1NfVFJBQ0t9YCk7XG4gICAgbGlzdCA9IGNoaWxkKHRyYWNrLCBgLiR7Q0xBU1NfTElTVH1gKTtcbiAgICBhc3NlcnQodHJhY2sgJiYgbGlzdCwgXCJBIHRyYWNrL2xpc3QgZWxlbWVudCBpcyBtaXNzaW5nLlwiKTtcbiAgICBwdXNoKHNsaWRlcywgY2hpbGRyZW4obGlzdCwgYC4ke0NMQVNTX1NMSURFfTpub3QoLiR7Q0xBU1NfQ0xPTkV9KWApKTtcbiAgICBjb25zdCBhdXRvcGxheSA9IGZpbmQoYC4ke0NMQVNTX0FVVE9QTEFZfWApO1xuICAgIGNvbnN0IGFycm93cyA9IGZpbmQoYC4ke0NMQVNTX0FSUk9XU31gKTtcbiAgICBhc3NpZ24oZWxlbWVudHMsIHtcbiAgICAgIHJvb3QsXG4gICAgICBzbGlkZXIsXG4gICAgICB0cmFjayxcbiAgICAgIGxpc3QsXG4gICAgICBzbGlkZXMsXG4gICAgICBhcnJvd3MsXG4gICAgICBhdXRvcGxheSxcbiAgICAgIHByZXY6IHF1ZXJ5KGFycm93cywgYC4ke0NMQVNTX0FSUk9XX1BSRVZ9YCksXG4gICAgICBuZXh0OiBxdWVyeShhcnJvd3MsIGAuJHtDTEFTU19BUlJPV19ORVhUfWApLFxuICAgICAgYmFyOiBxdWVyeShmaW5kKGAuJHtDTEFTU19QUk9HUkVTU31gKSwgYC4ke0NMQVNTX1BST0dSRVNTX0JBUn1gKSxcbiAgICAgIHBsYXk6IHF1ZXJ5KGF1dG9wbGF5LCBgLiR7Q0xBU1NfUExBWX1gKSxcbiAgICAgIHBhdXNlOiBxdWVyeShhdXRvcGxheSwgYC4ke0NMQVNTX1BBVVNFfWApXG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gaWRlbnRpZnkoKSB7XG4gICAgY29uc3QgaWQgPSByb290LmlkIHx8IHVuaXF1ZUlkKFBST0pFQ1RfQ09ERSk7XG4gICAgcm9vdC5pZCA9IGlkO1xuICAgIHRyYWNrLmlkID0gdHJhY2suaWQgfHwgYCR7aWR9LXRyYWNrYDtcbiAgICBsaXN0LmlkID0gbGlzdC5pZCB8fCBgJHtpZH0tbGlzdGA7XG4gIH1cbiAgZnVuY3Rpb24gZmluZChzZWxlY3Rvcikge1xuICAgIHJldHVybiBjaGlsZChyb290LCBzZWxlY3RvcikgfHwgY2hpbGQoc2xpZGVyLCBzZWxlY3Rvcik7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0Q2xhc3NlcygpIHtcbiAgICByZXR1cm4gW1xuICAgICAgYCR7Q0xBU1NfUk9PVH0tLSR7b3B0aW9ucy50eXBlfWAsXG4gICAgICBgJHtDTEFTU19ST09UfS0tJHtvcHRpb25zLmRpcmVjdGlvbn1gLFxuICAgICAgb3B0aW9ucy5kcmFnICYmIGAke0NMQVNTX1JPT1R9LS1kcmFnZ2FibGVgLFxuICAgICAgb3B0aW9ucy5pc05hdmlnYXRpb24gJiYgYCR7Q0xBU1NfUk9PVH0tLW5hdmAsXG4gICAgICBDTEFTU19BQ1RJVkVcbiAgICBdO1xuICB9XG4gIHJldHVybiBhc3NpZ24oZWxlbWVudHMsIHtcbiAgICBzZXR1cCxcbiAgICBtb3VudCxcbiAgICBkZXN0cm95XG4gIH0pO1xufVxuXG5jb25zdCBST0xFID0gXCJyb2xlXCI7XG5jb25zdCBBUklBX0NPTlRST0xTID0gXCJhcmlhLWNvbnRyb2xzXCI7XG5jb25zdCBBUklBX0NVUlJFTlQgPSBcImFyaWEtY3VycmVudFwiO1xuY29uc3QgQVJJQV9MQUJFTCA9IFwiYXJpYS1sYWJlbFwiO1xuY29uc3QgQVJJQV9ISURERU4gPSBcImFyaWEtaGlkZGVuXCI7XG5jb25zdCBUQUJfSU5ERVggPSBcInRhYmluZGV4XCI7XG5jb25zdCBESVNBQkxFRCA9IFwiZGlzYWJsZWRcIjtcbmNvbnN0IEFSSUFfT1JJRU5UQVRJT04gPSBcImFyaWEtb3JpZW50YXRpb25cIjtcbmNvbnN0IEFMTF9BVFRSSUJVVEVTID0gW1xuICBST0xFLFxuICBBUklBX0NPTlRST0xTLFxuICBBUklBX0NVUlJFTlQsXG4gIEFSSUFfTEFCRUwsXG4gIEFSSUFfSElEREVOLFxuICBBUklBX09SSUVOVEFUSU9OLFxuICBUQUJfSU5ERVgsXG4gIERJU0FCTEVEXG5dO1xuXG5jb25zdCBTTElERSA9IFwic2xpZGVcIjtcbmNvbnN0IExPT1AgPSBcImxvb3BcIjtcbmNvbnN0IEZBREUgPSBcImZhZGVcIjtcblxuZnVuY3Rpb24gU2xpZGUkMShTcGxpZGUyLCBpbmRleCwgc2xpZGVJbmRleCwgc2xpZGUpIHtcbiAgY29uc3QgeyBvbiwgZW1pdCwgYmluZCwgZGVzdHJveTogZGVzdHJveUV2ZW50cyB9ID0gRXZlbnRJbnRlcmZhY2UoU3BsaWRlMik7XG4gIGNvbnN0IHsgQ29tcG9uZW50cywgcm9vdCwgb3B0aW9ucyB9ID0gU3BsaWRlMjtcbiAgY29uc3QgeyBpc05hdmlnYXRpb24sIHVwZGF0ZU9uTW92ZSB9ID0gb3B0aW9ucztcbiAgY29uc3QgeyByZXNvbHZlIH0gPSBDb21wb25lbnRzLkRpcmVjdGlvbjtcbiAgY29uc3Qgc3R5bGVzID0gZ2V0QXR0cmlidXRlKHNsaWRlLCBcInN0eWxlXCIpO1xuICBjb25zdCBpc0Nsb25lID0gc2xpZGVJbmRleCA+IC0xO1xuICBjb25zdCBjb250YWluZXIgPSBjaGlsZChzbGlkZSwgYC4ke0NMQVNTX0NPTlRBSU5FUn1gKTtcbiAgY29uc3QgZm9jdXNhYmxlTm9kZXMgPSBvcHRpb25zLmZvY3VzYWJsZU5vZGVzICYmIHF1ZXJ5QWxsKHNsaWRlLCBvcHRpb25zLmZvY3VzYWJsZU5vZGVzKTtcbiAgbGV0IGRlc3Ryb3llZDtcbiAgZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgaWYgKCFpc0Nsb25lKSB7XG4gICAgICBzbGlkZS5pZCA9IGAke3Jvb3QuaWR9LXNsaWRlJHtwYWQoaW5kZXggKyAxKX1gO1xuICAgIH1cbiAgICBiaW5kKHNsaWRlLCBcImNsaWNrIGtleWRvd25cIiwgKGUpID0+IHtcbiAgICAgIGVtaXQoZS50eXBlID09PSBcImNsaWNrXCIgPyBFVkVOVF9DTElDSyA6IEVWRU5UX1NMSURFX0tFWURPV04sIHNlbGYsIGUpO1xuICAgIH0pO1xuICAgIG9uKFtFVkVOVF9SRUZSRVNILCBFVkVOVF9SRVBPU0lUSU9ORUQsIEVWRU5UX1NISUZURUQsIEVWRU5UX01PVkVELCBFVkVOVF9TQ1JPTExFRF0sIHVwZGF0ZSk7XG4gICAgb24oRVZFTlRfTkFWSUdBVElPTl9NT1VOVEVELCBpbml0TmF2aWdhdGlvbik7XG4gICAgaWYgKHVwZGF0ZU9uTW92ZSkge1xuICAgICAgb24oRVZFTlRfTU9WRSwgb25Nb3ZlKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICBkZXN0cm95ZWQgPSB0cnVlO1xuICAgIGRlc3Ryb3lFdmVudHMoKTtcbiAgICByZW1vdmVDbGFzcyhzbGlkZSwgU1RBVFVTX0NMQVNTRVMpO1xuICAgIHJlbW92ZUF0dHJpYnV0ZShzbGlkZSwgQUxMX0FUVFJJQlVURVMpO1xuICAgIHNldEF0dHJpYnV0ZShzbGlkZSwgXCJzdHlsZVwiLCBzdHlsZXMpO1xuICB9XG4gIGZ1bmN0aW9uIGluaXROYXZpZ2F0aW9uKCkge1xuICAgIGNvbnN0IGlkeCA9IGlzQ2xvbmUgPyBzbGlkZUluZGV4IDogaW5kZXg7XG4gICAgY29uc3QgbGFiZWwgPSBmb3JtYXQob3B0aW9ucy5pMThuLnNsaWRlWCwgaWR4ICsgMSk7XG4gICAgY29uc3QgY29udHJvbHMgPSBTcGxpZGUyLnNwbGlkZXMubWFwKCh0YXJnZXQpID0+IHRhcmdldC5zcGxpZGUucm9vdC5pZCkuam9pbihcIiBcIik7XG4gICAgc2V0QXR0cmlidXRlKHNsaWRlLCBBUklBX0xBQkVMLCBsYWJlbCk7XG4gICAgc2V0QXR0cmlidXRlKHNsaWRlLCBBUklBX0NPTlRST0xTLCBjb250cm9scyk7XG4gICAgc2V0QXR0cmlidXRlKHNsaWRlLCBST0xFLCBcIm1lbnVpdGVtXCIpO1xuICAgIHVwZGF0ZUFjdGl2aXR5KGlzQWN0aXZlKCkpO1xuICB9XG4gIGZ1bmN0aW9uIG9uTW92ZSgpIHtcbiAgICBpZiAoIWRlc3Ryb3llZCkge1xuICAgICAgdXBkYXRlKCk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICBpZiAoIWRlc3Ryb3llZCkge1xuICAgICAgY29uc3QgeyBpbmRleDogY3VyckluZGV4IH0gPSBTcGxpZGUyO1xuICAgICAgdXBkYXRlQWN0aXZpdHkoaXNBY3RpdmUoKSk7XG4gICAgICB1cGRhdGVWaXNpYmlsaXR5KGlzVmlzaWJsZSgpKTtcbiAgICAgIHRvZ2dsZUNsYXNzKHNsaWRlLCBDTEFTU19QUkVWLCBpbmRleCA9PT0gY3VyckluZGV4IC0gMSk7XG4gICAgICB0b2dnbGVDbGFzcyhzbGlkZSwgQ0xBU1NfTkVYVCwgaW5kZXggPT09IGN1cnJJbmRleCArIDEpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiB1cGRhdGVBY3Rpdml0eShhY3RpdmUpIHtcbiAgICBpZiAoYWN0aXZlICE9PSBoYXNDbGFzcyhzbGlkZSwgQ0xBU1NfQUNUSVZFKSkge1xuICAgICAgdG9nZ2xlQ2xhc3Moc2xpZGUsIENMQVNTX0FDVElWRSwgYWN0aXZlKTtcbiAgICAgIGlmIChpc05hdmlnYXRpb24pIHtcbiAgICAgICAgc2V0QXR0cmlidXRlKHNsaWRlLCBBUklBX0NVUlJFTlQsIGFjdGl2ZSB8fCBudWxsKTtcbiAgICAgIH1cbiAgICAgIGVtaXQoYWN0aXZlID8gRVZFTlRfQUNUSVZFIDogRVZFTlRfSU5BQ1RJVkUsIHNlbGYpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiB1cGRhdGVWaXNpYmlsaXR5KHZpc2libGUpIHtcbiAgICBjb25zdCBhcmlhSGlkZGVuID0gIXZpc2libGUgJiYgIWlzQWN0aXZlKCk7XG4gICAgc2V0QXR0cmlidXRlKHNsaWRlLCBBUklBX0hJRERFTiwgYXJpYUhpZGRlbiB8fCBudWxsKTtcbiAgICBzZXRBdHRyaWJ1dGUoc2xpZGUsIFRBQl9JTkRFWCwgIWFyaWFIaWRkZW4gJiYgb3B0aW9ucy5zbGlkZUZvY3VzID8gMCA6IG51bGwpO1xuICAgIGlmIChmb2N1c2FibGVOb2Rlcykge1xuICAgICAgZm9jdXNhYmxlTm9kZXMuZm9yRWFjaCgobm9kZSkgPT4ge1xuICAgICAgICBzZXRBdHRyaWJ1dGUobm9kZSwgVEFCX0lOREVYLCBhcmlhSGlkZGVuID8gLTEgOiBudWxsKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAodmlzaWJsZSAhPT0gaGFzQ2xhc3Moc2xpZGUsIENMQVNTX1ZJU0lCTEUpKSB7XG4gICAgICB0b2dnbGVDbGFzcyhzbGlkZSwgQ0xBU1NfVklTSUJMRSwgdmlzaWJsZSk7XG4gICAgICBlbWl0KHZpc2libGUgPyBFVkVOVF9WSVNJQkxFIDogRVZFTlRfSElEREVOLCBzZWxmKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gc3R5bGUkMShwcm9wLCB2YWx1ZSwgdXNlQ29udGFpbmVyKSB7XG4gICAgc3R5bGUodXNlQ29udGFpbmVyICYmIGNvbnRhaW5lciB8fCBzbGlkZSwgcHJvcCwgdmFsdWUpO1xuICB9XG4gIGZ1bmN0aW9uIGlzQWN0aXZlKCkge1xuICAgIGNvbnN0IHsgaW5kZXg6IGN1cnIgfSA9IFNwbGlkZTI7XG4gICAgcmV0dXJuIGN1cnIgPT09IGluZGV4IHx8IG9wdGlvbnMuY2xvbmVTdGF0dXMgJiYgY3VyciA9PT0gc2xpZGVJbmRleDtcbiAgfVxuICBmdW5jdGlvbiBpc1Zpc2libGUoKSB7XG4gICAgaWYgKFNwbGlkZTIuaXMoRkFERSkpIHtcbiAgICAgIHJldHVybiBpc0FjdGl2ZSgpO1xuICAgIH1cbiAgICBjb25zdCB0cmFja1JlY3QgPSByZWN0KENvbXBvbmVudHMuRWxlbWVudHMudHJhY2spO1xuICAgIGNvbnN0IHNsaWRlUmVjdCA9IHJlY3Qoc2xpZGUpO1xuICAgIGNvbnN0IGxlZnQgPSByZXNvbHZlKFwibGVmdFwiKTtcbiAgICBjb25zdCByaWdodCA9IHJlc29sdmUoXCJyaWdodFwiKTtcbiAgICByZXR1cm4gZmxvb3IodHJhY2tSZWN0W2xlZnRdKSA8PSBjZWlsKHNsaWRlUmVjdFtsZWZ0XSkgJiYgZmxvb3Ioc2xpZGVSZWN0W3JpZ2h0XSkgPD0gY2VpbCh0cmFja1JlY3RbcmlnaHRdKTtcbiAgfVxuICBmdW5jdGlvbiBpc1dpdGhpbihmcm9tLCBkaXN0YW5jZSkge1xuICAgIGxldCBkaWZmID0gYWJzKGZyb20gLSBpbmRleCk7XG4gICAgaWYgKCFpc0Nsb25lICYmIChvcHRpb25zLnJld2luZCB8fCBTcGxpZGUyLmlzKExPT1ApKSkge1xuICAgICAgZGlmZiA9IG1pbihkaWZmLCBTcGxpZGUyLmxlbmd0aCAtIGRpZmYpO1xuICAgIH1cbiAgICByZXR1cm4gZGlmZiA8PSBkaXN0YW5jZTtcbiAgfVxuICBjb25zdCBzZWxmID0ge1xuICAgIGluZGV4LFxuICAgIHNsaWRlSW5kZXgsXG4gICAgc2xpZGUsXG4gICAgY29udGFpbmVyLFxuICAgIGlzQ2xvbmUsXG4gICAgbW91bnQsXG4gICAgZGVzdHJveSxcbiAgICB1cGRhdGUsXG4gICAgc3R5bGU6IHN0eWxlJDEsXG4gICAgaXNXaXRoaW5cbiAgfTtcbiAgcmV0dXJuIHNlbGY7XG59XG5cbmZ1bmN0aW9uIFNsaWRlcyhTcGxpZGUyLCBDb21wb25lbnRzMiwgb3B0aW9ucykge1xuICBjb25zdCB7IG9uLCBlbWl0LCBiaW5kIH0gPSBFdmVudEludGVyZmFjZShTcGxpZGUyKTtcbiAgY29uc3QgeyBzbGlkZXMsIGxpc3QgfSA9IENvbXBvbmVudHMyLkVsZW1lbnRzO1xuICBjb25zdCBTbGlkZXMyID0gW107XG4gIGZ1bmN0aW9uIG1vdW50KCkge1xuICAgIGluaXQoKTtcbiAgICBvbihFVkVOVF9SRUZSRVNILCByZWZyZXNoKTtcbiAgICBvbihbRVZFTlRfTU9VTlRFRCwgRVZFTlRfUkVGUkVTSF0sICgpID0+IHtcbiAgICAgIFNsaWRlczIuc29ydCgoU2xpZGUxLCBTbGlkZTIpID0+IFNsaWRlMS5pbmRleCAtIFNsaWRlMi5pbmRleCk7XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICBzbGlkZXMuZm9yRWFjaCgoc2xpZGUsIGluZGV4KSA9PiB7XG4gICAgICByZWdpc3RlcihzbGlkZSwgaW5kZXgsIC0xKTtcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIGZvckVhY2gkMSgoU2xpZGUyKSA9PiB7XG4gICAgICBTbGlkZTIuZGVzdHJveSgpO1xuICAgIH0pO1xuICAgIGVtcHR5KFNsaWRlczIpO1xuICB9XG4gIGZ1bmN0aW9uIHJlZnJlc2goKSB7XG4gICAgZGVzdHJveSgpO1xuICAgIGluaXQoKTtcbiAgfVxuICBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgZm9yRWFjaCQxKChTbGlkZTIpID0+IHtcbiAgICAgIFNsaWRlMi51cGRhdGUoKTtcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiByZWdpc3RlcihzbGlkZSwgaW5kZXgsIHNsaWRlSW5kZXgpIHtcbiAgICBjb25zdCBvYmplY3QgPSBTbGlkZSQxKFNwbGlkZTIsIGluZGV4LCBzbGlkZUluZGV4LCBzbGlkZSk7XG4gICAgb2JqZWN0Lm1vdW50KCk7XG4gICAgU2xpZGVzMi5wdXNoKG9iamVjdCk7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0KGV4Y2x1ZGVDbG9uZXMpIHtcbiAgICByZXR1cm4gZXhjbHVkZUNsb25lcyA/IGZpbHRlcigoU2xpZGUyKSA9PiAhU2xpZGUyLmlzQ2xvbmUpIDogU2xpZGVzMjtcbiAgfVxuICBmdW5jdGlvbiBnZXRJbihwYWdlKSB7XG4gICAgY29uc3QgeyBDb250cm9sbGVyIH0gPSBDb21wb25lbnRzMjtcbiAgICBjb25zdCBpbmRleCA9IENvbnRyb2xsZXIudG9JbmRleChwYWdlKTtcbiAgICBjb25zdCBtYXggPSBDb250cm9sbGVyLmhhc0ZvY3VzKCkgPyAxIDogb3B0aW9ucy5wZXJQYWdlO1xuICAgIHJldHVybiBmaWx0ZXIoKFNsaWRlMikgPT4gYmV0d2VlbihTbGlkZTIuaW5kZXgsIGluZGV4LCBpbmRleCArIG1heCAtIDEpKTtcbiAgfVxuICBmdW5jdGlvbiBnZXRBdChpbmRleCkge1xuICAgIHJldHVybiBmaWx0ZXIoaW5kZXgpWzBdO1xuICB9XG4gIGZ1bmN0aW9uIGFkZChpdGVtcywgaW5kZXgpIHtcbiAgICBmb3JFYWNoKGl0ZW1zLCAoc2xpZGUpID0+IHtcbiAgICAgIGlmIChpc1N0cmluZyhzbGlkZSkpIHtcbiAgICAgICAgc2xpZGUgPSBwYXJzZUh0bWwoc2xpZGUpO1xuICAgICAgfVxuICAgICAgaWYgKGlzSFRNTEVsZW1lbnQoc2xpZGUpKSB7XG4gICAgICAgIGNvbnN0IHJlZiA9IHNsaWRlc1tpbmRleF07XG4gICAgICAgIHJlZiA/IGJlZm9yZShzbGlkZSwgcmVmKSA6IGFwcGVuZChsaXN0LCBzbGlkZSk7XG4gICAgICAgIGFkZENsYXNzKHNsaWRlLCBvcHRpb25zLmNsYXNzZXMuc2xpZGUpO1xuICAgICAgICBvYnNlcnZlSW1hZ2VzKHNsaWRlLCBlbWl0LmJpbmQobnVsbCwgRVZFTlRfUkVTSVpFKSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgZW1pdChFVkVOVF9SRUZSRVNIKTtcbiAgfVxuICBmdW5jdGlvbiByZW1vdmUkMShtYXRjaGVyKSB7XG4gICAgcmVtb3ZlKGZpbHRlcihtYXRjaGVyKS5tYXAoKFNsaWRlMikgPT4gU2xpZGUyLnNsaWRlKSk7XG4gICAgZW1pdChFVkVOVF9SRUZSRVNIKTtcbiAgfVxuICBmdW5jdGlvbiBmb3JFYWNoJDEoaXRlcmF0ZWUsIGV4Y2x1ZGVDbG9uZXMpIHtcbiAgICBnZXQoZXhjbHVkZUNsb25lcykuZm9yRWFjaChpdGVyYXRlZSk7XG4gIH1cbiAgZnVuY3Rpb24gZmlsdGVyKG1hdGNoZXIpIHtcbiAgICByZXR1cm4gU2xpZGVzMi5maWx0ZXIoaXNGdW5jdGlvbihtYXRjaGVyKSA/IG1hdGNoZXIgOiAoU2xpZGUyKSA9PiBpc1N0cmluZyhtYXRjaGVyKSA/IG1hdGNoZXMoU2xpZGUyLnNsaWRlLCBtYXRjaGVyKSA6IGluY2x1ZGVzKHRvQXJyYXkobWF0Y2hlciksIFNsaWRlMi5pbmRleCkpO1xuICB9XG4gIGZ1bmN0aW9uIHN0eWxlKHByb3AsIHZhbHVlLCB1c2VDb250YWluZXIpIHtcbiAgICBmb3JFYWNoJDEoKFNsaWRlMikgPT4ge1xuICAgICAgU2xpZGUyLnN0eWxlKHByb3AsIHZhbHVlLCB1c2VDb250YWluZXIpO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIG9ic2VydmVJbWFnZXMoZWxtLCBjYWxsYmFjaykge1xuICAgIGNvbnN0IGltYWdlcyA9IHF1ZXJ5QWxsKGVsbSwgXCJpbWdcIik7XG4gICAgbGV0IHsgbGVuZ3RoIH0gPSBpbWFnZXM7XG4gICAgaWYgKGxlbmd0aCkge1xuICAgICAgaW1hZ2VzLmZvckVhY2goKGltZykgPT4ge1xuICAgICAgICBiaW5kKGltZywgXCJsb2FkIGVycm9yXCIsICgpID0+IHtcbiAgICAgICAgICBpZiAoIS0tbGVuZ3RoKSB7XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZ2V0TGVuZ3RoKGV4Y2x1ZGVDbG9uZXMpIHtcbiAgICByZXR1cm4gZXhjbHVkZUNsb25lcyA/IHNsaWRlcy5sZW5ndGggOiBTbGlkZXMyLmxlbmd0aDtcbiAgfVxuICBmdW5jdGlvbiBpc0Vub3VnaCgpIHtcbiAgICByZXR1cm4gU2xpZGVzMi5sZW5ndGggPiBvcHRpb25zLnBlclBhZ2U7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBtb3VudCxcbiAgICBkZXN0cm95LFxuICAgIHVwZGF0ZSxcbiAgICByZWdpc3RlcixcbiAgICBnZXQsXG4gICAgZ2V0SW4sXG4gICAgZ2V0QXQsXG4gICAgYWRkLFxuICAgIHJlbW92ZTogcmVtb3ZlJDEsXG4gICAgZm9yRWFjaDogZm9yRWFjaCQxLFxuICAgIGZpbHRlcixcbiAgICBzdHlsZSxcbiAgICBnZXRMZW5ndGgsXG4gICAgaXNFbm91Z2hcbiAgfTtcbn1cblxuZnVuY3Rpb24gTGF5b3V0KFNwbGlkZTIsIENvbXBvbmVudHMyLCBvcHRpb25zKSB7XG4gIGNvbnN0IHsgb24sIGJpbmQsIGVtaXQgfSA9IEV2ZW50SW50ZXJmYWNlKFNwbGlkZTIpO1xuICBjb25zdCB7IFNsaWRlcyB9ID0gQ29tcG9uZW50czI7XG4gIGNvbnN0IHsgcmVzb2x2ZSB9ID0gQ29tcG9uZW50czIuRGlyZWN0aW9uO1xuICBjb25zdCB7IHJvb3QsIHRyYWNrLCBsaXN0IH0gPSBDb21wb25lbnRzMi5FbGVtZW50cztcbiAgY29uc3QgeyBnZXRBdCB9ID0gU2xpZGVzO1xuICBsZXQgdmVydGljYWw7XG4gIGxldCByb290UmVjdDtcbiAgZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgaW5pdCgpO1xuICAgIGJpbmQod2luZG93LCBcInJlc2l6ZSBsb2FkXCIsIFRocm90dGxlKGVtaXQuYmluZCh0aGlzLCBFVkVOVF9SRVNJWkUpKSk7XG4gICAgb24oW0VWRU5UX1VQREFURUQsIEVWRU5UX1JFRlJFU0hdLCBpbml0KTtcbiAgICBvbihFVkVOVF9SRVNJWkUsIHJlc2l6ZSk7XG4gIH1cbiAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICByb290UmVjdCA9IG51bGw7XG4gICAgdmVydGljYWwgPSBvcHRpb25zLmRpcmVjdGlvbiA9PT0gVFRCO1xuICAgIHN0eWxlKHJvb3QsIFwibWF4V2lkdGhcIiwgdW5pdChvcHRpb25zLndpZHRoKSk7XG4gICAgc3R5bGUodHJhY2ssIHJlc29sdmUoXCJwYWRkaW5nTGVmdFwiKSwgY3NzUGFkZGluZyhmYWxzZSkpO1xuICAgIHN0eWxlKHRyYWNrLCByZXNvbHZlKFwicGFkZGluZ1JpZ2h0XCIpLCBjc3NQYWRkaW5nKHRydWUpKTtcbiAgICByZXNpemUoKTtcbiAgfVxuICBmdW5jdGlvbiByZXNpemUoKSB7XG4gICAgY29uc3QgbmV3UmVjdCA9IHJlY3Qocm9vdCk7XG4gICAgaWYgKCFyb290UmVjdCB8fCByb290UmVjdC53aWR0aCAhPT0gbmV3UmVjdC53aWR0aCB8fCByb290UmVjdC5oZWlnaHQgIT09IG5ld1JlY3QuaGVpZ2h0KSB7XG4gICAgICBzdHlsZSh0cmFjaywgXCJoZWlnaHRcIiwgY3NzVHJhY2tIZWlnaHQoKSk7XG4gICAgICBTbGlkZXMuc3R5bGUocmVzb2x2ZShcIm1hcmdpblJpZ2h0XCIpLCB1bml0KG9wdGlvbnMuZ2FwKSk7XG4gICAgICBTbGlkZXMuc3R5bGUoXCJ3aWR0aFwiLCBjc3NTbGlkZVdpZHRoKCkgfHwgbnVsbCk7XG4gICAgICBzZXRTbGlkZXNIZWlnaHQoKTtcbiAgICAgIHJvb3RSZWN0ID0gbmV3UmVjdDtcbiAgICAgIGVtaXQoRVZFTlRfUkVTSVpFRCk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHNldFNsaWRlc0hlaWdodCgpIHtcbiAgICBTbGlkZXMuc3R5bGUoXCJoZWlnaHRcIiwgY3NzU2xpZGVIZWlnaHQoKSB8fCBudWxsLCB0cnVlKTtcbiAgfVxuICBmdW5jdGlvbiBjc3NQYWRkaW5nKHJpZ2h0KSB7XG4gICAgY29uc3QgeyBwYWRkaW5nIH0gPSBvcHRpb25zO1xuICAgIGNvbnN0IHByb3AgPSByZXNvbHZlKHJpZ2h0ID8gXCJyaWdodFwiIDogXCJsZWZ0XCIpO1xuICAgIHJldHVybiBwYWRkaW5nICYmIHVuaXQocGFkZGluZ1twcm9wXSB8fCAoaXNPYmplY3QocGFkZGluZykgPyAwIDogcGFkZGluZykpIHx8IFwiMHB4XCI7XG4gIH1cbiAgZnVuY3Rpb24gY3NzVHJhY2tIZWlnaHQoKSB7XG4gICAgbGV0IGhlaWdodCA9IFwiXCI7XG4gICAgaWYgKHZlcnRpY2FsKSB7XG4gICAgICBoZWlnaHQgPSBjc3NIZWlnaHQoKTtcbiAgICAgIGFzc2VydChoZWlnaHQsIFwiaGVpZ2h0IG9yIGhlaWdodFJhdGlvIGlzIG1pc3NpbmcuXCIpO1xuICAgICAgaGVpZ2h0ID0gYGNhbGMoJHtoZWlnaHR9IC0gJHtjc3NQYWRkaW5nKGZhbHNlKX0gLSAke2Nzc1BhZGRpbmcodHJ1ZSl9KWA7XG4gICAgfVxuICAgIHJldHVybiBoZWlnaHQ7XG4gIH1cbiAgZnVuY3Rpb24gY3NzSGVpZ2h0KCkge1xuICAgIHJldHVybiB1bml0KG9wdGlvbnMuaGVpZ2h0IHx8IHJlY3QobGlzdCkud2lkdGggKiBvcHRpb25zLmhlaWdodFJhdGlvKTtcbiAgfVxuICBmdW5jdGlvbiBjc3NTbGlkZVdpZHRoKCkge1xuICAgIHJldHVybiBvcHRpb25zLmF1dG9XaWR0aCA/IFwiXCIgOiB1bml0KG9wdGlvbnMuZml4ZWRXaWR0aCkgfHwgKHZlcnRpY2FsID8gXCJcIiA6IGNzc1NsaWRlU2l6ZSgpKTtcbiAgfVxuICBmdW5jdGlvbiBjc3NTbGlkZUhlaWdodCgpIHtcbiAgICByZXR1cm4gdW5pdChvcHRpb25zLmZpeGVkSGVpZ2h0KSB8fCAodmVydGljYWwgPyBvcHRpb25zLmF1dG9IZWlnaHQgPyBcIlwiIDogY3NzU2xpZGVTaXplKCkgOiBjc3NIZWlnaHQoKSk7XG4gIH1cbiAgZnVuY3Rpb24gY3NzU2xpZGVTaXplKCkge1xuICAgIGNvbnN0IGdhcCA9IHVuaXQob3B0aW9ucy5nYXApO1xuICAgIHJldHVybiBgY2FsYygoMTAwJSR7Z2FwICYmIGAgKyAke2dhcH1gfSkvJHtvcHRpb25zLnBlclBhZ2UgfHwgMX0ke2dhcCAmJiBgIC0gJHtnYXB9YH0pYDtcbiAgfVxuICBmdW5jdGlvbiBsaXN0U2l6ZSgpIHtcbiAgICByZXR1cm4gcmVjdChsaXN0KVtyZXNvbHZlKFwid2lkdGhcIildO1xuICB9XG4gIGZ1bmN0aW9uIHNsaWRlU2l6ZShpbmRleCwgd2l0aG91dEdhcCkge1xuICAgIGNvbnN0IFNsaWRlID0gZ2V0QXQoaW5kZXggfHwgMCk7XG4gICAgcmV0dXJuIFNsaWRlID8gcmVjdChTbGlkZS5zbGlkZSlbcmVzb2x2ZShcIndpZHRoXCIpXSArICh3aXRob3V0R2FwID8gMCA6IGdldEdhcCgpKSA6IDA7XG4gIH1cbiAgZnVuY3Rpb24gdG90YWxTaXplKGluZGV4LCB3aXRob3V0R2FwKSB7XG4gICAgY29uc3QgU2xpZGUgPSBnZXRBdChpbmRleCk7XG4gICAgaWYgKFNsaWRlKSB7XG4gICAgICBjb25zdCByaWdodCA9IHJlY3QoU2xpZGUuc2xpZGUpW3Jlc29sdmUoXCJyaWdodFwiKV07XG4gICAgICBjb25zdCBsZWZ0ID0gcmVjdChsaXN0KVtyZXNvbHZlKFwibGVmdFwiKV07XG4gICAgICByZXR1cm4gYWJzKHJpZ2h0IC0gbGVmdCkgKyAod2l0aG91dEdhcCA/IDAgOiBnZXRHYXAoKSk7XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9XG4gIGZ1bmN0aW9uIHNsaWRlclNpemUoKSB7XG4gICAgcmV0dXJuIHRvdGFsU2l6ZShTcGxpZGUyLmxlbmd0aCAtIDEsIHRydWUpIC0gdG90YWxTaXplKC0xLCB0cnVlKTtcbiAgfVxuICBmdW5jdGlvbiBnZXRHYXAoKSB7XG4gICAgY29uc3QgU2xpZGUgPSBnZXRBdCgwKTtcbiAgICByZXR1cm4gU2xpZGUgJiYgcGFyc2VGbG9hdChzdHlsZShTbGlkZS5zbGlkZSwgcmVzb2x2ZShcIm1hcmdpblJpZ2h0XCIpKSkgfHwgMDtcbiAgfVxuICBmdW5jdGlvbiBnZXRQYWRkaW5nKHJpZ2h0KSB7XG4gICAgcmV0dXJuIHBhcnNlRmxvYXQoc3R5bGUodHJhY2ssIHJlc29sdmUoYHBhZGRpbmcke3JpZ2h0ID8gXCJSaWdodFwiIDogXCJMZWZ0XCJ9YCkpKSB8fCAwO1xuICB9XG4gIHJldHVybiB7XG4gICAgbW91bnQsXG4gICAgbGlzdFNpemUsXG4gICAgc2xpZGVTaXplLFxuICAgIHNsaWRlclNpemUsXG4gICAgdG90YWxTaXplLFxuICAgIGdldFBhZGRpbmdcbiAgfTtcbn1cblxuZnVuY3Rpb24gQ2xvbmVzKFNwbGlkZTIsIENvbXBvbmVudHMyLCBvcHRpb25zKSB7XG4gIGNvbnN0IHsgb24sIGVtaXQgfSA9IEV2ZW50SW50ZXJmYWNlKFNwbGlkZTIpO1xuICBjb25zdCB7IEVsZW1lbnRzLCBTbGlkZXMgfSA9IENvbXBvbmVudHMyO1xuICBjb25zdCB7IHJlc29sdmUgfSA9IENvbXBvbmVudHMyLkRpcmVjdGlvbjtcbiAgY29uc3QgY2xvbmVzID0gW107XG4gIGxldCBjbG9uZUNvdW50O1xuICBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICBpbml0KCk7XG4gICAgb24oRVZFTlRfUkVGUkVTSCwgcmVmcmVzaCk7XG4gICAgb24oW0VWRU5UX1VQREFURUQsIEVWRU5UX1JFU0laRV0sIG9ic2VydmUpO1xuICB9XG4gIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgaWYgKGNsb25lQ291bnQgPSBjb21wdXRlQ2xvbmVDb3VudCgpKSB7XG4gICAgICBnZW5lcmF0ZShjbG9uZUNvdW50KTtcbiAgICAgIGVtaXQoRVZFTlRfUkVTSVpFKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICByZW1vdmUoY2xvbmVzKTtcbiAgICBlbXB0eShjbG9uZXMpO1xuICB9XG4gIGZ1bmN0aW9uIHJlZnJlc2goKSB7XG4gICAgZGVzdHJveSgpO1xuICAgIGluaXQoKTtcbiAgfVxuICBmdW5jdGlvbiBvYnNlcnZlKCkge1xuICAgIGlmIChjbG9uZUNvdW50IDwgY29tcHV0ZUNsb25lQ291bnQoKSkge1xuICAgICAgZW1pdChFVkVOVF9SRUZSRVNIKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZ2VuZXJhdGUoY291bnQpIHtcbiAgICBjb25zdCBzbGlkZXMgPSBTbGlkZXMuZ2V0KCkuc2xpY2UoKTtcbiAgICBjb25zdCB7IGxlbmd0aCB9ID0gc2xpZGVzO1xuICAgIGlmIChsZW5ndGgpIHtcbiAgICAgIHdoaWxlIChzbGlkZXMubGVuZ3RoIDwgY291bnQpIHtcbiAgICAgICAgcHVzaChzbGlkZXMsIHNsaWRlcyk7XG4gICAgICB9XG4gICAgICBwdXNoKHNsaWRlcy5zbGljZSgtY291bnQpLCBzbGlkZXMuc2xpY2UoMCwgY291bnQpKS5mb3JFYWNoKChTbGlkZSwgaW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgaXNIZWFkID0gaW5kZXggPCBjb3VudDtcbiAgICAgICAgY29uc3QgY2xvbmUgPSBjbG9uZURlZXAoU2xpZGUuc2xpZGUsIGluZGV4KTtcbiAgICAgICAgaXNIZWFkID8gYmVmb3JlKGNsb25lLCBzbGlkZXNbMF0uc2xpZGUpIDogYXBwZW5kKEVsZW1lbnRzLmxpc3QsIGNsb25lKTtcbiAgICAgICAgcHVzaChjbG9uZXMsIGNsb25lKTtcbiAgICAgICAgU2xpZGVzLnJlZ2lzdGVyKGNsb25lLCBpbmRleCAtIGNvdW50ICsgKGlzSGVhZCA/IDAgOiBsZW5ndGgpLCBTbGlkZS5pbmRleCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gY2xvbmVEZWVwKGVsbSwgaW5kZXgpIHtcbiAgICBjb25zdCBjbG9uZSA9IGVsbS5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgYWRkQ2xhc3MoY2xvbmUsIG9wdGlvbnMuY2xhc3Nlcy5jbG9uZSk7XG4gICAgY2xvbmUuaWQgPSBgJHtTcGxpZGUyLnJvb3QuaWR9LWNsb25lJHtwYWQoaW5kZXggKyAxKX1gO1xuICAgIHJldHVybiBjbG9uZTtcbiAgfVxuICBmdW5jdGlvbiBjb21wdXRlQ2xvbmVDb3VudCgpIHtcbiAgICBsZXQgeyBjbG9uZXM6IGNsb25lczIgfSA9IG9wdGlvbnM7XG4gICAgaWYgKCFTcGxpZGUyLmlzKExPT1ApKSB7XG4gICAgICBjbG9uZXMyID0gMDtcbiAgICB9IGVsc2UgaWYgKCFjbG9uZXMyKSB7XG4gICAgICBjb25zdCBmaXhlZFNpemUgPSBtZWFzdXJlKEVsZW1lbnRzLmxpc3QsIG9wdGlvbnNbcmVzb2x2ZShcImZpeGVkV2lkdGhcIildKTtcbiAgICAgIGNvbnN0IGZpeGVkQ291bnQgPSBmaXhlZFNpemUgJiYgY2VpbChyZWN0KEVsZW1lbnRzLnRyYWNrKVtyZXNvbHZlKFwid2lkdGhcIildIC8gZml4ZWRTaXplKTtcbiAgICAgIGNvbnN0IGJhc2VDb3VudCA9IGZpeGVkQ291bnQgfHwgb3B0aW9uc1tyZXNvbHZlKFwiYXV0b1dpZHRoXCIpXSAmJiBTcGxpZGUyLmxlbmd0aCB8fCBvcHRpb25zLnBlclBhZ2U7XG4gICAgICBjbG9uZXMyID0gYmFzZUNvdW50ICogKG9wdGlvbnMuZHJhZyA/IChvcHRpb25zLmZsaWNrTWF4UGFnZXMgfHwgMSkgKyAxIDogMik7XG4gICAgfVxuICAgIHJldHVybiBjbG9uZXMyO1xuICB9XG4gIHJldHVybiB7XG4gICAgbW91bnQsXG4gICAgZGVzdHJveVxuICB9O1xufVxuXG5mdW5jdGlvbiBNb3ZlKFNwbGlkZTIsIENvbXBvbmVudHMyLCBvcHRpb25zKSB7XG4gIGNvbnN0IHsgb24sIGVtaXQgfSA9IEV2ZW50SW50ZXJmYWNlKFNwbGlkZTIpO1xuICBjb25zdCB7IHNsaWRlU2l6ZSwgZ2V0UGFkZGluZywgdG90YWxTaXplLCBsaXN0U2l6ZSwgc2xpZGVyU2l6ZSB9ID0gQ29tcG9uZW50czIuTGF5b3V0O1xuICBjb25zdCB7IHJlc29sdmUsIG9yaWVudCB9ID0gQ29tcG9uZW50czIuRGlyZWN0aW9uO1xuICBjb25zdCB7IGxpc3QsIHRyYWNrIH0gPSBDb21wb25lbnRzMi5FbGVtZW50cztcbiAgbGV0IFRyYW5zaXRpb247XG4gIGZ1bmN0aW9uIG1vdW50KCkge1xuICAgIFRyYW5zaXRpb24gPSBDb21wb25lbnRzMi5UcmFuc2l0aW9uO1xuICAgIG9uKFtFVkVOVF9NT1VOVEVELCBFVkVOVF9SRVNJWkVELCBFVkVOVF9VUERBVEVELCBFVkVOVF9SRUZSRVNIXSwgcmVwb3NpdGlvbik7XG4gIH1cbiAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICByZW1vdmVBdHRyaWJ1dGUobGlzdCwgXCJzdHlsZVwiKTtcbiAgfVxuICBmdW5jdGlvbiByZXBvc2l0aW9uKCkge1xuICAgIGlmICghaXNCdXN5KCkpIHtcbiAgICAgIENvbXBvbmVudHMyLlNjcm9sbC5jYW5jZWwoKTtcbiAgICAgIGp1bXAoU3BsaWRlMi5pbmRleCk7XG4gICAgICBlbWl0KEVWRU5UX1JFUE9TSVRJT05FRCk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIG1vdmUoZGVzdCwgaW5kZXgsIHByZXYsIGNhbGxiYWNrKSB7XG4gICAgaWYgKCFpc0J1c3koKSkge1xuICAgICAgY29uc3QgeyBzZXQgfSA9IFNwbGlkZTIuc3RhdGU7XG4gICAgICBjb25zdCBwb3NpdGlvbiA9IGdldFBvc2l0aW9uKCk7XG4gICAgICBpZiAoZGVzdCAhPT0gaW5kZXgpIHtcbiAgICAgICAgVHJhbnNpdGlvbi5jYW5jZWwoKTtcbiAgICAgICAgdHJhbnNsYXRlKHNoaWZ0KHBvc2l0aW9uLCBkZXN0ID4gaW5kZXgpLCB0cnVlKTtcbiAgICAgIH1cbiAgICAgIHNldChNT1ZJTkcpO1xuICAgICAgZW1pdChFVkVOVF9NT1ZFLCBpbmRleCwgcHJldiwgZGVzdCk7XG4gICAgICBUcmFuc2l0aW9uLnN0YXJ0KGluZGV4LCAoKSA9PiB7XG4gICAgICAgIHNldChJRExFKTtcbiAgICAgICAgZW1pdChFVkVOVF9NT1ZFRCwgaW5kZXgsIHByZXYsIGRlc3QpO1xuICAgICAgICBpZiAob3B0aW9ucy50cmltU3BhY2UgPT09IFwibW92ZVwiICYmIGRlc3QgIT09IHByZXYgJiYgcG9zaXRpb24gPT09IGdldFBvc2l0aW9uKCkpIHtcbiAgICAgICAgICBDb21wb25lbnRzMi5Db250cm9sbGVyLmdvKGRlc3QgPiBwcmV2ID8gXCI+XCIgOiBcIjxcIiwgZmFsc2UsIGNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24ganVtcChpbmRleCkge1xuICAgIHRyYW5zbGF0ZSh0b1Bvc2l0aW9uKGluZGV4LCB0cnVlKSk7XG4gIH1cbiAgZnVuY3Rpb24gdHJhbnNsYXRlKHBvc2l0aW9uLCBwcmV2ZW50TG9vcCkge1xuICAgIGlmICghU3BsaWRlMi5pcyhGQURFKSkge1xuICAgICAgY29uc3QgZGVzdGluYXRpb24gPSBwcmV2ZW50TG9vcCA/IHBvc2l0aW9uIDogbG9vcChwb3NpdGlvbik7XG4gICAgICBsaXN0LnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUke3Jlc29sdmUoXCJYXCIpfSgke2Rlc3RpbmF0aW9ufXB4KWA7XG4gICAgICBwb3NpdGlvbiAhPT0gZGVzdGluYXRpb24gJiYgZW1pdChFVkVOVF9TSElGVEVEKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gbG9vcChwb3NpdGlvbikge1xuICAgIGlmIChTcGxpZGUyLmlzKExPT1ApKSB7XG4gICAgICBjb25zdCBkaWZmID0gb3JpZW50KHBvc2l0aW9uIC0gZ2V0UG9zaXRpb24oKSk7XG4gICAgICBjb25zdCBleGNlZWRlZE1pbiA9IGV4Y2VlZGVkTGltaXQoZmFsc2UsIHBvc2l0aW9uKSAmJiBkaWZmIDwgMDtcbiAgICAgIGNvbnN0IGV4Y2VlZGVkTWF4ID0gZXhjZWVkZWRMaW1pdCh0cnVlLCBwb3NpdGlvbikgJiYgZGlmZiA+IDA7XG4gICAgICBpZiAoZXhjZWVkZWRNaW4gfHwgZXhjZWVkZWRNYXgpIHtcbiAgICAgICAgcG9zaXRpb24gPSBzaGlmdChwb3NpdGlvbiwgZXhjZWVkZWRNYXgpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcG9zaXRpb247XG4gIH1cbiAgZnVuY3Rpb24gc2hpZnQocG9zaXRpb24sIGJhY2t3YXJkcykge1xuICAgIGNvbnN0IGV4Y2VzcyA9IHBvc2l0aW9uIC0gZ2V0TGltaXQoYmFja3dhcmRzKTtcbiAgICBjb25zdCBzaXplID0gc2xpZGVyU2l6ZSgpO1xuICAgIHBvc2l0aW9uIC09IG9yaWVudChzaXplICogKGNlaWwoYWJzKGV4Y2VzcykgLyBzaXplKSB8fCAxKSkgKiAoYmFja3dhcmRzID8gMSA6IC0xKTtcbiAgICByZXR1cm4gcG9zaXRpb247XG4gIH1cbiAgZnVuY3Rpb24gY2FuY2VsKCkge1xuICAgIHRyYW5zbGF0ZShnZXRQb3NpdGlvbigpKTtcbiAgICBUcmFuc2l0aW9uLmNhbmNlbCgpO1xuICB9XG4gIGZ1bmN0aW9uIHRvSW5kZXgocG9zaXRpb24pIHtcbiAgICBjb25zdCBTbGlkZXMgPSBDb21wb25lbnRzMi5TbGlkZXMuZ2V0KCk7XG4gICAgbGV0IGluZGV4ID0gMDtcbiAgICBsZXQgbWluRGlzdGFuY2UgPSBJbmZpbml0eTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IFNsaWRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3Qgc2xpZGVJbmRleCA9IFNsaWRlc1tpXS5pbmRleDtcbiAgICAgIGNvbnN0IGRpc3RhbmNlID0gYWJzKHRvUG9zaXRpb24oc2xpZGVJbmRleCwgdHJ1ZSkgLSBwb3NpdGlvbik7XG4gICAgICBpZiAoZGlzdGFuY2UgPD0gbWluRGlzdGFuY2UpIHtcbiAgICAgICAgbWluRGlzdGFuY2UgPSBkaXN0YW5jZTtcbiAgICAgICAgaW5kZXggPSBzbGlkZUluZGV4O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuICBmdW5jdGlvbiB0b1Bvc2l0aW9uKGluZGV4LCB0cmltbWluZykge1xuICAgIGNvbnN0IHBvc2l0aW9uID0gb3JpZW50KHRvdGFsU2l6ZShpbmRleCAtIDEpIC0gb2Zmc2V0KGluZGV4KSk7XG4gICAgcmV0dXJuIHRyaW1taW5nID8gdHJpbShwb3NpdGlvbikgOiBwb3NpdGlvbjtcbiAgfVxuICBmdW5jdGlvbiBnZXRQb3NpdGlvbigpIHtcbiAgICBjb25zdCBsZWZ0ID0gcmVzb2x2ZShcImxlZnRcIik7XG4gICAgcmV0dXJuIHJlY3QobGlzdClbbGVmdF0gLSByZWN0KHRyYWNrKVtsZWZ0XSArIG9yaWVudChnZXRQYWRkaW5nKGZhbHNlKSk7XG4gIH1cbiAgZnVuY3Rpb24gdHJpbShwb3NpdGlvbikge1xuICAgIGlmIChvcHRpb25zLnRyaW1TcGFjZSAmJiBTcGxpZGUyLmlzKFNMSURFKSkge1xuICAgICAgcG9zaXRpb24gPSBjbGFtcChwb3NpdGlvbiwgMCwgb3JpZW50KHNsaWRlclNpemUoKSAtIGxpc3RTaXplKCkpKTtcbiAgICB9XG4gICAgcmV0dXJuIHBvc2l0aW9uO1xuICB9XG4gIGZ1bmN0aW9uIG9mZnNldChpbmRleCkge1xuICAgIGNvbnN0IHsgZm9jdXMgfSA9IG9wdGlvbnM7XG4gICAgcmV0dXJuIGZvY3VzID09PSBcImNlbnRlclwiID8gKGxpc3RTaXplKCkgLSBzbGlkZVNpemUoaW5kZXgsIHRydWUpKSAvIDIgOiArZm9jdXMgKiBzbGlkZVNpemUoaW5kZXgpIHx8IDA7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0TGltaXQobWF4KSB7XG4gICAgcmV0dXJuIHRvUG9zaXRpb24obWF4ID8gQ29tcG9uZW50czIuQ29udHJvbGxlci5nZXRFbmQoKSA6IDAsICEhb3B0aW9ucy50cmltU3BhY2UpO1xuICB9XG4gIGZ1bmN0aW9uIGlzQnVzeSgpIHtcbiAgICByZXR1cm4gU3BsaWRlMi5zdGF0ZS5pcyhNT1ZJTkcpICYmIG9wdGlvbnMud2FpdEZvclRyYW5zaXRpb247XG4gIH1cbiAgZnVuY3Rpb24gZXhjZWVkZWRMaW1pdChtYXgsIHBvc2l0aW9uKSB7XG4gICAgcG9zaXRpb24gPSBpc1VuZGVmaW5lZChwb3NpdGlvbikgPyBnZXRQb3NpdGlvbigpIDogcG9zaXRpb247XG4gICAgY29uc3QgZXhjZWVkZWRNaW4gPSBtYXggIT09IHRydWUgJiYgb3JpZW50KHBvc2l0aW9uKSA8IG9yaWVudChnZXRMaW1pdChmYWxzZSkpO1xuICAgIGNvbnN0IGV4Y2VlZGVkTWF4ID0gbWF4ICE9PSBmYWxzZSAmJiBvcmllbnQocG9zaXRpb24pID4gb3JpZW50KGdldExpbWl0KHRydWUpKTtcbiAgICByZXR1cm4gZXhjZWVkZWRNaW4gfHwgZXhjZWVkZWRNYXg7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBtb3VudCxcbiAgICBkZXN0cm95LFxuICAgIG1vdmUsXG4gICAganVtcCxcbiAgICB0cmFuc2xhdGUsXG4gICAgc2hpZnQsXG4gICAgY2FuY2VsLFxuICAgIHRvSW5kZXgsXG4gICAgdG9Qb3NpdGlvbixcbiAgICBnZXRQb3NpdGlvbixcbiAgICBnZXRMaW1pdCxcbiAgICBpc0J1c3ksXG4gICAgZXhjZWVkZWRMaW1pdFxuICB9O1xufVxuXG5mdW5jdGlvbiBDb250cm9sbGVyKFNwbGlkZTIsIENvbXBvbmVudHMyLCBvcHRpb25zKSB7XG4gIGNvbnN0IHsgb24gfSA9IEV2ZW50SW50ZXJmYWNlKFNwbGlkZTIpO1xuICBjb25zdCB7IE1vdmUgfSA9IENvbXBvbmVudHMyO1xuICBjb25zdCB7IGdldFBvc2l0aW9uLCBnZXRMaW1pdCB9ID0gTW92ZTtcbiAgY29uc3QgeyBpc0Vub3VnaCwgZ2V0TGVuZ3RoIH0gPSBDb21wb25lbnRzMi5TbGlkZXM7XG4gIGNvbnN0IGlzTG9vcCA9IFNwbGlkZTIuaXMoTE9PUCk7XG4gIGNvbnN0IGlzU2xpZGUgPSBTcGxpZGUyLmlzKFNMSURFKTtcbiAgbGV0IGN1cnJJbmRleCA9IG9wdGlvbnMuc3RhcnQgfHwgMDtcbiAgbGV0IHByZXZJbmRleCA9IGN1cnJJbmRleDtcbiAgbGV0IHNsaWRlQ291bnQ7XG4gIGxldCBwZXJNb3ZlO1xuICBsZXQgcGVyUGFnZTtcbiAgZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgaW5pdCgpO1xuICAgIG9uKFtFVkVOVF9VUERBVEVELCBFVkVOVF9SRUZSRVNIXSwgaW5pdCwgREVGQVVMVF9FVkVOVF9QUklPUklUWSAtIDEpO1xuICB9XG4gIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgc2xpZGVDb3VudCA9IGdldExlbmd0aCh0cnVlKTtcbiAgICBwZXJNb3ZlID0gb3B0aW9ucy5wZXJNb3ZlO1xuICAgIHBlclBhZ2UgPSBvcHRpb25zLnBlclBhZ2U7XG4gICAgY3VyckluZGV4ID0gY2xhbXAoY3VyckluZGV4LCAwLCBzbGlkZUNvdW50IC0gMSk7XG4gIH1cbiAgZnVuY3Rpb24gZ28oY29udHJvbCwgYWxsb3dTYW1lSW5kZXgsIGNhbGxiYWNrKSB7XG4gICAgY29uc3QgZGVzdCA9IHBhcnNlKGNvbnRyb2wpO1xuICAgIGlmIChvcHRpb25zLnVzZVNjcm9sbCkge1xuICAgICAgc2Nyb2xsKGRlc3QsIHRydWUsIHRydWUsIG9wdGlvbnMuc3BlZWQsIGNhbGxiYWNrKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgaW5kZXggPSBsb29wKGRlc3QpO1xuICAgICAgaWYgKGluZGV4ID4gLTEgJiYgIU1vdmUuaXNCdXN5KCkgJiYgKGFsbG93U2FtZUluZGV4IHx8IGluZGV4ICE9PSBjdXJySW5kZXgpKSB7XG4gICAgICAgIHNldEluZGV4KGluZGV4KTtcbiAgICAgICAgTW92ZS5tb3ZlKGRlc3QsIGluZGV4LCBwcmV2SW5kZXgsIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gc2Nyb2xsKGRlc3RpbmF0aW9uLCB1c2VJbmRleCwgc25hcCwgZHVyYXRpb24sIGNhbGxiYWNrKSB7XG4gICAgY29uc3QgZGVzdCA9IHVzZUluZGV4ID8gZGVzdGluYXRpb24gOiB0b0Rlc3QoZGVzdGluYXRpb24pO1xuICAgIENvbXBvbmVudHMyLlNjcm9sbC5zY3JvbGwodXNlSW5kZXggfHwgc25hcCA/IE1vdmUudG9Qb3NpdGlvbihkZXN0LCB0cnVlKSA6IGRlc3RpbmF0aW9uLCBkdXJhdGlvbiwgKCkgPT4ge1xuICAgICAgc2V0SW5kZXgoTW92ZS50b0luZGV4KE1vdmUuZ2V0UG9zaXRpb24oKSkpO1xuICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soKTtcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBwYXJzZShjb250cm9sKSB7XG4gICAgbGV0IGluZGV4ID0gY3VyckluZGV4O1xuICAgIGlmIChpc1N0cmluZyhjb250cm9sKSkge1xuICAgICAgY29uc3QgWywgaW5kaWNhdG9yLCBudW1iZXJdID0gY29udHJvbC5tYXRjaCgvKFsrXFwtPD5dKShcXGQrKT8vKSB8fCBbXTtcbiAgICAgIGlmIChpbmRpY2F0b3IgPT09IFwiK1wiIHx8IGluZGljYXRvciA9PT0gXCItXCIpIHtcbiAgICAgICAgaW5kZXggPSBjb21wdXRlRGVzdEluZGV4KGN1cnJJbmRleCArICtgJHtpbmRpY2F0b3J9JHsrbnVtYmVyIHx8IDF9YCwgY3VyckluZGV4LCB0cnVlKTtcbiAgICAgIH0gZWxzZSBpZiAoaW5kaWNhdG9yID09PSBcIj5cIikge1xuICAgICAgICBpbmRleCA9IG51bWJlciA/IHRvSW5kZXgoK251bWJlcikgOiBnZXROZXh0KHRydWUpO1xuICAgICAgfSBlbHNlIGlmIChpbmRpY2F0b3IgPT09IFwiPFwiKSB7XG4gICAgICAgIGluZGV4ID0gZ2V0UHJldih0cnVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaW5kZXggPSBpc0xvb3AgPyBjb250cm9sIDogY2xhbXAoY29udHJvbCwgMCwgZ2V0RW5kKCkpO1xuICAgIH1cbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0TmV4dChkZXN0aW5hdGlvbikge1xuICAgIHJldHVybiBnZXRBZGphY2VudChmYWxzZSwgZGVzdGluYXRpb24pO1xuICB9XG4gIGZ1bmN0aW9uIGdldFByZXYoZGVzdGluYXRpb24pIHtcbiAgICByZXR1cm4gZ2V0QWRqYWNlbnQodHJ1ZSwgZGVzdGluYXRpb24pO1xuICB9XG4gIGZ1bmN0aW9uIGdldEFkamFjZW50KHByZXYsIGRlc3RpbmF0aW9uKSB7XG4gICAgY29uc3QgbnVtYmVyID0gcGVyTW92ZSB8fCAoaGFzRm9jdXMoKSA/IDEgOiBwZXJQYWdlKTtcbiAgICBjb25zdCBkZXN0ID0gY29tcHV0ZURlc3RJbmRleChjdXJySW5kZXggKyBudW1iZXIgKiAocHJldiA/IC0xIDogMSksIGN1cnJJbmRleCk7XG4gICAgaWYgKGRlc3QgPT09IC0xICYmIGlzU2xpZGUpIHtcbiAgICAgIGlmICghYXBwcm94aW1hdGVseUVxdWFsKGdldFBvc2l0aW9uKCksIGdldExpbWl0KCFwcmV2KSwgMSkpIHtcbiAgICAgICAgcmV0dXJuIHByZXYgPyAwIDogZ2V0RW5kKCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkZXN0aW5hdGlvbiA/IGRlc3QgOiBsb29wKGRlc3QpO1xuICB9XG4gIGZ1bmN0aW9uIGNvbXB1dGVEZXN0SW5kZXgoZGVzdCwgZnJvbSwgaW5jcmVtZW50YWwpIHtcbiAgICBpZiAoaXNFbm91Z2goKSkge1xuICAgICAgY29uc3QgZW5kID0gZ2V0RW5kKCk7XG4gICAgICBpZiAoZGVzdCA8IDAgfHwgZGVzdCA+IGVuZCkge1xuICAgICAgICBpZiAoYmV0d2VlbigwLCBkZXN0LCBmcm9tLCB0cnVlKSB8fCBiZXR3ZWVuKGVuZCwgZnJvbSwgZGVzdCwgdHJ1ZSkpIHtcbiAgICAgICAgICBkZXN0ID0gdG9JbmRleCh0b1BhZ2UoZGVzdCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChpc0xvb3ApIHtcbiAgICAgICAgICAgIGRlc3QgPSBwZXJNb3ZlIHx8IGhhc0ZvY3VzKCkgPyBkZXN0IDogZGVzdCA8IDAgPyAtKHNsaWRlQ291bnQgJSBwZXJQYWdlIHx8IHBlclBhZ2UpIDogc2xpZGVDb3VudDtcbiAgICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMucmV3aW5kKSB7XG4gICAgICAgICAgICBkZXN0ID0gZGVzdCA8IDAgPyBlbmQgOiAwO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkZXN0ID0gLTE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIWluY3JlbWVudGFsICYmIGRlc3QgIT09IGZyb20pIHtcbiAgICAgICAgICBkZXN0ID0gcGVyTW92ZSA/IGRlc3QgOiB0b0luZGV4KHRvUGFnZShmcm9tKSArIChkZXN0IDwgZnJvbSA/IC0xIDogMSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlc3QgPSAtMTtcbiAgICB9XG4gICAgcmV0dXJuIGRlc3Q7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0RW5kKCkge1xuICAgIGxldCBlbmQgPSBzbGlkZUNvdW50IC0gcGVyUGFnZTtcbiAgICBpZiAoaGFzRm9jdXMoKSB8fCBpc0xvb3AgJiYgcGVyTW92ZSkge1xuICAgICAgZW5kID0gc2xpZGVDb3VudCAtIDE7XG4gICAgfVxuICAgIHJldHVybiBtYXgoZW5kLCAwKTtcbiAgfVxuICBmdW5jdGlvbiBsb29wKGluZGV4KSB7XG4gICAgaWYgKGlzTG9vcCkge1xuICAgICAgcmV0dXJuIGlzRW5vdWdoKCkgPyBpbmRleCAlIHNsaWRlQ291bnQgKyAoaW5kZXggPCAwID8gc2xpZGVDb3VudCA6IDApIDogLTE7XG4gICAgfVxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuICBmdW5jdGlvbiB0b0luZGV4KHBhZ2UpIHtcbiAgICByZXR1cm4gY2xhbXAoaGFzRm9jdXMoKSA/IHBhZ2UgOiBwZXJQYWdlICogcGFnZSwgMCwgZ2V0RW5kKCkpO1xuICB9XG4gIGZ1bmN0aW9uIHRvUGFnZShpbmRleCkge1xuICAgIGlmICghaGFzRm9jdXMoKSkge1xuICAgICAgaW5kZXggPSBiZXR3ZWVuKGluZGV4LCBzbGlkZUNvdW50IC0gcGVyUGFnZSwgc2xpZGVDb3VudCAtIDEpID8gc2xpZGVDb3VudCAtIDEgOiBpbmRleDtcbiAgICAgIGluZGV4ID0gZmxvb3IoaW5kZXggLyBwZXJQYWdlKTtcbiAgICB9XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG4gIGZ1bmN0aW9uIHRvRGVzdChkZXN0aW5hdGlvbikge1xuICAgIGNvbnN0IGNsb3Nlc3QgPSBNb3ZlLnRvSW5kZXgoZGVzdGluYXRpb24pO1xuICAgIHJldHVybiBpc1NsaWRlID8gY2xhbXAoY2xvc2VzdCwgMCwgZ2V0RW5kKCkpIDogY2xvc2VzdDtcbiAgfVxuICBmdW5jdGlvbiBzZXRJbmRleChpbmRleCkge1xuICAgIGlmIChpbmRleCAhPT0gY3VyckluZGV4KSB7XG4gICAgICBwcmV2SW5kZXggPSBjdXJySW5kZXg7XG4gICAgICBjdXJySW5kZXggPSBpbmRleDtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZ2V0SW5kZXgocHJldikge1xuICAgIHJldHVybiBwcmV2ID8gcHJldkluZGV4IDogY3VyckluZGV4O1xuICB9XG4gIGZ1bmN0aW9uIGhhc0ZvY3VzKCkge1xuICAgIHJldHVybiAhaXNVbmRlZmluZWQob3B0aW9ucy5mb2N1cykgfHwgb3B0aW9ucy5pc05hdmlnYXRpb247XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBtb3VudCxcbiAgICBnbyxcbiAgICBzY3JvbGwsXG4gICAgZ2V0TmV4dCxcbiAgICBnZXRQcmV2LFxuICAgIGdldEFkamFjZW50LFxuICAgIGdldEVuZCxcbiAgICBzZXRJbmRleCxcbiAgICBnZXRJbmRleCxcbiAgICB0b0luZGV4LFxuICAgIHRvUGFnZSxcbiAgICB0b0Rlc3QsXG4gICAgaGFzRm9jdXNcbiAgfTtcbn1cblxuY29uc3QgWE1MX05BTUVfU1BBQ0UgPSBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7XG5jb25zdCBQQVRIID0gXCJtMTUuNSAwLjkzMi00LjMgNC4zOCAxNC41IDE0LjYtMTQuNSAxNC41IDQuMyA0LjQgMTQuNi0xNC42IDQuNC00LjMtNC40LTQuNC0xNC42LTE0LjZ6XCI7XG5jb25zdCBTSVpFID0gNDA7XG5cbmZ1bmN0aW9uIEFycm93cyhTcGxpZGUyLCBDb21wb25lbnRzMiwgb3B0aW9ucykge1xuICBjb25zdCB7IG9uLCBiaW5kLCBlbWl0IH0gPSBFdmVudEludGVyZmFjZShTcGxpZGUyKTtcbiAgY29uc3QgeyBjbGFzc2VzLCBpMThuIH0gPSBvcHRpb25zO1xuICBjb25zdCB7IEVsZW1lbnRzLCBDb250cm9sbGVyIH0gPSBDb21wb25lbnRzMjtcbiAgbGV0IHdyYXBwZXIgPSBFbGVtZW50cy5hcnJvd3M7XG4gIGxldCBwcmV2ID0gRWxlbWVudHMucHJldjtcbiAgbGV0IG5leHQgPSBFbGVtZW50cy5uZXh0O1xuICBsZXQgY3JlYXRlZDtcbiAgY29uc3QgYXJyb3dzID0ge307XG4gIGZ1bmN0aW9uIG1vdW50KCkge1xuICAgIGluaXQoKTtcbiAgICBvbihFVkVOVF9VUERBVEVELCBpbml0KTtcbiAgfVxuICBmdW5jdGlvbiBpbml0KCkge1xuICAgIGlmIChvcHRpb25zLmFycm93cykge1xuICAgICAgaWYgKCFwcmV2IHx8ICFuZXh0KSB7XG4gICAgICAgIGNyZWF0ZUFycm93cygpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocHJldiAmJiBuZXh0KSB7XG4gICAgICBpZiAoIWFycm93cy5wcmV2KSB7XG4gICAgICAgIGNvbnN0IHsgaWQgfSA9IEVsZW1lbnRzLnRyYWNrO1xuICAgICAgICBzZXRBdHRyaWJ1dGUocHJldiwgQVJJQV9DT05UUk9MUywgaWQpO1xuICAgICAgICBzZXRBdHRyaWJ1dGUobmV4dCwgQVJJQV9DT05UUk9MUywgaWQpO1xuICAgICAgICBhcnJvd3MucHJldiA9IHByZXY7XG4gICAgICAgIGFycm93cy5uZXh0ID0gbmV4dDtcbiAgICAgICAgbGlzdGVuKCk7XG4gICAgICAgIGVtaXQoRVZFTlRfQVJST1dTX01PVU5URUQsIHByZXYsIG5leHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGlzcGxheSh3cmFwcGVyLCBvcHRpb25zLmFycm93cyA9PT0gZmFsc2UgPyBcIm5vbmVcIiA6IFwiXCIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIGlmIChjcmVhdGVkKSB7XG4gICAgICByZW1vdmUod3JhcHBlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZUF0dHJpYnV0ZShwcmV2LCBBTExfQVRUUklCVVRFUyk7XG4gICAgICByZW1vdmVBdHRyaWJ1dGUobmV4dCwgQUxMX0FUVFJJQlVURVMpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBsaXN0ZW4oKSB7XG4gICAgY29uc3QgeyBnbyB9ID0gQ29udHJvbGxlcjtcbiAgICBvbihbRVZFTlRfTU9VTlRFRCwgRVZFTlRfTU9WRUQsIEVWRU5UX1VQREFURUQsIEVWRU5UX1JFRlJFU0gsIEVWRU5UX1NDUk9MTEVEXSwgdXBkYXRlKTtcbiAgICBiaW5kKG5leHQsIFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgZ28oXCI+XCIsIHRydWUpO1xuICAgIH0pO1xuICAgIGJpbmQocHJldiwgXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICBnbyhcIjxcIiwgdHJ1ZSk7XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gY3JlYXRlQXJyb3dzKCkge1xuICAgIHdyYXBwZXIgPSBjcmVhdGUoXCJkaXZcIiwgY2xhc3Nlcy5hcnJvd3MpO1xuICAgIHByZXYgPSBjcmVhdGVBcnJvdyh0cnVlKTtcbiAgICBuZXh0ID0gY3JlYXRlQXJyb3coZmFsc2UpO1xuICAgIGNyZWF0ZWQgPSB0cnVlO1xuICAgIGFwcGVuZCh3cmFwcGVyLCBbcHJldiwgbmV4dF0pO1xuICAgIGJlZm9yZSh3cmFwcGVyLCBjaGlsZChvcHRpb25zLmFycm93cyA9PT0gXCJzbGlkZXJcIiAmJiBFbGVtZW50cy5zbGlkZXIgfHwgU3BsaWRlMi5yb290KSk7XG4gIH1cbiAgZnVuY3Rpb24gY3JlYXRlQXJyb3cocHJldjIpIHtcbiAgICBjb25zdCBhcnJvdyA9IGA8YnV0dG9uIGNsYXNzPVwiJHtjbGFzc2VzLmFycm93fSAke3ByZXYyID8gY2xhc3Nlcy5wcmV2IDogY2xhc3Nlcy5uZXh0fVwiIHR5cGU9XCJidXR0b25cIj48c3ZnIHhtbG5zPVwiJHtYTUxfTkFNRV9TUEFDRX1cIiB2aWV3Qm94PVwiMCAwICR7U0laRX0gJHtTSVpFfVwiIHdpZHRoPVwiJHtTSVpFfVwiIGhlaWdodD1cIiR7U0laRX1cIj48cGF0aCBkPVwiJHtvcHRpb25zLmFycm93UGF0aCB8fCBQQVRIfVwiIC8+YDtcbiAgICByZXR1cm4gcGFyc2VIdG1sKGFycm93KTtcbiAgfVxuICBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgY29uc3QgaW5kZXggPSBTcGxpZGUyLmluZGV4O1xuICAgIGNvbnN0IHByZXZJbmRleCA9IENvbnRyb2xsZXIuZ2V0UHJldigpO1xuICAgIGNvbnN0IG5leHRJbmRleCA9IENvbnRyb2xsZXIuZ2V0TmV4dCgpO1xuICAgIGNvbnN0IHByZXZMYWJlbCA9IHByZXZJbmRleCA+IC0xICYmIGluZGV4IDwgcHJldkluZGV4ID8gaTE4bi5sYXN0IDogaTE4bi5wcmV2O1xuICAgIGNvbnN0IG5leHRMYWJlbCA9IG5leHRJbmRleCA+IC0xICYmIGluZGV4ID4gbmV4dEluZGV4ID8gaTE4bi5maXJzdCA6IGkxOG4ubmV4dDtcbiAgICBwcmV2LmRpc2FibGVkID0gcHJldkluZGV4IDwgMDtcbiAgICBuZXh0LmRpc2FibGVkID0gbmV4dEluZGV4IDwgMDtcbiAgICBzZXRBdHRyaWJ1dGUocHJldiwgQVJJQV9MQUJFTCwgcHJldkxhYmVsKTtcbiAgICBzZXRBdHRyaWJ1dGUobmV4dCwgQVJJQV9MQUJFTCwgbmV4dExhYmVsKTtcbiAgICBlbWl0KEVWRU5UX0FSUk9XU19VUERBVEVELCBwcmV2LCBuZXh0LCBwcmV2SW5kZXgsIG5leHRJbmRleCk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBhcnJvd3MsXG4gICAgbW91bnQsXG4gICAgZGVzdHJveVxuICB9O1xufVxuXG5jb25zdCBJTlRFUlZBTF9EQVRBX0FUVFJJQlVURSA9IGAke0RBVEFfQVRUUklCVVRFfS1pbnRlcnZhbGA7XG5cbmZ1bmN0aW9uIEF1dG9wbGF5KFNwbGlkZTIsIENvbXBvbmVudHMyLCBvcHRpb25zKSB7XG4gIGNvbnN0IHsgb24sIGJpbmQsIGVtaXQgfSA9IEV2ZW50SW50ZXJmYWNlKFNwbGlkZTIpO1xuICBjb25zdCBpbnRlcnZhbCA9IFJlcXVlc3RJbnRlcnZhbChvcHRpb25zLmludGVydmFsLCBTcGxpZGUyLmdvLmJpbmQoU3BsaWRlMiwgXCI+XCIpLCB1cGRhdGUpO1xuICBjb25zdCB7IGlzUGF1c2VkIH0gPSBpbnRlcnZhbDtcbiAgY29uc3QgeyBFbGVtZW50cyB9ID0gQ29tcG9uZW50czI7XG4gIGxldCBob3ZlcmVkO1xuICBsZXQgZm9jdXNlZDtcbiAgbGV0IHBhdXNlZDtcbiAgZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgY29uc3QgeyBhdXRvcGxheSB9ID0gb3B0aW9ucztcbiAgICBpZiAoYXV0b3BsYXkpIHtcbiAgICAgIGluaXRCdXR0b24odHJ1ZSk7XG4gICAgICBpbml0QnV0dG9uKGZhbHNlKTtcbiAgICAgIGxpc3RlbigpO1xuICAgICAgaWYgKGF1dG9wbGF5ICE9PSBcInBhdXNlXCIpIHtcbiAgICAgICAgcGxheSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBpbml0QnV0dG9uKGZvclBhdXNlKSB7XG4gICAgY29uc3QgcHJvcCA9IGZvclBhdXNlID8gXCJwYXVzZVwiIDogXCJwbGF5XCI7XG4gICAgY29uc3QgYnV0dG9uID0gRWxlbWVudHNbcHJvcF07XG4gICAgaWYgKGJ1dHRvbikge1xuICAgICAgc2V0QXR0cmlidXRlKGJ1dHRvbiwgQVJJQV9DT05UUk9MUywgRWxlbWVudHMudHJhY2suaWQpO1xuICAgICAgc2V0QXR0cmlidXRlKGJ1dHRvbiwgQVJJQV9MQUJFTCwgb3B0aW9ucy5pMThuW3Byb3BdKTtcbiAgICAgIGJpbmQoYnV0dG9uLCBcImNsaWNrXCIsIGZvclBhdXNlID8gcGF1c2UgOiBwbGF5KTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gbGlzdGVuKCkge1xuICAgIGNvbnN0IHsgcm9vdCB9ID0gRWxlbWVudHM7XG4gICAgaWYgKG9wdGlvbnMucGF1c2VPbkhvdmVyKSB7XG4gICAgICBiaW5kKHJvb3QsIFwibW91c2VlbnRlciBtb3VzZWxlYXZlXCIsIChlKSA9PiB7XG4gICAgICAgIGhvdmVyZWQgPSBlLnR5cGUgPT09IFwibW91c2VlbnRlclwiO1xuICAgICAgICBhdXRvVG9nZ2xlKCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMucGF1c2VPbkZvY3VzKSB7XG4gICAgICBiaW5kKHJvb3QsIFwiZm9jdXNpbiBmb2N1c291dFwiLCAoZSkgPT4ge1xuICAgICAgICBmb2N1c2VkID0gZS50eXBlID09PSBcImZvY3VzaW5cIjtcbiAgICAgICAgYXV0b1RvZ2dsZSgpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIG9uKFtFVkVOVF9NT1ZFLCBFVkVOVF9TQ1JPTEwsIEVWRU5UX1JFRlJFU0hdLCBpbnRlcnZhbC5yZXdpbmQpO1xuICAgIG9uKEVWRU5UX01PVkUsIHVwZGF0ZUludGVydmFsKTtcbiAgfVxuICBmdW5jdGlvbiBwbGF5KCkge1xuICAgIGlmIChpc1BhdXNlZCgpICYmIENvbXBvbmVudHMyLlNsaWRlcy5pc0Vub3VnaCgpKSB7XG4gICAgICBpbnRlcnZhbC5zdGFydCghb3B0aW9ucy5yZXNldFByb2dyZXNzKTtcbiAgICAgIGZvY3VzZWQgPSBob3ZlcmVkID0gcGF1c2VkID0gZmFsc2U7XG4gICAgICBlbWl0KEVWRU5UX0FVVE9QTEFZX1BMQVkpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBwYXVzZShtYW51YWwgPSB0cnVlKSB7XG4gICAgaWYgKCFpc1BhdXNlZCgpKSB7XG4gICAgICBpbnRlcnZhbC5wYXVzZSgpO1xuICAgICAgZW1pdChFVkVOVF9BVVRPUExBWV9QQVVTRSk7XG4gICAgfVxuICAgIHBhdXNlZCA9IG1hbnVhbDtcbiAgfVxuICBmdW5jdGlvbiBhdXRvVG9nZ2xlKCkge1xuICAgIGlmICghcGF1c2VkKSB7XG4gICAgICBpZiAoIWhvdmVyZWQgJiYgIWZvY3VzZWQpIHtcbiAgICAgICAgcGxheSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGF1c2UoZmFsc2UpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBmdW5jdGlvbiB1cGRhdGUocmF0ZSkge1xuICAgIGNvbnN0IHsgYmFyIH0gPSBFbGVtZW50cztcbiAgICBiYXIgJiYgc3R5bGUoYmFyLCBcIndpZHRoXCIsIGAke3JhdGUgKiAxMDB9JWApO1xuICAgIGVtaXQoRVZFTlRfQVVUT1BMQVlfUExBWUlORywgcmF0ZSk7XG4gIH1cbiAgZnVuY3Rpb24gdXBkYXRlSW50ZXJ2YWwoKSB7XG4gICAgY29uc3QgU2xpZGUgPSBDb21wb25lbnRzMi5TbGlkZXMuZ2V0QXQoU3BsaWRlMi5pbmRleCk7XG4gICAgaW50ZXJ2YWwuc2V0KFNsaWRlICYmICtnZXRBdHRyaWJ1dGUoU2xpZGUuc2xpZGUsIElOVEVSVkFMX0RBVEFfQVRUUklCVVRFKSB8fCBvcHRpb25zLmludGVydmFsKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIG1vdW50LFxuICAgIGRlc3Ryb3k6IGludGVydmFsLmNhbmNlbCxcbiAgICBwbGF5LFxuICAgIHBhdXNlLFxuICAgIGlzUGF1c2VkXG4gIH07XG59XG5cbmZ1bmN0aW9uIENvdmVyKFNwbGlkZTIsIENvbXBvbmVudHMyLCBvcHRpb25zKSB7XG4gIGNvbnN0IHsgb24gfSA9IEV2ZW50SW50ZXJmYWNlKFNwbGlkZTIpO1xuICBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICBpZiAob3B0aW9ucy5jb3Zlcikge1xuICAgICAgb24oRVZFTlRfTEFaWUxPQURfTE9BREVELCAoaW1nLCBTbGlkZSkgPT4ge1xuICAgICAgICB0b2dnbGUodHJ1ZSwgaW1nLCBTbGlkZSk7XG4gICAgICB9KTtcbiAgICAgIG9uKFtFVkVOVF9NT1VOVEVELCBFVkVOVF9VUERBVEVELCBFVkVOVF9SRUZSRVNIXSwgYXBwbHkuYmluZChudWxsLCB0cnVlKSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgYXBwbHkoZmFsc2UpO1xuICB9XG4gIGZ1bmN0aW9uIGFwcGx5KGNvdmVyKSB7XG4gICAgQ29tcG9uZW50czIuU2xpZGVzLmZvckVhY2goKFNsaWRlKSA9PiB7XG4gICAgICBjb25zdCBpbWcgPSBjaGlsZChTbGlkZS5jb250YWluZXIgfHwgU2xpZGUuc2xpZGUsIFwiaW1nXCIpO1xuICAgICAgaWYgKGltZyAmJiBpbWcuc3JjKSB7XG4gICAgICAgIHRvZ2dsZShjb3ZlciwgaW1nLCBTbGlkZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gdG9nZ2xlKGNvdmVyLCBpbWcsIFNsaWRlKSB7XG4gICAgU2xpZGUuc3R5bGUoXCJiYWNrZ3JvdW5kXCIsIGNvdmVyID8gYGNlbnRlci9jb3ZlciBuby1yZXBlYXQgdXJsKFwiJHtpbWcuc3JjfVwiKWAgOiBcIlwiLCB0cnVlKTtcbiAgICBkaXNwbGF5KGltZywgY292ZXIgPyBcIm5vbmVcIiA6IFwiXCIpO1xuICB9XG4gIHJldHVybiB7XG4gICAgbW91bnQsXG4gICAgZGVzdHJveVxuICB9O1xufVxuXG5jb25zdCBCT1VOQ0VfRElGRl9USFJFU0hPTEQgPSAxMDtcbmNvbnN0IEJPVU5DRV9EVVJBVElPTiA9IDYwMDtcbmNvbnN0IEZSSUNUSU9OX0ZBQ1RPUiA9IDAuNjtcbmNvbnN0IEJBU0VfVkVMT0NJVFkgPSAxLjU7XG5jb25zdCBNSU5fRFVSQVRJT04gPSA4MDA7XG5cbmZ1bmN0aW9uIFNjcm9sbChTcGxpZGUyLCBDb21wb25lbnRzMiwgb3B0aW9ucykge1xuICBjb25zdCB7IG9uLCBlbWl0IH0gPSBFdmVudEludGVyZmFjZShTcGxpZGUyKTtcbiAgY29uc3QgeyBNb3ZlIH0gPSBDb21wb25lbnRzMjtcbiAgY29uc3QgeyBnZXRQb3NpdGlvbiwgZ2V0TGltaXQsIGV4Y2VlZGVkTGltaXQgfSA9IE1vdmU7XG4gIGxldCBpbnRlcnZhbDtcbiAgbGV0IHNjcm9sbENhbGxiYWNrO1xuICBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICBvbihFVkVOVF9NT1ZFLCBjbGVhcik7XG4gICAgb24oW0VWRU5UX1VQREFURUQsIEVWRU5UX1JFRlJFU0hdLCBjYW5jZWwpO1xuICB9XG4gIGZ1bmN0aW9uIHNjcm9sbChkZXN0aW5hdGlvbiwgZHVyYXRpb24sIGNhbGxiYWNrLCBzdXBwcmVzc0NvbnN0cmFpbnQpIHtcbiAgICBjb25zdCBzdGFydCA9IGdldFBvc2l0aW9uKCk7XG4gICAgbGV0IGZyaWN0aW9uID0gMTtcbiAgICBkdXJhdGlvbiA9IGR1cmF0aW9uIHx8IGNvbXB1dGVEdXJhdGlvbihhYnMoZGVzdGluYXRpb24gLSBzdGFydCkpO1xuICAgIHNjcm9sbENhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgY2xlYXIoKTtcbiAgICBpbnRlcnZhbCA9IFJlcXVlc3RJbnRlcnZhbChkdXJhdGlvbiwgb25TY3JvbGxlZCwgKHJhdGUpID0+IHtcbiAgICAgIGNvbnN0IHBvc2l0aW9uID0gZ2V0UG9zaXRpb24oKTtcbiAgICAgIGNvbnN0IHRhcmdldCA9IHN0YXJ0ICsgKGRlc3RpbmF0aW9uIC0gc3RhcnQpICogZWFzaW5nKHJhdGUpO1xuICAgICAgY29uc3QgZGlmZiA9ICh0YXJnZXQgLSBnZXRQb3NpdGlvbigpKSAqIGZyaWN0aW9uO1xuICAgICAgTW92ZS50cmFuc2xhdGUocG9zaXRpb24gKyBkaWZmKTtcbiAgICAgIGlmIChTcGxpZGUyLmlzKFNMSURFKSAmJiAhc3VwcHJlc3NDb25zdHJhaW50ICYmIGV4Y2VlZGVkTGltaXQoKSkge1xuICAgICAgICBmcmljdGlvbiAqPSBGUklDVElPTl9GQUNUT1I7XG4gICAgICAgIGlmIChhYnMoZGlmZikgPCBCT1VOQ0VfRElGRl9USFJFU0hPTEQpIHtcbiAgICAgICAgICBib3VuY2UoZXhjZWVkZWRMaW1pdChmYWxzZSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgMSk7XG4gICAgZW1pdChFVkVOVF9TQ1JPTEwpO1xuICAgIGludGVydmFsLnN0YXJ0KCk7XG4gIH1cbiAgZnVuY3Rpb24gYm91bmNlKGJhY2t3YXJkcykge1xuICAgIHNjcm9sbChnZXRMaW1pdCghYmFja3dhcmRzKSwgQk9VTkNFX0RVUkFUSU9OLCBudWxsLCB0cnVlKTtcbiAgfVxuICBmdW5jdGlvbiBvblNjcm9sbGVkKCkge1xuICAgIGNvbnN0IHBvc2l0aW9uID0gZ2V0UG9zaXRpb24oKTtcbiAgICBjb25zdCBpbmRleCA9IE1vdmUudG9JbmRleChwb3NpdGlvbik7XG4gICAgaWYgKCFiZXR3ZWVuKGluZGV4LCAwLCBTcGxpZGUyLmxlbmd0aCAtIDEpKSB7XG4gICAgICBNb3ZlLnRyYW5zbGF0ZShNb3ZlLnNoaWZ0KHBvc2l0aW9uLCBpbmRleCA+IDApLCB0cnVlKTtcbiAgICB9XG4gICAgc2Nyb2xsQ2FsbGJhY2sgJiYgc2Nyb2xsQ2FsbGJhY2soKTtcbiAgICBlbWl0KEVWRU5UX1NDUk9MTEVEKTtcbiAgfVxuICBmdW5jdGlvbiBjb21wdXRlRHVyYXRpb24oZGlzdGFuY2UpIHtcbiAgICByZXR1cm4gbWF4KGRpc3RhbmNlIC8gQkFTRV9WRUxPQ0lUWSwgTUlOX0RVUkFUSU9OKTtcbiAgfVxuICBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICBpZiAoaW50ZXJ2YWwpIHtcbiAgICAgIGludGVydmFsLmNhbmNlbCgpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBjYW5jZWwoKSB7XG4gICAgaWYgKGludGVydmFsICYmICFpbnRlcnZhbC5pc1BhdXNlZCgpKSB7XG4gICAgICBjbGVhcigpO1xuICAgICAgb25TY3JvbGxlZCgpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBlYXNpbmcodCkge1xuICAgIGNvbnN0IHsgZWFzaW5nRnVuYyB9ID0gb3B0aW9ucztcbiAgICByZXR1cm4gZWFzaW5nRnVuYyA/IGVhc2luZ0Z1bmModCkgOiAxIC0gTWF0aC5wb3coMSAtIHQsIDQpO1xuICB9XG4gIHJldHVybiB7XG4gICAgbW91bnQsXG4gICAgZGVzdHJveTogY2xlYXIsXG4gICAgc2Nyb2xsLFxuICAgIGNhbmNlbFxuICB9O1xufVxuXG5jb25zdCBTQ1JPTExfTElTVEVORVJfT1BUSU9OUyA9IHsgcGFzc2l2ZTogZmFsc2UsIGNhcHR1cmU6IHRydWUgfTtcblxuY29uc3QgRlJJQ1RJT04gPSA1O1xuY29uc3QgTE9HX0lOVEVSVkFMID0gMjAwO1xuY29uc3QgUE9JTlRFUl9ET1dOX0VWRU5UUyA9IFwidG91Y2hzdGFydCBtb3VzZWRvd25cIjtcbmNvbnN0IFBPSU5URVJfTU9WRV9FVkVOVFMgPSBcInRvdWNobW92ZSBtb3VzZW1vdmVcIjtcbmNvbnN0IFBPSU5URVJfVVBfRVZFTlRTID0gXCJ0b3VjaGVuZCB0b3VjaGNhbmNlbCBtb3VzZXVwXCI7XG5cbmZ1bmN0aW9uIERyYWcoU3BsaWRlMiwgQ29tcG9uZW50czIsIG9wdGlvbnMpIHtcbiAgY29uc3QgeyBvbiwgZW1pdCwgYmluZCwgdW5iaW5kIH0gPSBFdmVudEludGVyZmFjZShTcGxpZGUyKTtcbiAgY29uc3QgeyBNb3ZlLCBTY3JvbGwsIENvbnRyb2xsZXIgfSA9IENvbXBvbmVudHMyO1xuICBjb25zdCB7IHRyYWNrIH0gPSBDb21wb25lbnRzMi5FbGVtZW50cztcbiAgY29uc3QgeyByZXNvbHZlLCBvcmllbnQgfSA9IENvbXBvbmVudHMyLkRpcmVjdGlvbjtcbiAgY29uc3QgeyBnZXRQb3NpdGlvbiwgZXhjZWVkZWRMaW1pdCB9ID0gTW92ZTtcbiAgbGV0IGJhc2VQb3NpdGlvbjtcbiAgbGV0IGJhc2VFdmVudDtcbiAgbGV0IHByZXZCYXNlRXZlbnQ7XG4gIGxldCBsYXN0RXZlbnQ7XG4gIGxldCBpc0ZyZWU7XG4gIGxldCBkcmFnZ2luZztcbiAgbGV0IGhhc0V4Y2VlZGVkID0gZmFsc2U7XG4gIGxldCBjbGlja1ByZXZlbnRlZDtcbiAgbGV0IGRpc2FibGVkO1xuICBsZXQgdGFyZ2V0O1xuICBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICBiaW5kKHRyYWNrLCBQT0lOVEVSX01PVkVfRVZFTlRTLCBub29wLCBTQ1JPTExfTElTVEVORVJfT1BUSU9OUyk7XG4gICAgYmluZCh0cmFjaywgUE9JTlRFUl9VUF9FVkVOVFMsIG5vb3AsIFNDUk9MTF9MSVNURU5FUl9PUFRJT05TKTtcbiAgICBiaW5kKHRyYWNrLCBQT0lOVEVSX0RPV05fRVZFTlRTLCBvblBvaW50ZXJEb3duLCBTQ1JPTExfTElTVEVORVJfT1BUSU9OUyk7XG4gICAgYmluZCh0cmFjaywgXCJjbGlja1wiLCBvbkNsaWNrLCB7IGNhcHR1cmU6IHRydWUgfSk7XG4gICAgYmluZCh0cmFjaywgXCJkcmFnc3RhcnRcIiwgcHJldmVudCk7XG4gICAgb24oW0VWRU5UX01PVU5URUQsIEVWRU5UX1VQREFURURdLCBpbml0KTtcbiAgfVxuICBmdW5jdGlvbiBpbml0KCkge1xuICAgIGNvbnN0IHsgZHJhZyB9ID0gb3B0aW9ucztcbiAgICBkaXNhYmxlKCFkcmFnKTtcbiAgICBpc0ZyZWUgPSBkcmFnID09PSBcImZyZWVcIjtcbiAgfVxuICBmdW5jdGlvbiBvblBvaW50ZXJEb3duKGUpIHtcbiAgICBpZiAoIWRpc2FibGVkKSB7XG4gICAgICBjb25zdCB7IG5vRHJhZyB9ID0gb3B0aW9ucztcbiAgICAgIGNvbnN0IGlzVG91Y2ggPSBpc1RvdWNoRXZlbnQoZSk7XG4gICAgICBjb25zdCBpc0RyYWdnYWJsZSA9ICFub0RyYWcgfHwgIW1hdGNoZXMoZS50YXJnZXQsIG5vRHJhZyk7XG4gICAgICBpZiAoaXNEcmFnZ2FibGUgJiYgKGlzVG91Y2ggfHwgIWUuYnV0dG9uKSkge1xuICAgICAgICBpZiAoIU1vdmUuaXNCdXN5KCkpIHtcbiAgICAgICAgICB0YXJnZXQgPSBpc1RvdWNoID8gdHJhY2sgOiB3aW5kb3c7XG4gICAgICAgICAgcHJldkJhc2VFdmVudCA9IG51bGw7XG4gICAgICAgICAgbGFzdEV2ZW50ID0gbnVsbDtcbiAgICAgICAgICBjbGlja1ByZXZlbnRlZCA9IGZhbHNlO1xuICAgICAgICAgIGJpbmQodGFyZ2V0LCBQT0lOVEVSX01PVkVfRVZFTlRTLCBvblBvaW50ZXJNb3ZlLCBTQ1JPTExfTElTVEVORVJfT1BUSU9OUyk7XG4gICAgICAgICAgYmluZCh0YXJnZXQsIFBPSU5URVJfVVBfRVZFTlRTLCBvblBvaW50ZXJVcCwgU0NST0xMX0xJU1RFTkVSX09QVElPTlMpO1xuICAgICAgICAgIE1vdmUuY2FuY2VsKCk7XG4gICAgICAgICAgU2Nyb2xsLmNhbmNlbCgpO1xuICAgICAgICAgIHNhdmUoZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJldmVudChlLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBvblBvaW50ZXJNb3ZlKGUpIHtcbiAgICBpZiAoIWxhc3RFdmVudCkge1xuICAgICAgZW1pdChFVkVOVF9EUkFHKTtcbiAgICB9XG4gICAgbGFzdEV2ZW50ID0gZTtcbiAgICBpZiAoZS5jYW5jZWxhYmxlKSB7XG4gICAgICBjb25zdCBkaWZmID0gY29vcmRPZihlKSAtIGNvb3JkT2YoYmFzZUV2ZW50KTtcbiAgICAgIGlmIChkcmFnZ2luZykge1xuICAgICAgICBNb3ZlLnRyYW5zbGF0ZShiYXNlUG9zaXRpb24gKyBjb25zdHJhaW4oZGlmZikpO1xuICAgICAgICBjb25zdCBleHBpcmVkID0gdGltZU9mKGUpIC0gdGltZU9mKGJhc2VFdmVudCkgPiBMT0dfSU5URVJWQUw7XG4gICAgICAgIGNvbnN0IGV4Y2VlZGVkID0gaGFzRXhjZWVkZWQgIT09IChoYXNFeGNlZWRlZCA9IGV4Y2VlZGVkTGltaXQoKSk7XG4gICAgICAgIGlmIChleHBpcmVkIHx8IGV4Y2VlZGVkKSB7XG4gICAgICAgICAgc2F2ZShlKTtcbiAgICAgICAgfVxuICAgICAgICBlbWl0KEVWRU5UX0RSQUdHSU5HKTtcbiAgICAgICAgY2xpY2tQcmV2ZW50ZWQgPSB0cnVlO1xuICAgICAgICBwcmV2ZW50KGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHsgZHJhZ01pblRocmVzaG9sZDogdGhyZXNob2xkcyB9ID0gb3B0aW9ucztcbiAgICAgICAgdGhyZXNob2xkcyA9IGlzT2JqZWN0KHRocmVzaG9sZHMpID8gdGhyZXNob2xkcyA6IHsgbW91c2U6IDAsIHRvdWNoOiArdGhyZXNob2xkcyB8fCAxMCB9O1xuICAgICAgICBkcmFnZ2luZyA9IGFicyhkaWZmKSA+IChpc1RvdWNoRXZlbnQoZSkgPyB0aHJlc2hvbGRzLnRvdWNoIDogdGhyZXNob2xkcy5tb3VzZSk7XG4gICAgICAgIGlmIChpc1NsaWRlckRpcmVjdGlvbigpKSB7XG4gICAgICAgICAgcHJldmVudChlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBvblBvaW50ZXJVcChlKSB7XG4gICAgdW5iaW5kKHRhcmdldCwgUE9JTlRFUl9NT1ZFX0VWRU5UUywgb25Qb2ludGVyTW92ZSk7XG4gICAgdW5iaW5kKHRhcmdldCwgUE9JTlRFUl9VUF9FVkVOVFMsIG9uUG9pbnRlclVwKTtcbiAgICBjb25zdCB7IGluZGV4IH0gPSBTcGxpZGUyO1xuICAgIGlmIChsYXN0RXZlbnQpIHtcbiAgICAgIGlmIChkcmFnZ2luZyB8fCBlLmNhbmNlbGFibGUgJiYgaXNTbGlkZXJEaXJlY3Rpb24oKSkge1xuICAgICAgICBjb25zdCB2ZWxvY2l0eSA9IGNvbXB1dGVWZWxvY2l0eShlKTtcbiAgICAgICAgY29uc3QgZGVzdGluYXRpb24gPSBjb21wdXRlRGVzdGluYXRpb24odmVsb2NpdHkpO1xuICAgICAgICBpZiAoaXNGcmVlKSB7XG4gICAgICAgICAgQ29udHJvbGxlci5zY3JvbGwoZGVzdGluYXRpb24pO1xuICAgICAgICB9IGVsc2UgaWYgKFNwbGlkZTIuaXMoRkFERSkpIHtcbiAgICAgICAgICBDb250cm9sbGVyLmdvKGluZGV4ICsgb3JpZW50KHNpZ24odmVsb2NpdHkpKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgQ29udHJvbGxlci5nbyhDb250cm9sbGVyLnRvRGVzdChkZXN0aW5hdGlvbiksIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIHByZXZlbnQoZSk7XG4gICAgICB9XG4gICAgICBlbWl0KEVWRU5UX0RSQUdHRUQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIWlzRnJlZSAmJiBnZXRQb3NpdGlvbigpICE9PSBNb3ZlLnRvUG9zaXRpb24oaW5kZXgpKSB7XG4gICAgICAgIENvbnRyb2xsZXIuZ28oaW5kZXgsIHRydWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBkcmFnZ2luZyA9IGZhbHNlO1xuICB9XG4gIGZ1bmN0aW9uIHNhdmUoZSkge1xuICAgIHByZXZCYXNlRXZlbnQgPSBiYXNlRXZlbnQ7XG4gICAgYmFzZUV2ZW50ID0gZTtcbiAgICBiYXNlUG9zaXRpb24gPSBnZXRQb3NpdGlvbigpO1xuICB9XG4gIGZ1bmN0aW9uIG9uQ2xpY2soZSkge1xuICAgIGlmICghZGlzYWJsZWQgJiYgY2xpY2tQcmV2ZW50ZWQpIHtcbiAgICAgIHByZXZlbnQoZSwgdHJ1ZSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGlzU2xpZGVyRGlyZWN0aW9uKCkge1xuICAgIGNvbnN0IGRpZmZYID0gYWJzKGNvb3JkT2YobGFzdEV2ZW50KSAtIGNvb3JkT2YoYmFzZUV2ZW50KSk7XG4gICAgY29uc3QgZGlmZlkgPSBhYnMoY29vcmRPZihsYXN0RXZlbnQsIHRydWUpIC0gY29vcmRPZihiYXNlRXZlbnQsIHRydWUpKTtcbiAgICByZXR1cm4gZGlmZlggPiBkaWZmWTtcbiAgfVxuICBmdW5jdGlvbiBjb21wdXRlVmVsb2NpdHkoZSkge1xuICAgIGlmIChTcGxpZGUyLmlzKExPT1ApIHx8ICFoYXNFeGNlZWRlZCkge1xuICAgICAgY29uc3QgYmFzZSA9IGJhc2VFdmVudCA9PT0gbGFzdEV2ZW50ICYmIHByZXZCYXNlRXZlbnQgfHwgYmFzZUV2ZW50O1xuICAgICAgY29uc3QgZGlmZkNvb3JkID0gY29vcmRPZihsYXN0RXZlbnQpIC0gY29vcmRPZihiYXNlKTtcbiAgICAgIGNvbnN0IGRpZmZUaW1lID0gdGltZU9mKGUpIC0gdGltZU9mKGJhc2UpO1xuICAgICAgY29uc3QgaXNGbGljayA9IHRpbWVPZihlKSAtIHRpbWVPZihsYXN0RXZlbnQpIDwgTE9HX0lOVEVSVkFMO1xuICAgICAgaWYgKGRpZmZUaW1lICYmIGlzRmxpY2spIHtcbiAgICAgICAgcmV0dXJuIGRpZmZDb29yZCAvIGRpZmZUaW1lO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfVxuICBmdW5jdGlvbiBjb21wdXRlRGVzdGluYXRpb24odmVsb2NpdHkpIHtcbiAgICByZXR1cm4gZ2V0UG9zaXRpb24oKSArIHNpZ24odmVsb2NpdHkpICogbWluKGFicyh2ZWxvY2l0eSkgKiAob3B0aW9ucy5mbGlja1Bvd2VyIHx8IDYwMCksIGlzRnJlZSA/IEluZmluaXR5IDogQ29tcG9uZW50czIuTGF5b3V0Lmxpc3RTaXplKCkgKiAob3B0aW9ucy5mbGlja01heFBhZ2VzIHx8IDEpKTtcbiAgfVxuICBmdW5jdGlvbiBjb29yZE9mKGUsIG9ydGhvZ29uYWwpIHtcbiAgICByZXR1cm4gKGlzVG91Y2hFdmVudChlKSA/IGUudG91Y2hlc1swXSA6IGUpW2BwYWdlJHtyZXNvbHZlKG9ydGhvZ29uYWwgPyBcIllcIiA6IFwiWFwiKX1gXTtcbiAgfVxuICBmdW5jdGlvbiB0aW1lT2YoZSkge1xuICAgIHJldHVybiBlLnRpbWVTdGFtcDtcbiAgfVxuICBmdW5jdGlvbiBjb25zdHJhaW4oZGlmZikge1xuICAgIHJldHVybiBkaWZmIC8gKGhhc0V4Y2VlZGVkICYmIFNwbGlkZTIuaXMoU0xJREUpID8gRlJJQ1RJT04gOiAxKTtcbiAgfVxuICBmdW5jdGlvbiBpc1RvdWNoRXZlbnQoZSkge1xuICAgIHJldHVybiB0eXBlb2YgVG91Y2hFdmVudCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBlIGluc3RhbmNlb2YgVG91Y2hFdmVudDtcbiAgfVxuICBmdW5jdGlvbiBpc0RyYWdnaW5nKCkge1xuICAgIHJldHVybiBkcmFnZ2luZztcbiAgfVxuICBmdW5jdGlvbiBkaXNhYmxlKHZhbHVlKSB7XG4gICAgZGlzYWJsZWQgPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4ge1xuICAgIG1vdW50LFxuICAgIGRpc2FibGUsXG4gICAgaXNEcmFnZ2luZ1xuICB9O1xufVxuXG5jb25zdCBJRV9BUlJPV19LRVlTID0gW1wiTGVmdFwiLCBcIlJpZ2h0XCIsIFwiVXBcIiwgXCJEb3duXCJdO1xuZnVuY3Rpb24gS2V5Ym9hcmQoU3BsaWRlMiwgQ29tcG9uZW50czIsIG9wdGlvbnMpIHtcbiAgY29uc3QgeyBvbiwgYmluZCwgdW5iaW5kIH0gPSBFdmVudEludGVyZmFjZShTcGxpZGUyKTtcbiAgY29uc3QgeyByb290IH0gPSBDb21wb25lbnRzMi5FbGVtZW50cztcbiAgY29uc3QgeyByZXNvbHZlIH0gPSBDb21wb25lbnRzMi5EaXJlY3Rpb247XG4gIGxldCB0YXJnZXQ7XG4gIGxldCBkaXNhYmxlZDtcbiAgZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgaW5pdCgpO1xuICAgIG9uKEVWRU5UX1VQREFURUQsIG9uVXBkYXRlZCk7XG4gICAgb24oRVZFTlRfTU9WRSwgb25Nb3ZlKTtcbiAgfVxuICBmdW5jdGlvbiBpbml0KCkge1xuICAgIGNvbnN0IHsga2V5Ym9hcmQgPSBcImdsb2JhbFwiIH0gPSBvcHRpb25zO1xuICAgIGlmIChrZXlib2FyZCkge1xuICAgICAgaWYgKGtleWJvYXJkID09PSBcImZvY3VzZWRcIikge1xuICAgICAgICB0YXJnZXQgPSByb290O1xuICAgICAgICBzZXRBdHRyaWJ1dGUocm9vdCwgVEFCX0lOREVYLCAwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhcmdldCA9IHdpbmRvdztcbiAgICAgIH1cbiAgICAgIGJpbmQodGFyZ2V0LCBcImtleWRvd25cIiwgb25LZXlkb3duKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICB1bmJpbmQodGFyZ2V0LCBcImtleWRvd25cIik7XG4gICAgaWYgKGlzSFRNTEVsZW1lbnQodGFyZ2V0KSkge1xuICAgICAgcmVtb3ZlQXR0cmlidXRlKHRhcmdldCwgVEFCX0lOREVYKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gb25Nb3ZlKCkge1xuICAgIGRpc2FibGVkID0gdHJ1ZTtcbiAgICBuZXh0VGljaygoKSA9PiB7XG4gICAgICBkaXNhYmxlZCA9IGZhbHNlO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIG9uVXBkYXRlZCgpIHtcbiAgICBkZXN0cm95KCk7XG4gICAgaW5pdCgpO1xuICB9XG4gIGZ1bmN0aW9uIG9uS2V5ZG93bihlKSB7XG4gICAgaWYgKCFkaXNhYmxlZCkge1xuICAgICAgY29uc3QgeyBrZXkgfSA9IGU7XG4gICAgICBjb25zdCBub3JtYWxpemVkS2V5ID0gaW5jbHVkZXMoSUVfQVJST1dfS0VZUywga2V5KSA/IGBBcnJvdyR7a2V5fWAgOiBrZXk7XG4gICAgICBpZiAobm9ybWFsaXplZEtleSA9PT0gcmVzb2x2ZShcIkFycm93TGVmdFwiKSkge1xuICAgICAgICBTcGxpZGUyLmdvKFwiPFwiKTtcbiAgICAgIH0gZWxzZSBpZiAobm9ybWFsaXplZEtleSA9PT0gcmVzb2x2ZShcIkFycm93UmlnaHRcIikpIHtcbiAgICAgICAgU3BsaWRlMi5nbyhcIj5cIik7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgbW91bnQsXG4gICAgZGVzdHJveVxuICB9O1xufVxuXG5jb25zdCBTUkNfREFUQV9BVFRSSUJVVEUgPSBgJHtEQVRBX0FUVFJJQlVURX0tbGF6eWA7XG5jb25zdCBTUkNTRVRfREFUQV9BVFRSSUJVVEUgPSBgJHtTUkNfREFUQV9BVFRSSUJVVEV9LXNyY3NldGA7XG5jb25zdCBJTUFHRV9TRUxFQ1RPUiA9IGBbJHtTUkNfREFUQV9BVFRSSUJVVEV9XSwgWyR7U1JDU0VUX0RBVEFfQVRUUklCVVRFfV1gO1xuXG5mdW5jdGlvbiBMYXp5TG9hZChTcGxpZGUyLCBDb21wb25lbnRzMiwgb3B0aW9ucykge1xuICBjb25zdCB7IG9uLCBvZmYsIGJpbmQsIGVtaXQgfSA9IEV2ZW50SW50ZXJmYWNlKFNwbGlkZTIpO1xuICBjb25zdCBpc1NlcXVlbnRpYWwgPSBvcHRpb25zLmxhenlMb2FkID09PSBcInNlcXVlbnRpYWxcIjtcbiAgbGV0IGltYWdlcyA9IFtdO1xuICBsZXQgaW5kZXggPSAwO1xuICBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICBpZiAob3B0aW9ucy5sYXp5TG9hZCkge1xuICAgICAgaW5pdCgpO1xuICAgICAgb24oRVZFTlRfUkVGUkVTSCwgcmVmcmVzaCk7XG4gICAgICBpZiAoIWlzU2VxdWVudGlhbCkge1xuICAgICAgICBvbihbRVZFTlRfTU9VTlRFRCwgRVZFTlRfUkVGUkVTSCwgRVZFTlRfTU9WRUQsIEVWRU5UX1NDUk9MTEVEXSwgb2JzZXJ2ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHJlZnJlc2goKSB7XG4gICAgZGVzdHJveSgpO1xuICAgIGluaXQoKTtcbiAgfVxuICBmdW5jdGlvbiBpbml0KCkge1xuICAgIENvbXBvbmVudHMyLlNsaWRlcy5mb3JFYWNoKChfU2xpZGUpID0+IHtcbiAgICAgIHF1ZXJ5QWxsKF9TbGlkZS5zbGlkZSwgSU1BR0VfU0VMRUNUT1IpLmZvckVhY2goKF9pbWcpID0+IHtcbiAgICAgICAgY29uc3Qgc3JjID0gZ2V0QXR0cmlidXRlKF9pbWcsIFNSQ19EQVRBX0FUVFJJQlVURSk7XG4gICAgICAgIGNvbnN0IHNyY3NldCA9IGdldEF0dHJpYnV0ZShfaW1nLCBTUkNTRVRfREFUQV9BVFRSSUJVVEUpO1xuICAgICAgICBpZiAoc3JjICE9PSBfaW1nLnNyYyB8fCBzcmNzZXQgIT09IF9pbWcuc3Jjc2V0KSB7XG4gICAgICAgICAgY29uc3QgY2xhc3NOYW1lID0gb3B0aW9ucy5jbGFzc2VzLnNwaW5uZXI7XG4gICAgICAgICAgY29uc3QgcGFyZW50ID0gX2ltZy5wYXJlbnRFbGVtZW50O1xuICAgICAgICAgIGNvbnN0IF9zcGlubmVyID0gY2hpbGQocGFyZW50LCBgLiR7Y2xhc3NOYW1lfWApIHx8IGNyZWF0ZShcInNwYW5cIiwgY2xhc3NOYW1lLCBwYXJlbnQpO1xuICAgICAgICAgIHNldEF0dHJpYnV0ZShfc3Bpbm5lciwgUk9MRSwgXCJwcmVzZW50YXRpb25cIik7XG4gICAgICAgICAgaW1hZ2VzLnB1c2goeyBfaW1nLCBfU2xpZGUsIHNyYywgc3Jjc2V0LCBfc3Bpbm5lciB9KTtcbiAgICAgICAgICAhX2ltZy5zcmMgJiYgZGlzcGxheShfaW1nLCBcIm5vbmVcIik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlmIChpc1NlcXVlbnRpYWwpIHtcbiAgICAgIGxvYWROZXh0KCk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgaW5kZXggPSAwO1xuICAgIGltYWdlcyA9IFtdO1xuICB9XG4gIGZ1bmN0aW9uIG9ic2VydmUoKSB7XG4gICAgaW1hZ2VzID0gaW1hZ2VzLmZpbHRlcigoZGF0YSkgPT4ge1xuICAgICAgY29uc3QgZGlzdGFuY2UgPSBvcHRpb25zLnBlclBhZ2UgKiAoKG9wdGlvbnMucHJlbG9hZFBhZ2VzIHx8IDEpICsgMSkgLSAxO1xuICAgICAgaWYgKGRhdGEuX1NsaWRlLmlzV2l0aGluKFNwbGlkZTIuaW5kZXgsIGRpc3RhbmNlKSkge1xuICAgICAgICByZXR1cm4gbG9hZChkYXRhKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pO1xuICAgIGlmICghaW1hZ2VzLmxlbmd0aCkge1xuICAgICAgb2ZmKEVWRU5UX01PVkVEKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gbG9hZChkYXRhKSB7XG4gICAgY29uc3QgeyBfaW1nIH0gPSBkYXRhO1xuICAgIGFkZENsYXNzKGRhdGEuX1NsaWRlLnNsaWRlLCBDTEFTU19MT0FESU5HKTtcbiAgICBiaW5kKF9pbWcsIFwibG9hZCBlcnJvclwiLCAoZSkgPT4ge1xuICAgICAgb25Mb2FkKGRhdGEsIGUudHlwZSA9PT0gXCJlcnJvclwiKTtcbiAgICB9KTtcbiAgICBbXCJzcmNcIiwgXCJzcmNzZXRcIl0uZm9yRWFjaCgobmFtZSkgPT4ge1xuICAgICAgaWYgKGRhdGFbbmFtZV0pIHtcbiAgICAgICAgc2V0QXR0cmlidXRlKF9pbWcsIG5hbWUsIGRhdGFbbmFtZV0pO1xuICAgICAgICByZW1vdmVBdHRyaWJ1dGUoX2ltZywgbmFtZSA9PT0gXCJzcmNcIiA/IFNSQ19EQVRBX0FUVFJJQlVURSA6IFNSQ1NFVF9EQVRBX0FUVFJJQlVURSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gb25Mb2FkKGRhdGEsIGVycm9yKSB7XG4gICAgY29uc3QgeyBfU2xpZGUgfSA9IGRhdGE7XG4gICAgcmVtb3ZlQ2xhc3MoX1NsaWRlLnNsaWRlLCBDTEFTU19MT0FESU5HKTtcbiAgICBpZiAoIWVycm9yKSB7XG4gICAgICByZW1vdmUoZGF0YS5fc3Bpbm5lcik7XG4gICAgICBkaXNwbGF5KGRhdGEuX2ltZywgXCJcIik7XG4gICAgICBlbWl0KEVWRU5UX0xBWllMT0FEX0xPQURFRCwgZGF0YS5faW1nLCBfU2xpZGUpO1xuICAgICAgZW1pdChFVkVOVF9SRVNJWkUpO1xuICAgIH1cbiAgICBpZiAoaXNTZXF1ZW50aWFsKSB7XG4gICAgICBsb2FkTmV4dCgpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBsb2FkTmV4dCgpIHtcbiAgICBpZiAoaW5kZXggPCBpbWFnZXMubGVuZ3RoKSB7XG4gICAgICBsb2FkKGltYWdlc1tpbmRleCsrXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgbW91bnQsXG4gICAgZGVzdHJveVxuICB9O1xufVxuXG5mdW5jdGlvbiBQYWdpbmF0aW9uKFNwbGlkZTIsIENvbXBvbmVudHMyLCBvcHRpb25zKSB7XG4gIGNvbnN0IHsgb24sIGVtaXQsIGJpbmQsIHVuYmluZCB9ID0gRXZlbnRJbnRlcmZhY2UoU3BsaWRlMik7XG4gIGNvbnN0IHsgU2xpZGVzLCBFbGVtZW50cywgQ29udHJvbGxlciB9ID0gQ29tcG9uZW50czI7XG4gIGNvbnN0IHsgaGFzRm9jdXMsIGdldEluZGV4IH0gPSBDb250cm9sbGVyO1xuICBjb25zdCBpdGVtcyA9IFtdO1xuICBsZXQgbGlzdDtcbiAgZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgaW5pdCgpO1xuICAgIG9uKFtFVkVOVF9VUERBVEVELCBFVkVOVF9SRUZSRVNIXSwgaW5pdCk7XG4gICAgb24oW0VWRU5UX01PVkUsIEVWRU5UX1NDUk9MTEVEXSwgdXBkYXRlKTtcbiAgfVxuICBmdW5jdGlvbiBpbml0KCkge1xuICAgIGRlc3Ryb3koKTtcbiAgICBpZiAob3B0aW9ucy5wYWdpbmF0aW9uICYmIFNsaWRlcy5pc0Vub3VnaCgpKSB7XG4gICAgICBjcmVhdGVQYWdpbmF0aW9uKCk7XG4gICAgICBlbWl0KEVWRU5UX1BBR0lOQVRJT05fTU9VTlRFRCwgeyBsaXN0LCBpdGVtcyB9LCBnZXRBdChTcGxpZGUyLmluZGV4KSk7XG4gICAgICB1cGRhdGUoKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICBpZiAobGlzdCkge1xuICAgICAgcmVtb3ZlKGxpc3QpO1xuICAgICAgaXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICB1bmJpbmQoaXRlbS5idXR0b24sIFwiY2xpY2tcIik7XG4gICAgICB9KTtcbiAgICAgIGVtcHR5KGl0ZW1zKTtcbiAgICAgIGxpc3QgPSBudWxsO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVQYWdpbmF0aW9uKCkge1xuICAgIGNvbnN0IHsgbGVuZ3RoIH0gPSBTcGxpZGUyO1xuICAgIGNvbnN0IHsgY2xhc3NlcywgaTE4biwgcGVyUGFnZSB9ID0gb3B0aW9ucztcbiAgICBjb25zdCBwYXJlbnQgPSBvcHRpb25zLnBhZ2luYXRpb24gPT09IFwic2xpZGVyXCIgJiYgRWxlbWVudHMuc2xpZGVyIHx8IEVsZW1lbnRzLnJvb3Q7XG4gICAgY29uc3QgbWF4ID0gaGFzRm9jdXMoKSA/IGxlbmd0aCA6IGNlaWwobGVuZ3RoIC8gcGVyUGFnZSk7XG4gICAgbGlzdCA9IGNyZWF0ZShcInVsXCIsIGNsYXNzZXMucGFnaW5hdGlvbiwgcGFyZW50KTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1heDsgaSsrKSB7XG4gICAgICBjb25zdCBsaSA9IGNyZWF0ZShcImxpXCIsIG51bGwsIGxpc3QpO1xuICAgICAgY29uc3QgYnV0dG9uID0gY3JlYXRlKFwiYnV0dG9uXCIsIHsgY2xhc3M6IGNsYXNzZXMucGFnZSwgdHlwZTogXCJidXR0b25cIiB9LCBsaSk7XG4gICAgICBjb25zdCBjb250cm9scyA9IFNsaWRlcy5nZXRJbihpKS5tYXAoKFNsaWRlKSA9PiBTbGlkZS5zbGlkZS5pZCk7XG4gICAgICBjb25zdCB0ZXh0ID0gIWhhc0ZvY3VzKCkgJiYgcGVyUGFnZSA+IDEgPyBpMThuLnBhZ2VYIDogaTE4bi5zbGlkZVg7XG4gICAgICBiaW5kKGJ1dHRvbiwgXCJjbGlja1wiLCBvbkNsaWNrLmJpbmQobnVsbCwgaSkpO1xuICAgICAgc2V0QXR0cmlidXRlKGJ1dHRvbiwgQVJJQV9DT05UUk9MUywgY29udHJvbHMuam9pbihcIiBcIikpO1xuICAgICAgc2V0QXR0cmlidXRlKGJ1dHRvbiwgQVJJQV9MQUJFTCwgZm9ybWF0KHRleHQsIGkgKyAxKSk7XG4gICAgICBpdGVtcy5wdXNoKHsgbGksIGJ1dHRvbiwgcGFnZTogaSB9KTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gb25DbGljayhwYWdlKSB7XG4gICAgQ29udHJvbGxlci5nbyhgPiR7cGFnZX1gLCB0cnVlLCAoKSA9PiB7XG4gICAgICBjb25zdCBTbGlkZSA9IFNsaWRlcy5nZXRBdChDb250cm9sbGVyLnRvSW5kZXgocGFnZSkpO1xuICAgICAgU2xpZGUgJiYgZm9jdXMoU2xpZGUuc2xpZGUpO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGdldEF0KGluZGV4KSB7XG4gICAgcmV0dXJuIGl0ZW1zW0NvbnRyb2xsZXIudG9QYWdlKGluZGV4KV07XG4gIH1cbiAgZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgIGNvbnN0IHByZXYgPSBnZXRBdChnZXRJbmRleCh0cnVlKSk7XG4gICAgY29uc3QgY3VyciA9IGdldEF0KGdldEluZGV4KCkpO1xuICAgIGlmIChwcmV2KSB7XG4gICAgICByZW1vdmVDbGFzcyhwcmV2LmJ1dHRvbiwgQ0xBU1NfQUNUSVZFKTtcbiAgICAgIHJlbW92ZUF0dHJpYnV0ZShwcmV2LmJ1dHRvbiwgQVJJQV9DVVJSRU5UKTtcbiAgICB9XG4gICAgaWYgKGN1cnIpIHtcbiAgICAgIGFkZENsYXNzKGN1cnIuYnV0dG9uLCBDTEFTU19BQ1RJVkUpO1xuICAgICAgc2V0QXR0cmlidXRlKGN1cnIuYnV0dG9uLCBBUklBX0NVUlJFTlQsIHRydWUpO1xuICAgIH1cbiAgICBlbWl0KEVWRU5UX1BBR0lOQVRJT05fVVBEQVRFRCwgeyBsaXN0LCBpdGVtcyB9LCBwcmV2LCBjdXJyKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGl0ZW1zLFxuICAgIG1vdW50LFxuICAgIGRlc3Ryb3ksXG4gICAgZ2V0QXQsXG4gICAgdXBkYXRlXG4gIH07XG59XG5cbmNvbnN0IFRSSUdHRVJfS0VZUyA9IFtcIiBcIiwgXCJFbnRlclwiLCBcIlNwYWNlYmFyXCJdO1xuZnVuY3Rpb24gU3luYyhTcGxpZGUyLCBDb21wb25lbnRzMiwgb3B0aW9ucykge1xuICBjb25zdCB7IGxpc3QgfSA9IENvbXBvbmVudHMyLkVsZW1lbnRzO1xuICBjb25zdCBldmVudHMgPSBbXTtcbiAgZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgU3BsaWRlMi5zcGxpZGVzLmZvckVhY2goKHRhcmdldCkgPT4ge1xuICAgICAgIXRhcmdldC5pc1BhcmVudCAmJiBzeW5jKHRhcmdldC5zcGxpZGUpO1xuICAgIH0pO1xuICAgIGlmIChvcHRpb25zLmlzTmF2aWdhdGlvbikge1xuICAgICAgbmF2aWdhdGUoKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICByZW1vdmVBdHRyaWJ1dGUobGlzdCwgQUxMX0FUVFJJQlVURVMpO1xuICAgIGV2ZW50cy5mb3JFYWNoKChldmVudCkgPT4ge1xuICAgICAgZXZlbnQuZGVzdHJveSgpO1xuICAgIH0pO1xuICAgIGVtcHR5KGV2ZW50cyk7XG4gIH1cbiAgZnVuY3Rpb24gcmVtb3VudCgpIHtcbiAgICBkZXN0cm95KCk7XG4gICAgbW91bnQoKTtcbiAgfVxuICBmdW5jdGlvbiBzeW5jKHNwbGlkZSkge1xuICAgIFtTcGxpZGUyLCBzcGxpZGVdLmZvckVhY2goKGluc3RhbmNlKSA9PiB7XG4gICAgICBjb25zdCBldmVudCA9IEV2ZW50SW50ZXJmYWNlKGluc3RhbmNlKTtcbiAgICAgIGNvbnN0IHRhcmdldCA9IGluc3RhbmNlID09PSBTcGxpZGUyID8gc3BsaWRlIDogU3BsaWRlMjtcbiAgICAgIGV2ZW50Lm9uKEVWRU5UX01PVkUsIChpbmRleCwgcHJldiwgZGVzdCkgPT4ge1xuICAgICAgICB0YXJnZXQuZ28odGFyZ2V0LmlzKExPT1ApID8gZGVzdCA6IGluZGV4KTtcbiAgICAgIH0pO1xuICAgICAgZXZlbnRzLnB1c2goZXZlbnQpO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIG5hdmlnYXRlKCkge1xuICAgIGNvbnN0IGV2ZW50ID0gRXZlbnRJbnRlcmZhY2UoU3BsaWRlMik7XG4gICAgY29uc3QgeyBvbiB9ID0gZXZlbnQ7XG4gICAgb24oRVZFTlRfQ0xJQ0ssIG9uQ2xpY2spO1xuICAgIG9uKEVWRU5UX1NMSURFX0tFWURPV04sIG9uS2V5ZG93bik7XG4gICAgb24oW0VWRU5UX01PVU5URUQsIEVWRU5UX1VQREFURURdLCB1cGRhdGUpO1xuICAgIHNldEF0dHJpYnV0ZShsaXN0LCBST0xFLCBcIm1lbnVcIik7XG4gICAgZXZlbnRzLnB1c2goZXZlbnQpO1xuICAgIGV2ZW50LmVtaXQoRVZFTlRfTkFWSUdBVElPTl9NT1VOVEVELCBTcGxpZGUyLnNwbGlkZXMpO1xuICB9XG4gIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICBzZXRBdHRyaWJ1dGUobGlzdCwgQVJJQV9PUklFTlRBVElPTiwgb3B0aW9ucy5kaXJlY3Rpb24gIT09IFRUQiA/IFwiaG9yaXpvbnRhbFwiIDogbnVsbCk7XG4gIH1cbiAgZnVuY3Rpb24gb25DbGljayhTbGlkZSkge1xuICAgIFNwbGlkZTIuZ28oU2xpZGUuaW5kZXgpO1xuICB9XG4gIGZ1bmN0aW9uIG9uS2V5ZG93bihTbGlkZSwgZSkge1xuICAgIGlmIChpbmNsdWRlcyhUUklHR0VSX0tFWVMsIGUua2V5KSkge1xuICAgICAgb25DbGljayhTbGlkZSk7XG4gICAgICBwcmV2ZW50KGUpO1xuICAgIH1cbiAgfVxuICByZXR1cm4ge1xuICAgIG1vdW50LFxuICAgIGRlc3Ryb3ksXG4gICAgcmVtb3VudFxuICB9O1xufVxuXG5mdW5jdGlvbiBXaGVlbChTcGxpZGUyLCBDb21wb25lbnRzMiwgb3B0aW9ucykge1xuICBjb25zdCB7IGJpbmQgfSA9IEV2ZW50SW50ZXJmYWNlKFNwbGlkZTIpO1xuICBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICBpZiAob3B0aW9ucy53aGVlbCkge1xuICAgICAgYmluZChDb21wb25lbnRzMi5FbGVtZW50cy50cmFjaywgXCJ3aGVlbFwiLCBvbldoZWVsLCBTQ1JPTExfTElTVEVORVJfT1BUSU9OUyk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIG9uV2hlZWwoZSkge1xuICAgIGlmIChlLmNhbmNlbGFibGUpIHtcbiAgICAgIGNvbnN0IHsgZGVsdGFZIH0gPSBlO1xuICAgICAgaWYgKGRlbHRhWSkge1xuICAgICAgICBjb25zdCBiYWNrd2FyZHMgPSBkZWx0YVkgPCAwO1xuICAgICAgICBTcGxpZGUyLmdvKGJhY2t3YXJkcyA/IFwiPFwiIDogXCI+XCIpO1xuICAgICAgICBzaG91bGRQcmV2ZW50KGJhY2t3YXJkcykgJiYgcHJldmVudChlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gc2hvdWxkUHJldmVudChiYWNrd2FyZHMpIHtcbiAgICByZXR1cm4gIW9wdGlvbnMucmVsZWFzZVdoZWVsIHx8IFNwbGlkZTIuc3RhdGUuaXMoTU9WSU5HKSB8fCBDb21wb25lbnRzMi5Db250cm9sbGVyLmdldEFkamFjZW50KGJhY2t3YXJkcykgIT09IC0xO1xuICB9XG4gIHJldHVybiB7XG4gICAgbW91bnRcbiAgfTtcbn1cblxudmFyIENvbXBvbmVudENvbnN0cnVjdG9ycyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgX19wcm90b19fOiBudWxsLFxuICBPcHRpb25zOiBPcHRpb25zLFxuICBEaXJlY3Rpb246IERpcmVjdGlvbixcbiAgRWxlbWVudHM6IEVsZW1lbnRzLFxuICBTbGlkZXM6IFNsaWRlcyxcbiAgTGF5b3V0OiBMYXlvdXQsXG4gIENsb25lczogQ2xvbmVzLFxuICBNb3ZlOiBNb3ZlLFxuICBDb250cm9sbGVyOiBDb250cm9sbGVyLFxuICBBcnJvd3M6IEFycm93cyxcbiAgQXV0b3BsYXk6IEF1dG9wbGF5LFxuICBDb3ZlcjogQ292ZXIsXG4gIFNjcm9sbDogU2Nyb2xsLFxuICBEcmFnOiBEcmFnLFxuICBLZXlib2FyZDogS2V5Ym9hcmQsXG4gIExhenlMb2FkOiBMYXp5TG9hZCxcbiAgUGFnaW5hdGlvbjogUGFnaW5hdGlvbixcbiAgU3luYzogU3luYyxcbiAgV2hlZWw6IFdoZWVsXG59KTtcblxuY29uc3QgSTE4TiA9IHtcbiAgcHJldjogXCJQcmV2aW91cyBzbGlkZVwiLFxuICBuZXh0OiBcIk5leHQgc2xpZGVcIixcbiAgZmlyc3Q6IFwiR28gdG8gZmlyc3Qgc2xpZGVcIixcbiAgbGFzdDogXCJHbyB0byBsYXN0IHNsaWRlXCIsXG4gIHNsaWRlWDogXCJHbyB0byBzbGlkZSAlc1wiLFxuICBwYWdlWDogXCJHbyB0byBwYWdlICVzXCIsXG4gIHBsYXk6IFwiU3RhcnQgYXV0b3BsYXlcIixcbiAgcGF1c2U6IFwiUGF1c2UgYXV0b3BsYXlcIlxufTtcblxuY29uc3QgREVGQVVMVFMgPSB7XG4gIHR5cGU6IFwic2xpZGVcIixcbiAgc3BlZWQ6IDQwMCxcbiAgd2FpdEZvclRyYW5zaXRpb246IHRydWUsXG4gIHBlclBhZ2U6IDEsXG4gIGNsb25lU3RhdHVzOiB0cnVlLFxuICBhcnJvd3M6IHRydWUsXG4gIHBhZ2luYXRpb246IHRydWUsXG4gIGludGVydmFsOiA1ZTMsXG4gIHBhdXNlT25Ib3ZlcjogdHJ1ZSxcbiAgcGF1c2VPbkZvY3VzOiB0cnVlLFxuICByZXNldFByb2dyZXNzOiB0cnVlLFxuICBlYXNpbmc6IFwiY3ViaWMtYmV6aWVyKDAuMjUsIDEsIDAuNSwgMSlcIixcbiAgZHJhZzogdHJ1ZSxcbiAgZGlyZWN0aW9uOiBcImx0clwiLFxuICBzbGlkZUZvY3VzOiB0cnVlLFxuICB0cmltU3BhY2U6IHRydWUsXG4gIGZvY3VzYWJsZU5vZGVzOiBcImEsIGJ1dHRvbiwgdGV4dGFyZWEsIGlucHV0LCBzZWxlY3QsIGlmcmFtZVwiLFxuICBjbGFzc2VzOiBDTEFTU0VTLFxuICBpMThuOiBJMThOXG59O1xuXG5mdW5jdGlvbiBGYWRlKFNwbGlkZTIsIENvbXBvbmVudHMyLCBvcHRpb25zKSB7XG4gIGNvbnN0IHsgb24gfSA9IEV2ZW50SW50ZXJmYWNlKFNwbGlkZTIpO1xuICBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICBvbihbRVZFTlRfTU9VTlRFRCwgRVZFTlRfUkVGUkVTSF0sICgpID0+IHtcbiAgICAgIG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgQ29tcG9uZW50czIuU2xpZGVzLnN0eWxlKFwidHJhbnNpdGlvblwiLCBgb3BhY2l0eSAke29wdGlvbnMuc3BlZWR9bXMgJHtvcHRpb25zLmVhc2luZ31gKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIHN0YXJ0KGluZGV4LCBkb25lKSB7XG4gICAgY29uc3QgeyB0cmFjayB9ID0gQ29tcG9uZW50czIuRWxlbWVudHM7XG4gICAgc3R5bGUodHJhY2ssIFwiaGVpZ2h0XCIsIHVuaXQocmVjdCh0cmFjaykuaGVpZ2h0KSk7XG4gICAgbmV4dFRpY2soKCkgPT4ge1xuICAgICAgZG9uZSgpO1xuICAgICAgc3R5bGUodHJhY2ssIFwiaGVpZ2h0XCIsIFwiXCIpO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiB7XG4gICAgbW91bnQsXG4gICAgc3RhcnQsXG4gICAgY2FuY2VsOiBub29wXG4gIH07XG59XG5cbmZ1bmN0aW9uIFNsaWRlKFNwbGlkZTIsIENvbXBvbmVudHMyLCBvcHRpb25zKSB7XG4gIGNvbnN0IHsgYmluZCB9ID0gRXZlbnRJbnRlcmZhY2UoU3BsaWRlMik7XG4gIGNvbnN0IHsgTW92ZSwgQ29udHJvbGxlciB9ID0gQ29tcG9uZW50czI7XG4gIGNvbnN0IHsgbGlzdCB9ID0gQ29tcG9uZW50czIuRWxlbWVudHM7XG4gIGxldCBlbmRDYWxsYmFjaztcbiAgZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgYmluZChsaXN0LCBcInRyYW5zaXRpb25lbmRcIiwgKGUpID0+IHtcbiAgICAgIGlmIChlLnRhcmdldCA9PT0gbGlzdCAmJiBlbmRDYWxsYmFjaykge1xuICAgICAgICBjYW5jZWwoKTtcbiAgICAgICAgZW5kQ2FsbGJhY2soKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBzdGFydChpbmRleCwgZG9uZSkge1xuICAgIGNvbnN0IGRlc3RpbmF0aW9uID0gTW92ZS50b1Bvc2l0aW9uKGluZGV4LCB0cnVlKTtcbiAgICBjb25zdCBwb3NpdGlvbiA9IE1vdmUuZ2V0UG9zaXRpb24oKTtcbiAgICBjb25zdCBzcGVlZCA9IGdldFNwZWVkKGluZGV4KTtcbiAgICBpZiAoYWJzKGRlc3RpbmF0aW9uIC0gcG9zaXRpb24pID49IDEgJiYgc3BlZWQgPj0gMSkge1xuICAgICAgYXBwbHkoYHRyYW5zZm9ybSAke3NwZWVkfW1zICR7b3B0aW9ucy5lYXNpbmd9YCk7XG4gICAgICBNb3ZlLnRyYW5zbGF0ZShkZXN0aW5hdGlvbiwgdHJ1ZSk7XG4gICAgICBlbmRDYWxsYmFjayA9IGRvbmU7XG4gICAgfSBlbHNlIHtcbiAgICAgIE1vdmUuanVtcChpbmRleCk7XG4gICAgICBkb25lKCk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICBhcHBseShcIlwiKTtcbiAgfVxuICBmdW5jdGlvbiBnZXRTcGVlZChpbmRleCkge1xuICAgIGNvbnN0IHsgcmV3aW5kU3BlZWQgfSA9IG9wdGlvbnM7XG4gICAgaWYgKFNwbGlkZTIuaXMoU0xJREUpICYmIHJld2luZFNwZWVkKSB7XG4gICAgICBjb25zdCBwcmV2ID0gQ29udHJvbGxlci5nZXRJbmRleCh0cnVlKTtcbiAgICAgIGNvbnN0IGVuZCA9IENvbnRyb2xsZXIuZ2V0RW5kKCk7XG4gICAgICBpZiAocHJldiA9PT0gMCAmJiBpbmRleCA+PSBlbmQgfHwgcHJldiA+PSBlbmQgJiYgaW5kZXggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHJld2luZFNwZWVkO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3B0aW9ucy5zcGVlZDtcbiAgfVxuICBmdW5jdGlvbiBhcHBseSh0cmFuc2l0aW9uKSB7XG4gICAgc3R5bGUobGlzdCwgXCJ0cmFuc2l0aW9uXCIsIHRyYW5zaXRpb24pO1xuICB9XG4gIHJldHVybiB7XG4gICAgbW91bnQsXG4gICAgc3RhcnQsXG4gICAgY2FuY2VsXG4gIH07XG59XG5cbmNvbnN0IF9TcGxpZGUgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKHRhcmdldCwgb3B0aW9ucykge1xuICAgIHRoaXMuZXZlbnQgPSBFdmVudEJ1cygpO1xuICAgIHRoaXMuQ29tcG9uZW50cyA9IHt9O1xuICAgIHRoaXMuc3RhdGUgPSBTdGF0ZShDUkVBVEVEKTtcbiAgICB0aGlzLnNwbGlkZXMgPSBbXTtcbiAgICB0aGlzLl9vcHRpb25zID0ge307XG4gICAgdGhpcy5fRXh0ZW5zaW9ucyA9IHt9O1xuICAgIGNvbnN0IHJvb3QgPSBpc1N0cmluZyh0YXJnZXQpID8gcXVlcnkoZG9jdW1lbnQsIHRhcmdldCkgOiB0YXJnZXQ7XG4gICAgYXNzZXJ0KHJvb3QsIGAke3Jvb3R9IGlzIGludmFsaWQuYCk7XG4gICAgdGhpcy5yb290ID0gcm9vdDtcbiAgICBtZXJnZShERUZBVUxUUywgX1NwbGlkZS5kZWZhdWx0cyk7XG4gICAgbWVyZ2UobWVyZ2UodGhpcy5fb3B0aW9ucywgREVGQVVMVFMpLCBvcHRpb25zIHx8IHt9KTtcbiAgfVxuICBtb3VudChFeHRlbnNpb25zLCBUcmFuc2l0aW9uKSB7XG4gICAgY29uc3QgeyBzdGF0ZSwgQ29tcG9uZW50czogQ29tcG9uZW50czIgfSA9IHRoaXM7XG4gICAgYXNzZXJ0KHN0YXRlLmlzKFtDUkVBVEVELCBERVNUUk9ZRURdKSwgXCJBbHJlYWR5IG1vdW50ZWQhXCIpO1xuICAgIHN0YXRlLnNldChDUkVBVEVEKTtcbiAgICB0aGlzLl9Db21wb25lbnRzID0gQ29tcG9uZW50czI7XG4gICAgdGhpcy5fVHJhbnNpdGlvbiA9IFRyYW5zaXRpb24gfHwgdGhpcy5fVHJhbnNpdGlvbiB8fCAodGhpcy5pcyhGQURFKSA/IEZhZGUgOiBTbGlkZSk7XG4gICAgdGhpcy5fRXh0ZW5zaW9ucyA9IEV4dGVuc2lvbnMgfHwgdGhpcy5fRXh0ZW5zaW9ucztcbiAgICBjb25zdCBDb25zdHJ1Y3RvcnMgPSBhc3NpZ24oe30sIENvbXBvbmVudENvbnN0cnVjdG9ycywgdGhpcy5fRXh0ZW5zaW9ucywgeyBUcmFuc2l0aW9uOiB0aGlzLl9UcmFuc2l0aW9uIH0pO1xuICAgIGZvck93bihDb25zdHJ1Y3RvcnMsIChDb21wb25lbnQsIGtleSkgPT4ge1xuICAgICAgY29uc3QgY29tcG9uZW50ID0gQ29tcG9uZW50KHRoaXMsIENvbXBvbmVudHMyLCB0aGlzLl9vcHRpb25zKTtcbiAgICAgIENvbXBvbmVudHMyW2tleV0gPSBjb21wb25lbnQ7XG4gICAgICBjb21wb25lbnQuc2V0dXAgJiYgY29tcG9uZW50LnNldHVwKCk7XG4gICAgfSk7XG4gICAgZm9yT3duKENvbXBvbmVudHMyLCAoY29tcG9uZW50KSA9PiB7XG4gICAgICBjb21wb25lbnQubW91bnQgJiYgY29tcG9uZW50Lm1vdW50KCk7XG4gICAgfSk7XG4gICAgdGhpcy5lbWl0KEVWRU5UX01PVU5URUQpO1xuICAgIGFkZENsYXNzKHRoaXMucm9vdCwgQ0xBU1NfSU5JVElBTElaRUQpO1xuICAgIHN0YXRlLnNldChJRExFKTtcbiAgICB0aGlzLmVtaXQoRVZFTlRfUkVBRFkpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHN5bmMoc3BsaWRlKSB7XG4gICAgdGhpcy5zcGxpZGVzLnB1c2goeyBzcGxpZGUgfSk7XG4gICAgc3BsaWRlLnNwbGlkZXMucHVzaCh7IHNwbGlkZTogdGhpcywgaXNQYXJlbnQ6IHRydWUgfSk7XG4gICAgaWYgKHRoaXMuc3RhdGUuaXMoSURMRSkpIHtcbiAgICAgIHRoaXMuX0NvbXBvbmVudHMuU3luYy5yZW1vdW50KCk7XG4gICAgICBzcGxpZGUuQ29tcG9uZW50cy5TeW5jLnJlbW91bnQoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgZ28oY29udHJvbCkge1xuICAgIHRoaXMuX0NvbXBvbmVudHMuQ29udHJvbGxlci5nbyhjb250cm9sKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBvbihldmVudHMsIGNhbGxiYWNrKSB7XG4gICAgdGhpcy5ldmVudC5vbihldmVudHMsIGNhbGxiYWNrLCBudWxsLCBERUZBVUxUX1VTRVJfRVZFTlRfUFJJT1JJVFkpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIG9mZihldmVudHMpIHtcbiAgICB0aGlzLmV2ZW50Lm9mZihldmVudHMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGVtaXQoZXZlbnQpIHtcbiAgICB0aGlzLmV2ZW50LmVtaXQoZXZlbnQsIC4uLnNsaWNlKGFyZ3VtZW50cywgMSkpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGFkZChzbGlkZXMsIGluZGV4KSB7XG4gICAgdGhpcy5fQ29tcG9uZW50cy5TbGlkZXMuYWRkKHNsaWRlcywgaW5kZXgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHJlbW92ZShtYXRjaGVyKSB7XG4gICAgdGhpcy5fQ29tcG9uZW50cy5TbGlkZXMucmVtb3ZlKG1hdGNoZXIpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGlzKHR5cGUpIHtcbiAgICByZXR1cm4gdGhpcy5fb3B0aW9ucy50eXBlID09PSB0eXBlO1xuICB9XG4gIHJlZnJlc2goKSB7XG4gICAgdGhpcy5lbWl0KEVWRU5UX1JFRlJFU0gpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGRlc3Ryb3koY29tcGxldGVseSA9IHRydWUpIHtcbiAgICBjb25zdCB7IGV2ZW50LCBzdGF0ZSB9ID0gdGhpcztcbiAgICBpZiAoc3RhdGUuaXMoQ1JFQVRFRCkpIHtcbiAgICAgIGV2ZW50Lm9uKEVWRU5UX1JFQURZLCB0aGlzLmRlc3Ryb3kuYmluZCh0aGlzLCBjb21wbGV0ZWx5KSwgdGhpcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvck93bih0aGlzLl9Db21wb25lbnRzLCAoY29tcG9uZW50KSA9PiB7XG4gICAgICAgIGNvbXBvbmVudC5kZXN0cm95ICYmIGNvbXBvbmVudC5kZXN0cm95KGNvbXBsZXRlbHkpO1xuICAgICAgfSwgdHJ1ZSk7XG4gICAgICBldmVudC5lbWl0KEVWRU5UX0RFU1RST1kpO1xuICAgICAgZXZlbnQuZGVzdHJveSgpO1xuICAgICAgY29tcGxldGVseSAmJiBlbXB0eSh0aGlzLnNwbGlkZXMpO1xuICAgICAgc3RhdGUuc2V0KERFU1RST1lFRCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGdldCBvcHRpb25zKCkge1xuICAgIHJldHVybiB0aGlzLl9vcHRpb25zO1xuICB9XG4gIHNldCBvcHRpb25zKG9wdGlvbnMpIHtcbiAgICBjb25zdCB7IF9vcHRpb25zIH0gPSB0aGlzO1xuICAgIG1lcmdlKF9vcHRpb25zLCBvcHRpb25zKTtcbiAgICBpZiAoIXRoaXMuc3RhdGUuaXMoQ1JFQVRFRCkpIHtcbiAgICAgIHRoaXMuZW1pdChFVkVOVF9VUERBVEVELCBfb3B0aW9ucyk7XG4gICAgfVxuICB9XG4gIGdldCBsZW5ndGgoKSB7XG4gICAgcmV0dXJuIHRoaXMuX0NvbXBvbmVudHMuU2xpZGVzLmdldExlbmd0aCh0cnVlKTtcbiAgfVxuICBnZXQgaW5kZXgoKSB7XG4gICAgcmV0dXJuIHRoaXMuX0NvbXBvbmVudHMuQ29udHJvbGxlci5nZXRJbmRleCgpO1xuICB9XG59O1xubGV0IFNwbGlkZSA9IF9TcGxpZGU7XG5TcGxpZGUuZGVmYXVsdHMgPSB7fTtcblNwbGlkZS5TVEFURVMgPSBTVEFURVM7XG5cbmNvbnN0IENMQVNTX1JFTkRFUkVEID0gXCJpcy1yZW5kZXJlZFwiO1xuXG5jb25zdCBSRU5ERVJFUl9ERUZBVUxUX0NPTkZJRyA9IHtcbiAgbGlzdFRhZzogXCJ1bFwiLFxuICBzbGlkZVRhZzogXCJsaVwiXG59O1xuXG5jbGFzcyBTdHlsZSB7XG4gIGNvbnN0cnVjdG9yKGlkLCBvcHRpb25zKSB7XG4gICAgdGhpcy5zdHlsZXMgPSB7fTtcbiAgICB0aGlzLmlkID0gaWQ7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuICBydWxlKHNlbGVjdG9yLCBwcm9wLCB2YWx1ZSwgYnJlYWtwb2ludCkge1xuICAgIGJyZWFrcG9pbnQgPSBicmVha3BvaW50IHx8IFwiZGVmYXVsdFwiO1xuICAgIGNvbnN0IHNlbGVjdG9ycyA9IHRoaXMuc3R5bGVzW2JyZWFrcG9pbnRdID0gdGhpcy5zdHlsZXNbYnJlYWtwb2ludF0gfHwge307XG4gICAgY29uc3Qgc3R5bGVzID0gc2VsZWN0b3JzW3NlbGVjdG9yXSA9IHNlbGVjdG9yc1tzZWxlY3Rvcl0gfHwge307XG4gICAgc3R5bGVzW3Byb3BdID0gdmFsdWU7XG4gIH1cbiAgYnVpbGQoKSB7XG4gICAgbGV0IGNzcyA9IFwiXCI7XG4gICAgaWYgKHRoaXMuc3R5bGVzLmRlZmF1bHQpIHtcbiAgICAgIGNzcyArPSB0aGlzLmJ1aWxkU2VsZWN0b3JzKHRoaXMuc3R5bGVzLmRlZmF1bHQpO1xuICAgIH1cbiAgICBPYmplY3Qua2V5cyh0aGlzLnN0eWxlcykuc29ydCgobiwgbSkgPT4gdGhpcy5vcHRpb25zLm1lZGlhUXVlcnkgPT09IFwibWluXCIgPyArbiAtICttIDogK20gLSArbikuZm9yRWFjaCgoYnJlYWtwb2ludCkgPT4ge1xuICAgICAgaWYgKGJyZWFrcG9pbnQgIT09IFwiZGVmYXVsdFwiKSB7XG4gICAgICAgIGNzcyArPSBgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogJHticmVha3BvaW50fXB4KSB7YDtcbiAgICAgICAgY3NzICs9IHRoaXMuYnVpbGRTZWxlY3RvcnModGhpcy5zdHlsZXNbYnJlYWtwb2ludF0pO1xuICAgICAgICBjc3MgKz0gYH1gO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBjc3M7XG4gIH1cbiAgYnVpbGRTZWxlY3RvcnMoc2VsZWN0b3JzKSB7XG4gICAgbGV0IGNzcyA9IFwiXCI7XG4gICAgZm9yT3duKHNlbGVjdG9ycywgKHN0eWxlcywgc2VsZWN0b3IpID0+IHtcbiAgICAgIHNlbGVjdG9yID0gYCMke3RoaXMuaWR9ICR7c2VsZWN0b3J9YC50cmltKCk7XG4gICAgICBjc3MgKz0gYCR7c2VsZWN0b3J9IHtgO1xuICAgICAgZm9yT3duKHN0eWxlcywgKHZhbHVlLCBwcm9wKSA9PiB7XG4gICAgICAgIGlmICh2YWx1ZSB8fCB2YWx1ZSA9PT0gMCkge1xuICAgICAgICAgIGNzcyArPSBgJHtwcm9wfTogJHt2YWx1ZX07YDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBjc3MgKz0gXCJ9XCI7XG4gICAgfSk7XG4gICAgcmV0dXJuIGNzcztcbiAgfVxufVxuXG5jbGFzcyBTcGxpZGVSZW5kZXJlciB7XG4gIGNvbnN0cnVjdG9yKGNvbnRlbnRzLCBvcHRpb25zLCBjb25maWcsIGRlZmF1bHRzKSB7XG4gICAgdGhpcy5zbGlkZXMgPSBbXTtcbiAgICB0aGlzLm9wdGlvbnMgPSB7fTtcbiAgICB0aGlzLmJyZWFrcG9pbnRzID0gW107XG4gICAgbWVyZ2UoREVGQVVMVFMsIGRlZmF1bHRzIHx8IHt9KTtcbiAgICBtZXJnZShtZXJnZSh0aGlzLm9wdGlvbnMsIERFRkFVTFRTKSwgb3B0aW9ucyB8fCB7fSk7XG4gICAgdGhpcy5jb250ZW50cyA9IGNvbnRlbnRzO1xuICAgIHRoaXMuY29uZmlnID0gYXNzaWduKHt9LCBSRU5ERVJFUl9ERUZBVUxUX0NPTkZJRywgY29uZmlnIHx8IHt9KTtcbiAgICB0aGlzLmlkID0gdGhpcy5jb25maWcuaWQgfHwgdW5pcXVlSWQoXCJzcGxpZGVcIik7XG4gICAgdGhpcy5TdHlsZSA9IG5ldyBTdHlsZSh0aGlzLmlkLCB0aGlzLm9wdGlvbnMpO1xuICAgIHRoaXMuRGlyZWN0aW9uID0gRGlyZWN0aW9uKG51bGwsIG51bGwsIHRoaXMub3B0aW9ucyk7XG4gICAgYXNzZXJ0KHRoaXMuY29udGVudHMubGVuZ3RoLCBcIlByb3ZpZGUgYXQgbGVhc3QgMSBjb250ZW50LlwiKTtcbiAgICB0aGlzLmluaXQoKTtcbiAgfVxuICBzdGF0aWMgY2xlYW4oc3BsaWRlKSB7XG4gICAgY29uc3QgeyBvbiB9ID0gRXZlbnRJbnRlcmZhY2Uoc3BsaWRlKTtcbiAgICBjb25zdCB7IHJvb3QgfSA9IHNwbGlkZTtcbiAgICBjb25zdCBjbG9uZXMgPSBxdWVyeUFsbChyb290LCBgLiR7Q0xBU1NfQ0xPTkV9YCk7XG4gICAgb24oRVZFTlRfTU9VTlRFRCwgKCkgPT4ge1xuICAgICAgcmVtb3ZlKGNoaWxkKHJvb3QsIFwic3R5bGVcIikpO1xuICAgIH0pO1xuICAgIHJlbW92ZShjbG9uZXMpO1xuICB9XG4gIGluaXQoKSB7XG4gICAgdGhpcy5wYXJzZUJyZWFrcG9pbnRzKCk7XG4gICAgdGhpcy5pbml0U2xpZGVzKCk7XG4gICAgdGhpcy5yZWdpc3RlclJvb3RTdHlsZXMoKTtcbiAgICB0aGlzLnJlZ2lzdGVyVHJhY2tTdHlsZXMoKTtcbiAgICB0aGlzLnJlZ2lzdGVyU2xpZGVTdHlsZXMoKTtcbiAgICB0aGlzLnJlZ2lzdGVyTGlzdFN0eWxlcygpO1xuICB9XG4gIGluaXRTbGlkZXMoKSB7XG4gICAgcHVzaCh0aGlzLnNsaWRlcywgdGhpcy5jb250ZW50cy5tYXAoKGNvbnRlbnQsIGluZGV4KSA9PiB7XG4gICAgICBjb250ZW50ID0gaXNTdHJpbmcoY29udGVudCkgPyB7IGh0bWw6IGNvbnRlbnQgfSA6IGNvbnRlbnQ7XG4gICAgICBjb250ZW50LnN0eWxlcyA9IGNvbnRlbnQuc3R5bGVzIHx8IHt9O1xuICAgICAgY29udGVudC5hdHRycyA9IGNvbnRlbnQuYXR0cnMgfHwge307XG4gICAgICB0aGlzLmNvdmVyKGNvbnRlbnQpO1xuICAgICAgY29uc3QgY2xhc3NlcyA9IGAke3RoaXMub3B0aW9ucy5jbGFzc2VzLnNsaWRlfSAke2luZGV4ID09PSAwID8gQ0xBU1NfQUNUSVZFIDogXCJcIn1gO1xuICAgICAgYXNzaWduKGNvbnRlbnQuYXR0cnMsIHtcbiAgICAgICAgY2xhc3M6IGAke2NsYXNzZXN9ICR7Y29udGVudC5hdHRycy5jbGFzcyB8fCBcIlwifWAudHJpbSgpLFxuICAgICAgICBzdHlsZTogdGhpcy5idWlsZFN0eWxlcyhjb250ZW50LnN0eWxlcylcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkpO1xuICAgIGlmICh0aGlzLmlzTG9vcCgpKSB7XG4gICAgICB0aGlzLmdlbmVyYXRlQ2xvbmVzKHRoaXMuc2xpZGVzKTtcbiAgICB9XG4gIH1cbiAgcmVnaXN0ZXJSb290U3R5bGVzKCkge1xuICAgIHRoaXMuYnJlYWtwb2ludHMuZm9yRWFjaCgoW3dpZHRoLCBvcHRpb25zXSkgPT4ge1xuICAgICAgdGhpcy5TdHlsZS5ydWxlKFwiIFwiLCBcIm1heC13aWR0aFwiLCB1bml0KG9wdGlvbnMud2lkdGgpLCB3aWR0aCk7XG4gICAgfSk7XG4gIH1cbiAgcmVnaXN0ZXJUcmFja1N0eWxlcygpIHtcbiAgICBjb25zdCB7IFN0eWxlOiBTdHlsZTIgfSA9IHRoaXM7XG4gICAgY29uc3Qgc2VsZWN0b3IgPSBgLiR7Q0xBU1NfVFJBQ0t9YDtcbiAgICB0aGlzLmJyZWFrcG9pbnRzLmZvckVhY2goKFt3aWR0aCwgb3B0aW9uc10pID0+IHtcbiAgICAgIFN0eWxlMi5ydWxlKHNlbGVjdG9yLCB0aGlzLnJlc29sdmUoXCJwYWRkaW5nTGVmdFwiKSwgdGhpcy5jc3NQYWRkaW5nKG9wdGlvbnMsIGZhbHNlKSwgd2lkdGgpO1xuICAgICAgU3R5bGUyLnJ1bGUoc2VsZWN0b3IsIHRoaXMucmVzb2x2ZShcInBhZGRpbmdSaWdodFwiKSwgdGhpcy5jc3NQYWRkaW5nKG9wdGlvbnMsIHRydWUpLCB3aWR0aCk7XG4gICAgICBTdHlsZTIucnVsZShzZWxlY3RvciwgXCJoZWlnaHRcIiwgdGhpcy5jc3NUcmFja0hlaWdodChvcHRpb25zKSwgd2lkdGgpO1xuICAgIH0pO1xuICB9XG4gIHJlZ2lzdGVyTGlzdFN0eWxlcygpIHtcbiAgICBjb25zdCB7IFN0eWxlOiBTdHlsZTIgfSA9IHRoaXM7XG4gICAgY29uc3Qgc2VsZWN0b3IgPSBgLiR7Q0xBU1NfTElTVH1gO1xuICAgIHRoaXMuYnJlYWtwb2ludHMuZm9yRWFjaCgoW3dpZHRoLCBvcHRpb25zXSkgPT4ge1xuICAgICAgU3R5bGUyLnJ1bGUoc2VsZWN0b3IsIFwidHJhbnNmb3JtXCIsIHRoaXMuYnVpbGRUcmFuc2xhdGUob3B0aW9ucyksIHdpZHRoKTtcbiAgICAgIGlmICghdGhpcy5jc3NTbGlkZUhlaWdodChvcHRpb25zKSkge1xuICAgICAgICBTdHlsZTIucnVsZShzZWxlY3RvciwgXCJhc3BlY3QtcmF0aW9cIiwgdGhpcy5jc3NBc3BlY3RSYXRpbyhvcHRpb25zKSwgd2lkdGgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHJlZ2lzdGVyU2xpZGVTdHlsZXMoKSB7XG4gICAgY29uc3QgeyBTdHlsZTogU3R5bGUyIH0gPSB0aGlzO1xuICAgIGNvbnN0IHNlbGVjdG9yID0gYC4ke0NMQVNTX1NMSURFfWA7XG4gICAgdGhpcy5icmVha3BvaW50cy5mb3JFYWNoKChbd2lkdGgsIG9wdGlvbnNdKSA9PiB7XG4gICAgICBTdHlsZTIucnVsZShzZWxlY3RvciwgXCJ3aWR0aFwiLCB0aGlzLmNzc1NsaWRlV2lkdGgob3B0aW9ucyksIHdpZHRoKTtcbiAgICAgIFN0eWxlMi5ydWxlKHNlbGVjdG9yLCBcImhlaWdodFwiLCB0aGlzLmNzc1NsaWRlSGVpZ2h0KG9wdGlvbnMpIHx8IFwiMTAwJVwiLCB3aWR0aCk7XG4gICAgICBTdHlsZTIucnVsZShzZWxlY3RvciwgdGhpcy5yZXNvbHZlKFwibWFyZ2luUmlnaHRcIiksIHVuaXQob3B0aW9ucy5nYXApIHx8IFwiMHB4XCIsIHdpZHRoKTtcbiAgICAgIFN0eWxlMi5ydWxlKGAke3NlbGVjdG9yfSA+IGltZ2AsIFwiZGlzcGxheVwiLCBvcHRpb25zLmNvdmVyID8gXCJub25lXCIgOiBcImlubGluZVwiLCB3aWR0aCk7XG4gICAgfSk7XG4gIH1cbiAgYnVpbGRUcmFuc2xhdGUob3B0aW9ucykge1xuICAgIGNvbnN0IHsgcmVzb2x2ZSwgb3JpZW50IH0gPSB0aGlzLkRpcmVjdGlvbjtcbiAgICBjb25zdCB2YWx1ZXMgPSBbXTtcbiAgICB2YWx1ZXMucHVzaCh0aGlzLmNzc09mZnNldENsb25lcyhvcHRpb25zKSk7XG4gICAgdmFsdWVzLnB1c2godGhpcy5jc3NPZmZzZXRHYXBzKG9wdGlvbnMpKTtcbiAgICBpZiAodGhpcy5pc0NlbnRlcihvcHRpb25zKSkge1xuICAgICAgdmFsdWVzLnB1c2godGhpcy5idWlsZENzc1ZhbHVlKG9yaWVudCgtNTApLCBcIiVcIikpO1xuICAgICAgdmFsdWVzLnB1c2goLi4udGhpcy5jc3NPZmZzZXRDZW50ZXIob3B0aW9ucykpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWVzLmZpbHRlcihCb29sZWFuKS5tYXAoKHZhbHVlKSA9PiBgdHJhbnNsYXRlJHtyZXNvbHZlKFwiWFwiKX0oJHt2YWx1ZX0pYCkuam9pbihcIiBcIik7XG4gIH1cbiAgY3NzT2Zmc2V0Q2xvbmVzKG9wdGlvbnMpIHtcbiAgICBjb25zdCB7IHJlc29sdmUsIG9yaWVudCB9ID0gdGhpcy5EaXJlY3Rpb247XG4gICAgY29uc3QgY2xvbmVDb3VudCA9IHRoaXMuZ2V0Q2xvbmVDb3VudCgpO1xuICAgIGlmICh0aGlzLmlzRml4ZWRXaWR0aChvcHRpb25zKSkge1xuICAgICAgY29uc3QgeyB2YWx1ZSwgdW5pdDogdW5pdDIgfSA9IHRoaXMucGFyc2VDc3NWYWx1ZShvcHRpb25zW3Jlc29sdmUoXCJmaXhlZFdpZHRoXCIpXSk7XG4gICAgICByZXR1cm4gdGhpcy5idWlsZENzc1ZhbHVlKG9yaWVudCh2YWx1ZSkgKiBjbG9uZUNvdW50LCB1bml0Mik7XG4gICAgfVxuICAgIGNvbnN0IHBlcmNlbnQgPSAxMDAgKiBjbG9uZUNvdW50IC8gb3B0aW9ucy5wZXJQYWdlO1xuICAgIHJldHVybiBgJHtvcmllbnQocGVyY2VudCl9JWA7XG4gIH1cbiAgY3NzT2Zmc2V0Q2VudGVyKG9wdGlvbnMpIHtcbiAgICBjb25zdCB7IHJlc29sdmUsIG9yaWVudCB9ID0gdGhpcy5EaXJlY3Rpb247XG4gICAgaWYgKHRoaXMuaXNGaXhlZFdpZHRoKG9wdGlvbnMpKSB7XG4gICAgICBjb25zdCB7IHZhbHVlLCB1bml0OiB1bml0MiB9ID0gdGhpcy5wYXJzZUNzc1ZhbHVlKG9wdGlvbnNbcmVzb2x2ZShcImZpeGVkV2lkdGhcIildKTtcbiAgICAgIHJldHVybiBbdGhpcy5idWlsZENzc1ZhbHVlKG9yaWVudCh2YWx1ZSAvIDIpLCB1bml0MildO1xuICAgIH1cbiAgICBjb25zdCB2YWx1ZXMgPSBbXTtcbiAgICBjb25zdCB7IHBlclBhZ2UsIGdhcCB9ID0gb3B0aW9ucztcbiAgICB2YWx1ZXMucHVzaChgJHtvcmllbnQoNTAgLyBwZXJQYWdlKX0lYCk7XG4gICAgaWYgKGdhcCkge1xuICAgICAgY29uc3QgeyB2YWx1ZSwgdW5pdDogdW5pdDIgfSA9IHRoaXMucGFyc2VDc3NWYWx1ZShnYXApO1xuICAgICAgY29uc3QgZ2FwT2Zmc2V0ID0gKHZhbHVlIC8gcGVyUGFnZSAtIHZhbHVlKSAvIDI7XG4gICAgICB2YWx1ZXMucHVzaCh0aGlzLmJ1aWxkQ3NzVmFsdWUob3JpZW50KGdhcE9mZnNldCksIHVuaXQyKSk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZXM7XG4gIH1cbiAgY3NzT2Zmc2V0R2FwcyhvcHRpb25zKSB7XG4gICAgY29uc3QgY2xvbmVDb3VudCA9IHRoaXMuZ2V0Q2xvbmVDb3VudCgpO1xuICAgIGlmIChjbG9uZUNvdW50ICYmIG9wdGlvbnMuZ2FwKSB7XG4gICAgICBjb25zdCB7IG9yaWVudCB9ID0gdGhpcy5EaXJlY3Rpb247XG4gICAgICBjb25zdCB7IHZhbHVlLCB1bml0OiB1bml0MiB9ID0gdGhpcy5wYXJzZUNzc1ZhbHVlKG9wdGlvbnMuZ2FwKTtcbiAgICAgIGlmICh0aGlzLmlzRml4ZWRXaWR0aChvcHRpb25zKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5idWlsZENzc1ZhbHVlKG9yaWVudCh2YWx1ZSAqIGNsb25lQ291bnQpLCB1bml0Mik7XG4gICAgICB9XG4gICAgICBjb25zdCB7IHBlclBhZ2UgfSA9IG9wdGlvbnM7XG4gICAgICBjb25zdCBnYXBzID0gY2xvbmVDb3VudCAvIHBlclBhZ2U7XG4gICAgICByZXR1cm4gdGhpcy5idWlsZENzc1ZhbHVlKG9yaWVudChnYXBzICogdmFsdWUpLCB1bml0Mik7XG4gICAgfVxuICAgIHJldHVybiBcIlwiO1xuICB9XG4gIHJlc29sdmUocHJvcCkge1xuICAgIHJldHVybiBjYW1lbFRvS2ViYWIodGhpcy5EaXJlY3Rpb24ucmVzb2x2ZShwcm9wKSk7XG4gIH1cbiAgY3NzUGFkZGluZyhvcHRpb25zLCByaWdodCkge1xuICAgIGNvbnN0IHsgcGFkZGluZyB9ID0gb3B0aW9ucztcbiAgICBjb25zdCBwcm9wID0gdGhpcy5EaXJlY3Rpb24ucmVzb2x2ZShyaWdodCA/IFwicmlnaHRcIiA6IFwibGVmdFwiLCB0cnVlKTtcbiAgICByZXR1cm4gcGFkZGluZyAmJiB1bml0KHBhZGRpbmdbcHJvcF0gfHwgKGlzT2JqZWN0KHBhZGRpbmcpID8gMCA6IHBhZGRpbmcpKSB8fCBcIjBweFwiO1xuICB9XG4gIGNzc1RyYWNrSGVpZ2h0KG9wdGlvbnMpIHtcbiAgICBsZXQgaGVpZ2h0ID0gXCJcIjtcbiAgICBpZiAodGhpcy5pc1ZlcnRpY2FsKCkpIHtcbiAgICAgIGhlaWdodCA9IHRoaXMuY3NzSGVpZ2h0KG9wdGlvbnMpO1xuICAgICAgYXNzZXJ0KGhlaWdodCwgJ1wiaGVpZ2h0XCIgaXMgbWlzc2luZy4nKTtcbiAgICAgIGhlaWdodCA9IGBjYWxjKCR7aGVpZ2h0fSAtICR7dGhpcy5jc3NQYWRkaW5nKG9wdGlvbnMsIGZhbHNlKX0gLSAke3RoaXMuY3NzUGFkZGluZyhvcHRpb25zLCB0cnVlKX0pYDtcbiAgICB9XG4gICAgcmV0dXJuIGhlaWdodDtcbiAgfVxuICBjc3NIZWlnaHQob3B0aW9ucykge1xuICAgIHJldHVybiB1bml0KG9wdGlvbnMuaGVpZ2h0KTtcbiAgfVxuICBjc3NTbGlkZVdpZHRoKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5hdXRvV2lkdGggPyBcIlwiIDogdW5pdChvcHRpb25zLmZpeGVkV2lkdGgpIHx8ICh0aGlzLmlzVmVydGljYWwoKSA/IFwiXCIgOiB0aGlzLmNzc1NsaWRlU2l6ZShvcHRpb25zKSk7XG4gIH1cbiAgY3NzU2xpZGVIZWlnaHQob3B0aW9ucykge1xuICAgIHJldHVybiB1bml0KG9wdGlvbnMuZml4ZWRIZWlnaHQpIHx8ICh0aGlzLmlzVmVydGljYWwoKSA/IG9wdGlvbnMuYXV0b0hlaWdodCA/IFwiXCIgOiB0aGlzLmNzc1NsaWRlU2l6ZShvcHRpb25zKSA6IHRoaXMuY3NzSGVpZ2h0KG9wdGlvbnMpKTtcbiAgfVxuICBjc3NTbGlkZVNpemUob3B0aW9ucykge1xuICAgIGNvbnN0IGdhcCA9IHVuaXQob3B0aW9ucy5nYXApO1xuICAgIHJldHVybiBgY2FsYygoMTAwJSR7Z2FwICYmIGAgKyAke2dhcH1gfSkvJHtvcHRpb25zLnBlclBhZ2UgfHwgMX0ke2dhcCAmJiBgIC0gJHtnYXB9YH0pYDtcbiAgfVxuICBjc3NBc3BlY3RSYXRpbyhvcHRpb25zKSB7XG4gICAgY29uc3QgeyBoZWlnaHRSYXRpbyB9ID0gb3B0aW9ucztcbiAgICByZXR1cm4gaGVpZ2h0UmF0aW8gPyBgJHsxIC8gaGVpZ2h0UmF0aW99YCA6IFwiXCI7XG4gIH1cbiAgYnVpbGRDc3NWYWx1ZSh2YWx1ZSwgdW5pdDIpIHtcbiAgICByZXR1cm4gYCR7dmFsdWV9JHt1bml0Mn1gO1xuICB9XG4gIHBhcnNlQ3NzVmFsdWUodmFsdWUpIHtcbiAgICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgICBjb25zdCBudW1iZXIgPSBwYXJzZUZsb2F0KHZhbHVlKSB8fCAwO1xuICAgICAgY29uc3QgdW5pdDIgPSB2YWx1ZS5yZXBsYWNlKC9cXGQqKFxcLlxcZCopPy8sIFwiXCIpIHx8IFwicHhcIjtcbiAgICAgIHJldHVybiB7IHZhbHVlOiBudW1iZXIsIHVuaXQ6IHVuaXQyIH07XG4gICAgfVxuICAgIHJldHVybiB7IHZhbHVlLCB1bml0OiBcInB4XCIgfTtcbiAgfVxuICBwYXJzZUJyZWFrcG9pbnRzKCkge1xuICAgIGNvbnN0IHsgYnJlYWtwb2ludHMgfSA9IHRoaXMub3B0aW9ucztcbiAgICB0aGlzLmJyZWFrcG9pbnRzLnB1c2goW1wiZGVmYXVsdFwiLCB0aGlzLm9wdGlvbnNdKTtcbiAgICBpZiAoYnJlYWtwb2ludHMpIHtcbiAgICAgIGZvck93bihicmVha3BvaW50cywgKG9wdGlvbnMsIHdpZHRoKSA9PiB7XG4gICAgICAgIHRoaXMuYnJlYWtwb2ludHMucHVzaChbd2lkdGgsIG1lcmdlKG1lcmdlKHt9LCB0aGlzLm9wdGlvbnMpLCBvcHRpb25zKV0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGlzRml4ZWRXaWR0aChvcHRpb25zKSB7XG4gICAgcmV0dXJuICEhb3B0aW9uc1t0aGlzLkRpcmVjdGlvbi5yZXNvbHZlKFwiZml4ZWRXaWR0aFwiKV07XG4gIH1cbiAgaXNMb29wKCkge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnMudHlwZSA9PT0gTE9PUDtcbiAgfVxuICBpc0NlbnRlcihvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMuZm9jdXMgPT09IFwiY2VudGVyXCIpIHtcbiAgICAgIGlmICh0aGlzLmlzTG9vcCgpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMub3B0aW9ucy50eXBlID09PSBTTElERSkge1xuICAgICAgICByZXR1cm4gIXRoaXMub3B0aW9ucy50cmltU3BhY2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpc1ZlcnRpY2FsKCkge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnMuZGlyZWN0aW9uID09PSBUVEI7XG4gIH1cbiAgYnVpbGRDbGFzc2VzKCkge1xuICAgIGNvbnN0IHsgb3B0aW9ucyB9ID0gdGhpcztcbiAgICByZXR1cm4gW1xuICAgICAgQ0xBU1NfUk9PVCxcbiAgICAgIGAke0NMQVNTX1JPT1R9LS0ke29wdGlvbnMudHlwZX1gLFxuICAgICAgYCR7Q0xBU1NfUk9PVH0tLSR7b3B0aW9ucy5kaXJlY3Rpb259YCxcbiAgICAgIG9wdGlvbnMuZHJhZyAmJiBgJHtDTEFTU19ST09UfS0tZHJhZ2dhYmxlYCxcbiAgICAgIG9wdGlvbnMuaXNOYXZpZ2F0aW9uICYmIGAke0NMQVNTX1JPT1R9LS1uYXZgLFxuICAgICAgQ0xBU1NfQUNUSVZFLFxuICAgICAgIXRoaXMuY29uZmlnLmhpZGRlbiAmJiBDTEFTU19SRU5ERVJFRFxuICAgIF0uZmlsdGVyKEJvb2xlYW4pLmpvaW4oXCIgXCIpO1xuICB9XG4gIGJ1aWxkQXR0cnMoYXR0cnMpIHtcbiAgICBsZXQgYXR0ciA9IFwiXCI7XG4gICAgZm9yT3duKGF0dHJzLCAodmFsdWUsIGtleSkgPT4ge1xuICAgICAgYXR0ciArPSB2YWx1ZSA/IGAgJHtjYW1lbFRvS2ViYWIoa2V5KX09XCIke3ZhbHVlfVwiYCA6IFwiXCI7XG4gICAgfSk7XG4gICAgcmV0dXJuIGF0dHIudHJpbSgpO1xuICB9XG4gIGJ1aWxkU3R5bGVzKHN0eWxlcykge1xuICAgIGxldCBzdHlsZSA9IFwiXCI7XG4gICAgZm9yT3duKHN0eWxlcywgKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgIHN0eWxlICs9IGAgJHtjYW1lbFRvS2ViYWIoa2V5KX06JHt2YWx1ZX07YDtcbiAgICB9KTtcbiAgICByZXR1cm4gc3R5bGUudHJpbSgpO1xuICB9XG4gIHJlbmRlclNsaWRlcygpIHtcbiAgICBjb25zdCB7IHNsaWRlVGFnOiB0YWcgfSA9IHRoaXMuY29uZmlnO1xuICAgIHJldHVybiB0aGlzLnNsaWRlcy5tYXAoKGNvbnRlbnQpID0+IHtcbiAgICAgIHJldHVybiBgPCR7dGFnfSAke3RoaXMuYnVpbGRBdHRycyhjb250ZW50LmF0dHJzKX0+JHtjb250ZW50Lmh0bWwgfHwgXCJcIn08LyR7dGFnfT5gO1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH1cbiAgY292ZXIoY29udGVudCkge1xuICAgIGNvbnN0IHsgc3R5bGVzLCBodG1sID0gXCJcIiB9ID0gY29udGVudDtcbiAgICBpZiAodGhpcy5vcHRpb25zLmNvdmVyICYmICF0aGlzLm9wdGlvbnMubGF6eUxvYWQpIHtcbiAgICAgIGNvbnN0IHNyYyA9IGh0bWwubWF0Y2goLzxpbWcuKj9zcmNcXHMqPVxccyooWydcIl0pKC4rPylcXDEuKj8+Lyk7XG4gICAgICBpZiAoc3JjICYmIHNyY1syXSkge1xuICAgICAgICBzdHlsZXMuYmFja2dyb3VuZCA9IGBjZW50ZXIvY292ZXIgbm8tcmVwZWF0IHVybCgnJHtzcmNbMl19JylgO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBnZW5lcmF0ZUNsb25lcyhjb250ZW50cykge1xuICAgIGNvbnN0IHsgY2xhc3NlcyB9ID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IGNvdW50ID0gdGhpcy5nZXRDbG9uZUNvdW50KCk7XG4gICAgY29uc3Qgc2xpZGVzID0gY29udGVudHMuc2xpY2UoKTtcbiAgICB3aGlsZSAoc2xpZGVzLmxlbmd0aCA8IGNvdW50KSB7XG4gICAgICBwdXNoKHNsaWRlcywgc2xpZGVzKTtcbiAgICB9XG4gICAgcHVzaChzbGlkZXMuc2xpY2UoLWNvdW50KS5yZXZlcnNlKCksIHNsaWRlcy5zbGljZSgwLCBjb3VudCkpLmZvckVhY2goKGNvbnRlbnQsIGluZGV4KSA9PiB7XG4gICAgICBjb25zdCBhdHRycyA9IGFzc2lnbih7fSwgY29udGVudC5hdHRycywgeyBjbGFzczogYCR7Y29udGVudC5hdHRycy5jbGFzc30gJHtjbGFzc2VzLmNsb25lfWAgfSk7XG4gICAgICBjb25zdCBjbG9uZSA9IGFzc2lnbih7fSwgY29udGVudCwgeyBhdHRycyB9KTtcbiAgICAgIGluZGV4IDwgY291bnQgPyBjb250ZW50cy51bnNoaWZ0KGNsb25lKSA6IGNvbnRlbnRzLnB1c2goY2xvbmUpO1xuICAgIH0pO1xuICB9XG4gIGdldENsb25lQ291bnQoKSB7XG4gICAgaWYgKHRoaXMuaXNMb29wKCkpIHtcbiAgICAgIGNvbnN0IHsgb3B0aW9ucyB9ID0gdGhpcztcbiAgICAgIGlmIChvcHRpb25zLmNsb25lcykge1xuICAgICAgICByZXR1cm4gb3B0aW9ucy5jbG9uZXM7XG4gICAgICB9XG4gICAgICBjb25zdCBwZXJQYWdlID0gbWF4KC4uLnRoaXMuYnJlYWtwb2ludHMubWFwKChbLCBvcHRpb25zMl0pID0+IG9wdGlvbnMyLnBlclBhZ2UpKTtcbiAgICAgIHJldHVybiBwZXJQYWdlICogKChvcHRpb25zLmZsaWNrTWF4UGFnZXMgfHwgMSkgKyAxKTtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgcmVuZGVyQXJyb3dzKCkge1xuICAgIGxldCBodG1sID0gXCJcIjtcbiAgICBodG1sICs9IGA8ZGl2IGNsYXNzPVwiJHt0aGlzLm9wdGlvbnMuY2xhc3Nlcy5hcnJvd3N9XCI+YDtcbiAgICBodG1sICs9IHRoaXMucmVuZGVyQXJyb3codHJ1ZSk7XG4gICAgaHRtbCArPSB0aGlzLnJlbmRlckFycm93KGZhbHNlKTtcbiAgICBodG1sICs9IGA8L2Rpdj5gO1xuICAgIHJldHVybiBodG1sO1xuICB9XG4gIHJlbmRlckFycm93KHByZXYpIHtcbiAgICBjb25zdCB7IGNsYXNzZXMsIGkxOG4gfSA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCBhdHRycyA9IHtcbiAgICAgIGNsYXNzOiBgJHtjbGFzc2VzLmFycm93fSAke3ByZXYgPyBjbGFzc2VzLnByZXYgOiBjbGFzc2VzLm5leHR9YCxcbiAgICAgIHR5cGU6IFwiYnV0dG9uXCIsXG4gICAgICBhcmlhTGFiZWw6IHByZXYgPyBpMThuLnByZXYgOiBpMThuLm5leHRcbiAgICB9O1xuICAgIHJldHVybiBgPGJ1dHRvbiAke3RoaXMuYnVpbGRBdHRycyhhdHRycyl9PjxzdmcgeG1sbnM9XCIke1hNTF9OQU1FX1NQQUNFfVwiIHZpZXdCb3g9XCIwIDAgJHtTSVpFfSAke1NJWkV9XCIgd2lkdGg9XCIke1NJWkV9XCIgaGVpZ2h0PVwiJHtTSVpFfVwiPjxwYXRoIGQ9XCIke3RoaXMub3B0aW9ucy5hcnJvd1BhdGggfHwgUEFUSH1cIiAvPjwvc3ZnPjwvYnV0dG9uPmA7XG4gIH1cbiAgaHRtbCgpIHtcbiAgICBjb25zdCB7IHJvb3RDbGFzcywgbGlzdFRhZywgYXJyb3dzLCBiZWZvcmVUcmFjaywgYWZ0ZXJUcmFjaywgc2xpZGVyLCBiZWZvcmVTbGlkZXIsIGFmdGVyU2xpZGVyIH0gPSB0aGlzLmNvbmZpZztcbiAgICBsZXQgaHRtbCA9IFwiXCI7XG4gICAgaHRtbCArPSBgPGRpdiBpZD1cIiR7dGhpcy5pZH1cIiBjbGFzcz1cIiR7dGhpcy5idWlsZENsYXNzZXMoKX0gJHtyb290Q2xhc3MgfHwgXCJcIn1cIj5gO1xuICAgIGh0bWwgKz0gYDxzdHlsZT4ke3RoaXMuU3R5bGUuYnVpbGQoKX08L3N0eWxlPmA7XG4gICAgaWYgKHNsaWRlcikge1xuICAgICAgaHRtbCArPSBiZWZvcmVTbGlkZXIgfHwgXCJcIjtcbiAgICAgIGh0bWwgKz0gYDxkaXYgY2xhc3M9XCJzcGxpZGVfX3NsaWRlclwiPmA7XG4gICAgfVxuICAgIGh0bWwgKz0gYmVmb3JlVHJhY2sgfHwgXCJcIjtcbiAgICBpZiAoYXJyb3dzKSB7XG4gICAgICBodG1sICs9IHRoaXMucmVuZGVyQXJyb3dzKCk7XG4gICAgfVxuICAgIGh0bWwgKz0gYDxkaXYgY2xhc3M9XCJzcGxpZGVfX3RyYWNrXCI+YDtcbiAgICBodG1sICs9IGA8JHtsaXN0VGFnfSBjbGFzcz1cInNwbGlkZV9fbGlzdFwiPmA7XG4gICAgaHRtbCArPSB0aGlzLnJlbmRlclNsaWRlcygpO1xuICAgIGh0bWwgKz0gYDwvJHtsaXN0VGFnfT5gO1xuICAgIGh0bWwgKz0gYDwvZGl2PmA7XG4gICAgaHRtbCArPSBhZnRlclRyYWNrIHx8IFwiXCI7XG4gICAgaWYgKHNsaWRlcikge1xuICAgICAgaHRtbCArPSBgPC9kaXY+YDtcbiAgICAgIGh0bWwgKz0gYWZ0ZXJTbGlkZXIgfHwgXCJcIjtcbiAgICB9XG4gICAgaHRtbCArPSBgPC9kaXY+YDtcbiAgICByZXR1cm4gaHRtbDtcbiAgfVxufVxuXG5leHBvcnQgeyBDTEFTU0VTLCBDTEFTU19BQ1RJVkUsIENMQVNTX0FSUk9XLCBDTEFTU19BUlJPV1MsIENMQVNTX0FSUk9XX05FWFQsIENMQVNTX0FSUk9XX1BSRVYsIENMQVNTX0FVVE9QTEFZLCBDTEFTU19DTE9ORSwgQ0xBU1NfQ09OVEFJTkVSLCBDTEFTU19JTklUSUFMSVpFRCwgQ0xBU1NfTElTVCwgQ0xBU1NfTE9BRElORywgQ0xBU1NfTkVYVCwgQ0xBU1NfUEFHSU5BVElPTiwgQ0xBU1NfUEFHSU5BVElPTl9QQUdFLCBDTEFTU19QQVVTRSwgQ0xBU1NfUExBWSwgQ0xBU1NfUFJFViwgQ0xBU1NfUFJPR1JFU1MsIENMQVNTX1BST0dSRVNTX0JBUiwgQ0xBU1NfUk9PVCwgQ0xBU1NfU0xJREUsIENMQVNTX1NMSURFUiwgQ0xBU1NfU1BJTk5FUiwgQ0xBU1NfVFJBQ0ssIENMQVNTX1ZJU0lCTEUsIEVWRU5UX0FDVElWRSwgRVZFTlRfQVJST1dTX01PVU5URUQsIEVWRU5UX0FSUk9XU19VUERBVEVELCBFVkVOVF9BVVRPUExBWV9QQVVTRSwgRVZFTlRfQVVUT1BMQVlfUExBWSwgRVZFTlRfQVVUT1BMQVlfUExBWUlORywgRVZFTlRfQ0xJQ0ssIEVWRU5UX0RFU1RST1ksIEVWRU5UX0RSQUcsIEVWRU5UX0RSQUdHRUQsIEVWRU5UX0RSQUdHSU5HLCBFVkVOVF9ISURERU4sIEVWRU5UX0lOQUNUSVZFLCBFVkVOVF9MQVpZTE9BRF9MT0FERUQsIEVWRU5UX01PVU5URUQsIEVWRU5UX01PVkUsIEVWRU5UX01PVkVELCBFVkVOVF9OQVZJR0FUSU9OX01PVU5URUQsIEVWRU5UX1BBR0lOQVRJT05fTU9VTlRFRCwgRVZFTlRfUEFHSU5BVElPTl9VUERBVEVELCBFVkVOVF9SRUFEWSwgRVZFTlRfUkVGUkVTSCwgRVZFTlRfUkVQT1NJVElPTkVELCBFVkVOVF9SRVNJWkUsIEVWRU5UX1JFU0laRUQsIEVWRU5UX1NDUk9MTCwgRVZFTlRfU0NST0xMRUQsIEVWRU5UX1NISUZURUQsIEVWRU5UX1NMSURFX0tFWURPV04sIEVWRU5UX1VQREFURUQsIEVWRU5UX1ZJU0lCTEUsIEV2ZW50QnVzLCBFdmVudEludGVyZmFjZSwgUmVxdWVzdEludGVydmFsLCBTVEFUVVNfQ0xBU1NFUywgU3BsaWRlLCBTcGxpZGVSZW5kZXJlciwgU3RhdGUsIFRocm90dGxlLCBTcGxpZGUgYXMgZGVmYXVsdCB9O1xuIiwiZXhwb3J0IGVudW0gRGVzaWduU3R5bGUge1xuICBDb3p5ID0gXCJjb3p5XCIsXG4gIEphcGFuZGkgPSBcImphcGFuZGlcIixcbiAgTW9kZXJuID0gXCJtb2Rlcm5cIixcbiAgRnVzaW9uID0gXCJmdXNpb25cIixcbiAgTmVvQ2xhc3NpYyA9IFwibmVvY2xhc3NpY1wiLFxufVxuXG5leHBvcnQgbmFtZXNwYWNlIERlc2lnblN0eWxlIHtcbiAgZXhwb3J0IGZ1bmN0aW9uIGZyb21TdHJpbmcobmFtZTogc3RyaW5nKTogRGVzaWduU3R5bGUge1xuICAgIGlmIChuYW1lID09PSBcImNvenlcIikge1xuICAgICAgcmV0dXJuIERlc2lnblN0eWxlLkNvenk7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSBcImphcGFuZGlcIikge1xuICAgICAgcmV0dXJuIERlc2lnblN0eWxlLkphcGFuZGk7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSBcIm5lb2NsYXNzaWNcIikge1xuICAgICAgcmV0dXJuIERlc2lnblN0eWxlLk5lb0NsYXNzaWM7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSBcIm1vZGVyblwiKSB7XG4gICAgICByZXR1cm4gRGVzaWduU3R5bGUuTW9kZXJuO1xuICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gXCJmdXNpb25cIikge1xuICAgICAgcmV0dXJuIERlc2lnblN0eWxlLkZ1c2lvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIERlc2lnblN0eWxlLkNvenk7XG4gICAgfVxuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGZyb21OdW1iZXIobnVtYmVyOiBudW1iZXIpOiBEZXNpZ25TdHlsZSB7XG4gICAgcmV0dXJuIG51bWJlciA9PT0gMFxuICAgICAgPyBEZXNpZ25TdHlsZS5Db3p5XG4gICAgICA6IG51bWJlciA9PT0gMVxuICAgICAgPyBEZXNpZ25TdHlsZS5KYXBhbmRpXG4gICAgICA6IG51bWJlciA9PT0gMlxuICAgICAgPyBEZXNpZ25TdHlsZS5GdXNpb25cbiAgICAgIDogbnVtYmVyID09PSAzXG4gICAgICA/IERlc2lnblN0eWxlLk1vZGVyblxuICAgICAgOiBEZXNpZ25TdHlsZS5OZW9DbGFzc2ljO1xuICB9XG59XG4iLCJjbGFzcyBMb2NhbFN0b3JhZ2VIYW5kbGVyIHtcbiAgZ2V0KG5hbWU6IHN0cmluZyk6IGFueSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKG5hbWUpKTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIHJldHVybiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShuYW1lKTtcbiAgICB9XG4gIH1cblxuICBzZXQobmFtZTogc3RyaW5nLCB2YWx1ZTogYW55KTogdm9pZCB7XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0obmFtZSwgdmFsdWUudG9TdHJpbmcoKSk7XG4gIH1cblxuICBpbml0KCk6IHZvaWQge1xuICAgIHRoaXMuc2V0KFwic3R5bGVcIiwgXCJjb3p5XCIpO1xuICAgIHRoaXMuc2V0KFwiYmF0aFwiLCB0cnVlKTtcbiAgICB0aGlzLnNldChcInNob3dlclwiLCBmYWxzZSk7XG4gICAgdGhpcy5zZXQoXCJjZWlsaW5nXCIsIFwic3RyZXRjaCBjZWlsaW5nXCIpO1xuICAgIHRoaXMuc2V0KFwiZmxvb3JpbmdcIiwgXCJsYW1pbmF0XCIpO1xuICAgIHRoaXMuc2V0KFwiaHlnaWVuaWNfc2hvd2VyXCIsIGZhbHNlKTtcbiAgICB0aGlzLnNldChcInNlY29uZF9neXBzdW1fbGF5ZXJcIiwgZmFsc2UpO1xuICAgIHRoaXMuc2V0KFwiZmxvb3Jfc2NyZWVkXCIsIGZhbHNlKTtcbiAgICB0aGlzLnNldChcImhlYXRlZF9mbG9vcmluZ1wiLCBmYWxzZSk7XG4gICAgdGhpcy5zZXQoXCJkZW5vaXNpbmdcIiwgZmFsc2UpO1xuICAgIHRoaXMuc2V0KFwiZW50cmFuY2VfZG9vcnNcIiwgZmFsc2UpO1xuICAgIHRoaXMuc2V0KFwiY29uZGl0aW9uaW5nXCIsIGZhbHNlKTtcbiAgICB0aGlzLnNldChcImFtb3VudF9vZl9yb29tc1wiLCAyKTtcbiAgICB0aGlzLnNldChcImFtb3VudF9vZl9iYXRocm9vbXNcIiwgMSk7XG4gICAgdGhpcy5zZXQoXCJhcHBsaWFuY2VzXCIsIFwiZ29yZW5qZVwiKTtcbiAgICB0aGlzLnNldChcImFwcGxpYW5jZXNfYm9vbF90b3RhbFwiLCBmYWxzZSk7XG4gICAgdGhpcy5zZXQoXCJmdXJuaXR1cmVfYm9vbFwiLCB0cnVlKTtcbiAgICB0aGlzLnNldChcInNwYWNlXCIsIDUwKTtcbiAgfVxuXG4gIGluaXRQb3J0dWdhbCgpOiB2b2lkIHtcbiAgICB0aGlzLnNldChcInN0eWxlXCIsIFwiY296eVwiKTtcbiAgICB0aGlzLnNldChcInNwYWNlXCIsIDUwKTtcbiAgICB0aGlzLnNldChcImFtb3VudF9vZl9yb29tc1wiLCAyKTtcbiAgICB0aGlzLnNldChcImFtb3VudF9vZl9iYXRocm9vbXNcIiwgMSk7XG4gICAgdGhpcy5zZXQoXCJiYXRoXCIsIHRydWUpO1xuICAgIHRoaXMuc2V0KFwic2hvd2VyXCIsIGZhbHNlKTtcbiAgICB0aGlzLnNldChcImZsb29yaW5nXCIsIFwibGFtaW5hdFwiKTtcbiAgICB0aGlzLnNldChcImZpbmlzaGluZ19tYXRlcmlhbHNcIiwgZmFsc2UpO1xuICAgIHRoaXMuc2V0KFwiZGVtb250YWdlXCIsIGZhbHNlKTtcbiAgICB0aGlzLnNldChcImNlbWVudF9zY3JlZWRcIiwgZmFsc2UpO1xuICAgIHRoaXMuc2V0KFwiaGVhdGVkX2Zsb29yaW5nXCIsIDApO1xuICAgIHRoaXMuc2V0KFwiZGVub2lzaW5nXCIsIGZhbHNlKTtcbiAgICB0aGlzLnNldChcImVudHJhbmNlX2Rvb3JzXCIsIGZhbHNlKTtcbiAgICB0aGlzLnNldChcIndpbmRvd3NfaW5zdGFsbGF0aW9uXCIsIDApO1xuICAgIHRoaXMuc2V0KFwiYnVpbHRpbl9mdXJuaXR1cmVcIiwgZmFsc2UpO1xuICAgIHRoaXMuc2V0KFwiY29uZGl0aW9uaW5nXCIsIDApO1xuICAgIHRoaXMuc2V0KFwiZnVybml0dXJlX2Jvb2xcIiwgZmFsc2UpO1xuICAgIHRoaXMuc2V0KFwiYXBwbGlhbmNlc19ib29sX3RvdGFsXCIsIGZhbHNlKTtcbiAgICB0aGlzLnNldChcImFwcGxpYW5jZXNcIiwgXCJnb3JlbmplXCIpO1xuICAgIHRoaXMuc2V0KFwidHJhbnNwb3J0YXRpb25fZXhwZW5zZXNcIiwgNSk7XG4gIH1cblxuICBzdG9yYWdlVG9SZXF1ZXN0Qm9keShzdG9yYWdlOiBTdG9yYWdlKTogc3RyaW5nIHtcbiAgICBjb25zdCByZXN1bHQgPSB7fTtcblxuICAgIGZvciAoY29uc3Qga2V5IGluIHN0b3JhZ2UpIHtcbiAgICAgIGlmIChrZXkgPT09IFwibGVuZ3RoXCIgfHwga2V5ID09IFwiY29zdFBlck1ldHJlXCIpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChTdHJpbmcoc3RvcmFnZVtrZXldKSA9PT0gXCJ0cnVlXCIpIHtcbiAgICAgICAgcmVzdWx0W2tleV0gPSAxO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gZWxzZSBpZiAoU3RyaW5nKHN0b3JhZ2Vba2V5XSkgPT09IFwiZmFsc2VcIikge1xuICAgICAgICByZXN1bHRba2V5XSA9IDA7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNGaW5pdGUoTnVtYmVyKHN0b3JhZ2Vba2V5XSkpKSB7XG4gICAgICAgIHJlc3VsdFtrZXldID0gTnVtYmVyKHN0b3JhZ2Vba2V5XSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICByZXN1bHRba2V5XSA9IHN0b3JhZ2Vba2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkocmVzdWx0KTtcbiAgfVxufVxuXG5leHBvcnQgeyBMb2NhbFN0b3JhZ2VIYW5kbGVyIH07XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsImltcG9ydCBTcGxpZGUgZnJvbSBcIkBzcGxpZGVqcy9zcGxpZGVcIjtcbmltcG9ydCB7IExvY2FsU3RvcmFnZUhhbmRsZXIgfSBmcm9tIFwiLi91dGlscy9Mb2NhbFN0b3JhZ2VIYW5kbGVyXCI7XG5pbXBvcnQgeyBEZXNpZ25TdHlsZSB9IGZyb20gXCIuL21vZGVscy9TdHlsZVwiO1xuXG4kKGZ1bmN0aW9uICgpIHtcbiAgY29uc3Qgdnc6IG51bWJlciA9ICQod2luZG93KS53aWR0aCgpO1xuXG4gICQoXCIuY2hvaWNlYWN0aXZlLmNhcmRcIikudG9nZ2xlQ2xhc3MoXCJjaG9pY2VBY3RpdmVCb3JkZXJcIik7XG4gICQoXCIjbGFtaW5hdFwiKS5wcm9wKFwiY2hlY2tlZFwiLCB0cnVlKTtcblxuICBjb25zdCBzcGxpZGVPcHRpb25zID0ge1xuICAgIGFycm93czogZmFsc2UsXG4gICAgcGFnaW5hdGlvbjogZmFsc2UsXG4gICAgc3BlZWQ6IDU1MCxcbiAgICBmbGlja1Bvd2VyOiA0MDAsXG4gICAgYnJlYWtwb2ludHM6IHtcbiAgICAgIDQ4MDoge1xuICAgICAgICBwYWdpbmF0aW9uOiB0cnVlLFxuICAgICAgICBzcGVlZDogNjUwLFxuICAgICAgfSxcbiAgICB9LFxuICB9O1xuICBjb25zdCBzdG9yYWdlOiBMb2NhbFN0b3JhZ2VIYW5kbGVyID0gbmV3IExvY2FsU3RvcmFnZUhhbmRsZXIoKTtcblxuICBjb25zdCBzcGxpZGVDYWxjID0gbmV3IFNwbGlkZShcIi5zbGlkZXItY29udGFpbmVyLnNwbGlkZVwiLCBzcGxpZGVPcHRpb25zKTtcblxuICBzcGxpZGVDYWxjLm1vdW50KCk7XG5cbiAgJChcImlucHV0XCIpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICQodGhpcykuYXR0cihcIm5hbWVcIiwgJCh0aGlzKS5kYXRhKFwibmFtZVwiKSk7XG4gIH0pO1xuXG4gIGlmICgkKFwiLnNsaWRlci13cmFwcGVyLnNwbGlkZVwiKS5sZW5ndGgpIHtcbiAgICAkKFwiLmZhY3QtbGlua1wiKS5vbihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICgkKHRoaXMpLmlzKFwiLmFjdGl2ZVwiKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgICQoXCIuZmFjdC1jb250YWluZXIuYWN0aXZlXCIpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xuICAgICAgJChcIi5mYWN0LWNvbnRhaW5lclwiKS5lcSgkKHRoaXMpLmluZGV4KCkpLmFkZENsYXNzKFwiYWN0aXZlXCIpO1xuICAgICAgJChcIi5mYWN0LWxpbmsuYWN0aXZlXCIpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xuICAgICAgJCh0aGlzKS5hZGRDbGFzcyhcImFjdGl2ZVwiKTtcbiAgICB9KTtcblxuICAgICQoXCIudGFiLW5ld1wiKS5vbihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICgkKHRoaXMpLmlzKFwiLmFjdGl2ZVwiKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGxldCBpbmRleCA9ICQodGhpcykuaW5kZXgoKTtcblxuICAgICAgJChcIi50YWItbmV3LmFjdGl2ZVwiKS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcbiAgICAgICQodGhpcykuYWRkQ2xhc3MoXCJhY3RpdmVcIik7XG4gICAgICAkKFwiLnNsaWRlci1pbWFnZS1uZXdcIikucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIik7XG4gICAgICAkKFwiLnNsaWRlci1pbWFnZS1uZXdcIikuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICgkKHRoaXMpLmluZGV4KCkgPT0gaW5kZXgpIHtcbiAgICAgICAgICAkKHRoaXMpLmFkZENsYXNzKFwiYWN0aXZlXCIpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgY29uc3Qgc3R5bGUgPSBEZXNpZ25TdHlsZS5mcm9tTnVtYmVyKGluZGV4KTtcblxuICAgICAgJChcbiAgICAgICAgXCIuY2FsY3VsYXRvci1zbGlkZS5zcGxpZGVfX3NsaWRlIC5jYWxjdWxhdG9yLXNsaWRlLCAuY2FsY3VsYXRvci1zbGlkZSAuY29sb3ItdmFyLCAud3JhcC1ib3JkZXIuY2FsY3VsYXRvci1idG5cIlxuICAgICAgKS50b2dnbGUoZmFsc2UpO1xuXG4gICAgICAkKFxuICAgICAgICBcIi5jYWxjdWxhdG9yLXNsaWRlLnNwbGlkZV9fc2xpZGUgLmNhbGN1bGF0b3Itc2xpZGUgLmNvbG9yLTEsIC5jYWxjdWxhdG9yLXNsaWRlXCIgK1xuICAgICAgICAgIGAuJHtzdHlsZX0sIC5zcGVjaWZpY2F0aW9uLSR7c3R5bGV9LmNvbG9yLTFgXG4gICAgICApLnRvZ2dsZSh0cnVlKTtcbiAgICAgICQoXCIuY2FsY3VsYXRvci1zbGlkZS5zcGxpZGVfX3NsaWRlIC5jYWxjdWxhdG9yLXNsaWRlXCIpXG4gICAgICAgIC5lcShpbmRleClcbiAgICAgICAgLnRvZ2dsZSh0cnVlKTtcbiAgICAgICQoXCIuY2FsY3VsYXRvci10YWIudy0tY3VycmVudFwiKS5yZW1vdmVDbGFzcyhcInctLWN1cnJlbnRcIik7XG4gICAgICAkKGAuY2FsY3VsYXRvci10YWJgKS5lcShpbmRleCkuYWRkQ2xhc3MoXCJ3LS1jdXJyZW50XCIpO1xuXG4gICAgICAkKFwiLmNvbG9yLXRhYi5hY3RpdmUsIC5zbGlkZS1uYXYuYWN0aXZlXCIpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xuICAgICAgJChcIi5kaXYtYmxvY2stMTQgLmNvbG9yLXRhYlwiKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCQodGhpcykuaW5kZXgoKSA9PSAwKSB7XG4gICAgICAgICAgJCh0aGlzKS5hZGRDbGFzcyhcImFjdGl2ZVwiKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHNwbGlkZUNhbGMucmVmcmVzaCgpO1xuICAgIH0pO1xuXG4gICAgY29uc3Qgc3BsaWRlID0gbmV3IFNwbGlkZShcIi5zbGlkZXItd3JhcHBlci5zcGxpZGVcIiwgc3BsaWRlT3B0aW9ucyk7XG4gICAgc3BsaWRlLm1vdW50KCk7XG5cbiAgICBzcGxpZGUub24oXCJtb3ZlXCIsICgpID0+XG4gICAgICBzZXRUaW1lb3V0KFxuICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgJChcIi5zcGxpZGVfX2xpc3RcIikuY3NzKFxuICAgICAgICAgICAgXCJoZWlnaHRcIixcbiAgICAgICAgICAgICQoXCIuc3BsaWRlX19zbGlkZS5pcy1hY3RpdmUgLmFjdGl2ZSBpbWdcIikuY3NzKFwiaGVpZ2h0XCIpXG4gICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICAgICAgdncgPiA0ODAgPyA1NTAgOiA3NTBcbiAgICAgIClcbiAgICApO1xuXG4gICAgJChcIi5zcGxpZGVfX2xpc3RcIikuY3NzKFxuICAgICAgXCJoZWlnaHRcIixcbiAgICAgICQoXCIuc3BsaWRlX19zbGlkZS5pcy1hY3RpdmUgLmFjdGl2ZSBpbWdcIikuY3NzKFwiaGVpZ2h0XCIpXG4gICAgKTtcblxuICAgICQoXCIuc2xpY2stYnRuLXByZXYsIC5zbGljay1idG4tbmV4dFwiKS5vbihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBpbmRleDogbnVtYmVyID0gc3BsaWRlLmluZGV4O1xuICAgICAgbGV0IHRleHRQcmV2OiBzdHJpbmcgPSBcIlwiO1xuICAgICAgbGV0IHRleHROZXh0OiBzdHJpbmcgPSBcIlwiO1xuXG4gICAgICAkKFwiLnNsaWNrLWJ0bi1wcmV2LCAuc2xpY2stYnRuLW5leHRcIikucmVtb3ZlQ2xhc3MoXCJkaXNhYmxlZFwiKTtcblxuICAgICAgaWYgKCQodGhpcykuaW5kZXgoKSA9PSAwKSB7XG4gICAgICAgIHNwbGlkZS5nbyhcIjxcIik7XG4gICAgICAgIGlmIChpbmRleC0tIC0gMSA9PSAwKSB7XG4gICAgICAgICAgJCh0aGlzKS5hZGRDbGFzcyhcImRpc2FibGVkXCIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzcGxpZGUuZ28oXCI+XCIpO1xuICAgICAgICBpZiAoaW5kZXgrKyArIDEgPT0gNCkge1xuICAgICAgICAgICQodGhpcykuYWRkQ2xhc3MoXCJkaXNhYmxlZFwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzd2l0Y2ggKGluZGV4KSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICB0ZXh0UHJldiA9IFwiXCI7XG4gICAgICAgICAgdGV4dE5leHQgPSBcItCU0LjQstC40YLQuNGB0Ywg0YHQv9Cw0LvRjNC90Y5cIjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIHRleHRQcmV2ID0gXCLQlNC40LLQuNGC0LjRgdGMINCy0ZbRgtCw0LvRjNC90Y5cIjtcbiAgICAgICAgICB0ZXh0TmV4dCA9IFwi0JTQuNCy0LjRgtC40YHRjCDQutGD0YXQvdGOXCI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICB0ZXh0UHJldiA9IFwi0JTQuNCy0LjRgtC40YHRjCDRgdC/0LDQu9GM0L3RjlwiO1xuICAgICAgICAgIHRleHROZXh0ID0gXCLQlNC40LLQuNGC0LjRgdGMINC00YPRiFwiO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgdGV4dFByZXYgPSBcItCU0LjQstC40YLQuNGB0Ywg0LrRg9GF0L3RjlwiO1xuICAgICAgICAgIHRleHROZXh0ID0gXCLQlNC40LLQuNGC0LjRgdGMINCy0LDQvdC90YNcIjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIHRleHRQcmV2ID0gXCLQlNC40LLQuNGC0LjRgdGMINC00YPRiFwiO1xuICAgICAgICAgIHRleHROZXh0ID0gXCJcIjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgICQoXCIuc2xpY2stcHJldi10ZXh0XCIpLmh0bWwodGV4dFByZXYpO1xuICAgICAgJChcIi5zbGljay1uZXh0LXRleHRcIikuaHRtbCh0ZXh0TmV4dCk7XG4gICAgfSk7XG4gIH1cblxuICAkKFwiLmNhbGN1bGF0b3ItdGFiXCIpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IGluZGV4OiBudW1iZXIgPSAkKHRoaXMpLmluZGV4KCk7XG4gICAgY29uc3Qgc3R5bGUgPSBEZXNpZ25TdHlsZS5mcm9tTnVtYmVyKGluZGV4KTtcblxuICAgICQoXG4gICAgICBcIi5jYWxjdWxhdG9yLXNsaWRlLnNwbGlkZV9fc2xpZGUgLmNhbGN1bGF0b3Itc2xpZGUsIC5jYWxjdWxhdG9yLXNsaWRlIC5jb2xvci12YXIsIC53cmFwLWJvcmRlci5jYWxjdWxhdG9yLWJ0blwiXG4gICAgKS50b2dnbGUoZmFsc2UpO1xuXG4gICAgJChcbiAgICAgIFwiLmNhbGN1bGF0b3Itc2xpZGUuc3BsaWRlX19zbGlkZSAuY2FsY3VsYXRvci1zbGlkZSAuY29sb3ItMSwgLmNhbGN1bGF0b3Itc2xpZGVcIiArXG4gICAgICAgIGAuJHtzdHlsZX0sIC5zcGVjaWZpY2F0aW9uLSR7c3R5bGV9LmNvbG9yLTFgXG4gICAgKS50b2dnbGUodHJ1ZSk7XG4gICAgJChcIi5jYWxjdWxhdG9yLXNsaWRlLnNwbGlkZV9fc2xpZGUgLmNhbGN1bGF0b3Itc2xpZGVcIilcbiAgICAgIC5lcShpbmRleClcbiAgICAgIC50b2dnbGUodHJ1ZSk7XG4gICAgJChcIi5jYWxjdWxhdG9yLXRhYi53LS1jdXJyZW50XCIpLnJlbW92ZUNsYXNzKFwidy0tY3VycmVudFwiKTtcbiAgICAkKGAuY2FsY3VsYXRvci10YWI6ZXEoJHtpbmRleH0pYCkuYWRkQ2xhc3MoXCJ3LS1jdXJyZW50XCIpO1xuXG4gICAgJChcIi5jb2xvci10YWIuYWN0aXZlLCAuc2xpZGUtbmF2LmFjdGl2ZVwiKS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcbiAgICAkKFwiLnRhYi1uZXdcIikuZXEoaW5kZXgpLnRyaWdnZXIoXCJjbGlja1wiKTtcbiAgICAkKFwiLmRpdi1ibG9jay0xNCAuY29sb3ItdGFiXCIpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCQodGhpcykuaW5kZXgoKSA9PSAwKSB7XG4gICAgICAgICQodGhpcykuYWRkQ2xhc3MoXCJhY3RpdmVcIik7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBzcGxpZGVDYWxjLnJlZnJlc2goKTtcbiAgfSk7XG5cbiAgJChcIi5pbmNyZW1lbnQtZmllbGQgLmluY3JlbWVudFwiKS5vbihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoJCh0aGlzKS5zaWJsaW5ncyhcIi5pbmNyZW1lbnQtaW5wdXRcIikubGVuZ3RoIDw9IDApIHtcbiAgICAgICQodGhpcykuc2libGluZ3MoXCIuaW5jcmVtZW50LWlucHV0XCIpLnZhbCgwKTtcbiAgICB9XG4gIH0pO1xuXG4gICQoXCIjd2YtZm9ybS1jb25zdWx0XCIpLm9uKFwic3VibWl0XCIsIChlKSA9PiB7XG4gICAgaWYgKCEkKFwiI2FncmVlbWVudENoZWNrYm94XCIpLmlzKFwiOmNoZWNrZWRcIikpIHtcbiAgICAgICQoXCIud2FybmluZy5hZ3JlZW1lbnRjaGVja2JveFwiKS50b2dnbGUodHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICQoXCIud2FybmluZy5hZ3JlZW1lbnRjaGVja2JveFwiKS50b2dnbGUoZmFsc2UpO1xuICAgIH1cblxuICAgIGlmICghJChcIiNwaG9uZVwiKS52YWwoKSkge1xuICAgICAgJChcIi53YXJuaW5nLmlucHV0cy5waG9uZVwiKS50b2dnbGUodHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICQoXCIud2FybmluZy5pbnB1dHMucGhvbmVcIikudG9nZ2xlKGZhbHNlKTtcbiAgICB9XG5cbiAgICBpZiAoISQoXCIjbmFtZVwiKS52YWwoKSkge1xuICAgICAgJChcIi53YXJuaW5nLmlucHV0cy5uYW1lXCIpLnRvZ2dsZSh0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJChcIi53YXJuaW5nLmlucHV0cy5uYW1lXCIpLnRvZ2dsZShmYWxzZSk7XG4gICAgfVxuXG4gICAgaWYgKCQoXCIud2FybmluZ1wiKS5pcyhcIjp2aXNpYmxlXCIpKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGxldCBvbGRCdG5OYW1lID0gJChcIiNzdWJtaXRCdG5cIikuaHRtbCgpO1xuICAgICAgJChcIiNzdWJtaXRCdG5cIikuaHRtbChcItCX0LDRh9C10LrQsNC50YLQtS4uLlwiKTtcblxuICAgICAgY29uc3QgZmQgPSBuZXcgRm9ybURhdGEoJChcIiN3Zi1mb3JtLWNvbnN1bHRcIikuZ2V0KDApIGFzIEhUTUxGb3JtRWxlbWVudCk7XG5cbiAgICAgIC8v0LfQsNGP0LLQutC4INC90LAg0LrQvtC90YHRg9C70YzRgtCw0YbQuNGOXG4gICAgICBmZXRjaChcbiAgICAgICAgXCJodHRwczovL3NjcmlwdC5nb29nbGUuY29tL21hY3Jvcy9zL0FLZnljYnhhWlFUcm1UMHdac1ZXRXJZaDlrOHl4Z1RxVW4xdjlOZkJUWHlaQ3YwMWRGbVJzcC00L2V4ZWNcIixcbiAgICAgICAge1xuICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgICAgYm9keTogZmQsXG4gICAgICAgIH1cbiAgICAgIClcbiAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICQoXCIjc3VibWl0QnRuXCIpLmh0bWwob2xkQnRuTmFtZSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IGNvbnNvbGUuZXJyb3IoXCJFcnJvciFcIiwgZXJyb3IubWVzc2FnZSkpXG4gICAgICAgIC5maW5hbGx5KCgpID0+IHtcbiAgICAgICAgICBpZiAod2luZG93LmxvY2F0aW9uLmhyZWYuaW5jbHVkZXMoXCIvcnVcIikpIHtcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5hc3NpZ24oXCIvcnUva2R5YWt1aWVtb1wiKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmFzc2lnbihcIi9rZHlha3VpZW1vXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICAkKFwiLmNob2ljZVwiKS5vbihcImNsaWNrXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKCEkKFwiI2FwcGxpYW5jZXNCb29sXCIpLmlzKFwiOmNoZWNrZWRcIikpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgJChcIi5jaG9pY2VBY3RpdmVcIikudG9nZ2xlQ2xhc3MoXCJjaG9pY2VBY3RpdmVcIik7XG4gICAgICAkKFwiLmNob2ljZUFjdGl2ZUJvcmRlclwiKS50b2dnbGVDbGFzcyhcImNob2ljZUFjdGl2ZUJvcmRlclwiKTtcblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghJCh0aGlzKS5oYXNDbGFzcyhcImNob2ljZUFjdGl2ZVwiKSkge1xuICAgICAgJChcIi5jaG9pY2VBY3RpdmVcIikucmVtb3ZlQ2xhc3MoXCJjaG9pY2VBY3RpdmVcIik7XG4gICAgICAkKFwiLmNob2ljZUFjdGl2ZUJvcmRlclwiKS5yZW1vdmVDbGFzcyhcImNob2ljZUFjdGl2ZUJvcmRlclwiKTtcbiAgICAgICQodGhpcykuYWRkQ2xhc3MoXCJjaG9pY2VBY3RpdmVcIik7XG4gICAgICAkKHRoaXMpLnBhcmVudCgpLmFkZENsYXNzKFwiY2hvaWNlQWN0aXZlQm9yZGVyXCIpO1xuXG4gICAgICBpZiAoJChcIiNub2RlXCIpLmlzKFwiOmNoZWNrZWRcIikpIHtcbiAgICAgICAgJChcIiNhcHBsaWFuY2VzXCIpLnByb3AoXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gICQoXCIjbm9kZVwiKS5vbihcImNoYW5nZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCQoXCIjbm9kZVwiKS5pcyhcIjpjaGVja2VkXCIpICYmICQoXCIuY2hvaWNlQWN0aXZlXCIpLmxlbmd0aCkge1xuICAgICAgJChcIi5jaG9pY2VBY3RpdmVcIikudG9nZ2xlQ2xhc3MoXCJjaG9pY2VBY3RpdmVcIik7XG4gICAgICAkKFwiLmNob2ljZUFjdGl2ZUJvcmRlclwiKS50b2dnbGVDbGFzcyhcImNob2ljZUFjdGl2ZUJvcmRlclwiKTtcbiAgICB9XG4gIH0pO1xuXG4gICQoXCIjYXBwbGlhbmNlc0Jvb2xcIikub24oXCJjaGFuZ2VcIiwgZnVuY3Rpb24gKCkge1xuICAgIGlmICgkKHRoaXMpLmlzKFwiOmNoZWNrZWRcIikgJiYgISQoXCIuY2hvaWNlQWN0aXZlQm9yZGVyXCIpLmxlbmd0aCkge1xuICAgICAgJChcIi5jaG9pY2VcIikuZmlyc3QoKS50b2dnbGVDbGFzcyhcImNob2ljZUFjdGl2ZVwiKTtcbiAgICAgICQoXCIuY2hvaWNlXCIpLmZpcnN0KCkucGFyZW50KCkudG9nZ2xlQ2xhc3MoXCJjaG9pY2VBY3RpdmVCb3JkZXJcIik7XG4gICAgfVxuICB9KTtcblxuICAkKFwiLmhvdmVyLXRleHRcIikub24oXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IG9iaiA9ICQodGhpcyk7XG5cbiAgICBvYmouc2libGluZ3MoXCIuaG92ZXItbW9kYWxcIikuY3NzKFwiZGlzcGxheVwiLCBcImZsZXhcIik7XG4gICAgaWYgKHBhcnNlSW50KG9iai5zaWJsaW5ncyhcIi5ob3Zlci1tb2RhbFwiKS5jc3MoXCJvcGFjaXR5XCIpKSA9PSAwKSB7XG4gICAgICBpZiAoIWlzSW5WaWV3cG9ydChvYmouc2libGluZ3MoXCIuaG92ZXItbW9kYWxcIikuZ2V0KDApKSkge1xuICAgICAgICAkKFtkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIGRvY3VtZW50LmJvZHldKS5hbmltYXRlKFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHNjcm9sbFRvcDogb2JqLnNpYmxpbmdzKFwiLmhvdmVyLW1vZGFsXCIpLm9mZnNldCgpLnRvcCAtIDk2LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgNDUwXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBvYmouc2libGluZ3MoXCIuaG92ZXItbW9kYWxcIikuYW5pbWF0ZShcbiAgICAgICAge1xuICAgICAgICAgIGJvdHRvbTogNDIsXG4gICAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgfSxcbiAgICAgICAgMjAwLFxuICAgICAgICBcInN3aW5nXCJcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9iai5zaWJsaW5ncyhcIi5ob3Zlci1tb2RhbFwiKS5hbmltYXRlKFxuICAgICAgICB7XG4gICAgICAgICAgYm90dG9tOiAxMixcbiAgICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICB9LFxuICAgICAgICAyMDAsXG4gICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBvYmouc2libGluZ3MoXCIuaG92ZXItbW9kYWxcIikudG9nZ2xlKGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9XG4gIH0pO1xuXG4gICQoXCIuc3VibWl0LWNvbnRhaW5lciAuYnV0dG9uXCIpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICB3aW5kb3cub3BlbihcbiAgICAgICQoJy5jYWxjdWxhdG9yLWJ0bjpub3QoW3N0eWxlKj1cImRpc3BsYXk6IG5vbmVcIl0pIGEnKS5kYXRhKFwiaHJlZlwiKSxcbiAgICAgIFwiX2JsYW5rXCJcbiAgICApO1xuICB9KTtcblxuICAkKFwiLmNsb3NpbmctYnRuXCIpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xuICAgIGxldCBvYmogPSAkKHRoaXMpO1xuICAgIG9iai5wYXJlbnQoXCIuaG92ZXItbW9kYWxcIikuYW5pbWF0ZShcbiAgICAgIHtcbiAgICAgICAgYm90dG9tOiAxMixcbiAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgIH0sXG4gICAgICAyMDAsXG4gICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIG9iai5wYXJlbnQoXCIuaG92ZXItbW9kYWxcIikudG9nZ2xlKGZhbHNlKTtcbiAgICAgIH1cbiAgICApO1xuICB9KTtcblxuICBpZiAodncgPD0gNDgwKSB7XG4gICAgJChcIi50YWItbmV3XCIpLmVxKDEpLnRyaWdnZXIoXCJjbGlja1wiKTtcbiAgfVxuXG4gIGlmICh2dyA+PSA5OTIpIHtcbiAgICAkKFwiLnByZXZpZXctaW1hZ2UsIC5ibGFja2JnLXRleHRcIikub24oe1xuICAgICAgbW91c2VlbnRlcjogKCkgPT4gJChcIi52aWRlby1jdXJzb3JcIikuY3NzKFwib3BhY2l0eVwiLCAxKSxcbiAgICAgIG1vdXNlbGVhdmU6ICgpID0+ICQoXCIudmlkZW8tY3Vyc29yXCIpLmNzcyhcIm9wYWNpdHlcIiwgMCksXG4gICAgfSk7XG4gICAgJChcIi5wcm9qZWN0LWxpbmstaW1hZ2VcIikub24oe1xuICAgICAgbW91c2VlbnRlcjogKCkgPT4gJChcIi5wcm9qZWN0LWRvdFwiKS5jc3MoXCJvcGFjaXR5XCIsIDEpLFxuICAgICAgbW91c2VsZWF2ZTogKCkgPT4gJChcIi5wcm9qZWN0LWRvdFwiKS5jc3MoXCJvcGFjaXR5XCIsIDApLFxuICAgIH0pO1xuICAgICQoXCIuYXJyb3ctcmlnaHRcIikub24oe1xuICAgICAgbW91c2VlbnRlcjogKCkgPT4gJChcIi5zbWFsbC1ob3Zlci5yaWdodFwiKS5jc3MoXCJvcGFjaXR5XCIsIDEpLFxuICAgICAgbW91c2VsZWF2ZTogKCkgPT4gJChcIi5zbWFsbC1ob3Zlci5yaWdodFwiKS5jc3MoXCJvcGFjaXR5XCIsIDApLFxuICAgIH0pO1xuICAgICQoXCIuYXJyb3ctbGVmdFwiKS5vbih7XG4gICAgICBtb3VzZWVudGVyOiAoKSA9PiAkKFwiLnNtYWxsLWhvdmVyLmxlZnRcIikuY3NzKFwib3BhY2l0eVwiLCAxKSxcbiAgICAgIG1vdXNlbGVhdmU6ICgpID0+ICQoXCIuc21hbGwtaG92ZXIubGVmdFwiKS5jc3MoXCJvcGFjaXR5XCIsIDApLFxuICAgIH0pO1xuXG4gICAgJChcIi5jb2xvci10YWJcIikub24oXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgaW5kZXggPSAkKHRoaXMpLmluZGV4KCk7XG4gICAgICBsZXQgbnVtYmVyID0gJChcIi5jYWxjdWxhdG9yLXRhYi53LS1jdXJyZW50XCIpLmluZGV4KCk7XG4gICAgICBjb25zdCBzdHlsZSA9IERlc2lnblN0eWxlLmZyb21OdW1iZXIobnVtYmVyKTtcblxuICAgICAgaWYgKCQodGhpcykubm90KFwiLmFjdGl2ZVwiKSkge1xuICAgICAgICAkKFwiLmNvbG9yLXRhYi5hY3RpdmVcIikucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIik7XG4gICAgICAgICQoXCIuZGl2LWJsb2NrLTE0IC5jb2xvci10YWJcIikuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKCQodGhpcykuaW5kZXgoKSA9PSBpbmRleCkge1xuICAgICAgICAgICAgJCh0aGlzKS5hZGRDbGFzcyhcImFjdGl2ZVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgICQoXCIuY29sb3ItdmFyLCAud3JhcC1ib3JkZXIuY2FsY3VsYXRvci1idG5cIikudG9nZ2xlKGZhbHNlKTtcblxuICAgICAgICAkKFxuICAgICAgICAgIGAuY2FsY3VsYXRvci1zbGlkZSAuY29sb3ItJHtcbiAgICAgICAgICAgIGluZGV4ICsgMVxuICAgICAgICAgIH0sIC53cmFwLWJvcmRlci5jYWxjdWxhdG9yLWJ0bi5zcGVjaWZpY2F0aW9uLSR7c3R5bGV9LmNvbG9yLSR7XG4gICAgICAgICAgICBpbmRleCArIDFcbiAgICAgICAgICB9YFxuICAgICAgICApLnRvZ2dsZSh0cnVlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgICQoXCIuY2FsY3VsYXRvci1zbGlkZXItb3B0aW9uXCIpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgJChcIi5jYWxjdWxhdG9yLXNsaWRlci1vcHRpb24uYWN0aXZlXCIpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xuICAgICAgJCh0aGlzKS5hZGRDbGFzcyhcImFjdGl2ZVwiKTtcbiAgICAgIHNwbGlkZUNhbGMuZ28ocGFyc2VJbnQoJCh0aGlzKS5kYXRhKFwic2xpZGVyLWluZGV4XCIpKSk7XG4gICAgfSk7XG5cbiAgICAkKFwiLmNhbGN1bGF0b3ItYXJyb3dcIikub24oXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoJCh0aGlzKS5pcyhcIi5hcnJvdy1yaWdodFwiKSkge1xuICAgICAgICBzcGxpZGVDYWxjLmdvKFwiPlwiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNwbGlkZUNhbGMuZ28oXCI8XCIpO1xuICAgICAgfVxuXG4gICAgICAkKFwiLmNhbGN1bGF0b3Itc2xpZGVyLW9wdGlvbi5hY3RpdmVcIikucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIik7XG4gICAgICAkKGAuY2FsY3VsYXRvci1zbGlkZXItb3B0aW9uOmVxKCR7c3BsaWRlQ2FsYy5pbmRleH0pYCkuYWRkQ2xhc3MoXCJhY3RpdmVcIik7XG4gICAgfSk7XG5cbiAgICAkKFwiZm9ybSBpbnB1dFwiKS5vbihcImtleWRvd25cIiwgKGUpID0+IHtcbiAgICAgIGlmIChlLmtleSA9PSBcIkVudGVyXCIpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgaWYgKHZ3IDw9IDc2Nykge1xuICAgICQoXCIuc3RhclwiKS5vbihcIm1vdXNlbGVhdmVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcyhcImhpZGRlblwiKTtcbiAgICAgICQodGhpcykuc2libGluZ3MoXCIuaW1hZ2UtcHJpY2VcIikucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIik7XG4gICAgfSk7XG5cbiAgICAkKFwiLmltYWdlLXByaWNlXCIpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCQodGhpcykuaXMoXCIuYWN0aXZlXCIpKSB7XG4gICAgICAgICQodGhpcykuc2libGluZ3MoXCIuc3RhclwiKS5yZW1vdmVDbGFzcyhcImhpZGRlblwiKTtcbiAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgICQoXCIuc3RhclwiKS5vbihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICgkKHRoaXMpLmlzKFwiLmhpZGRlblwiKSkge1xuICAgICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKFwiaGlkZGVuXCIpO1xuICAgICAgICAkKHRoaXMpLnNpYmxpbmdzKFwiLmltYWdlLXByaWNlXCIpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJCh0aGlzKS5hZGRDbGFzcyhcImhpZGRlblwiKTtcbiAgICAgICAgJCh0aGlzKS5zaWJsaW5ncyhcIi5pbWFnZS1wcmljZVwiKS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldERhdGEob2JqOiBKUXVlcnk8SFRNTEVsZW1lbnQ+LCBkYXRhVmFsOiBzdHJpbmcpOiBzdHJpbmcgfCBudW1iZXIge1xuICAgIGlmIChpc0Zpbml0ZShOdW1iZXIob2JqLmRhdGEoZGF0YVZhbCkpKSkge1xuICAgICAgcmV0dXJuIHBhcnNlSW50KG9iai5kYXRhKGRhdGFWYWwpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG9iai5kYXRhKGRhdGFWYWwpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHZhbChvYmplY3Q6IEpRdWVyeTxIVE1MRWxlbWVudD4pOiBudW1iZXIgfCBzdHJpbmcgfCBzdHJpbmdbXSB7XG4gICAgaWYgKGlzRmluaXRlKE51bWJlcihvYmplY3QudmFsKCkpKSkge1xuICAgICAgcmV0dXJuIE51bWJlcihvYmplY3QudmFsKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gb2JqZWN0LnZhbCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGlzSW5WaWV3cG9ydChlbGVtZW50OiBIVE1MRWxlbWVudCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHJldHVybiAoXG4gICAgICByZWN0LnRvcCA+PSAwICYmXG4gICAgICByZWN0LmxlZnQgPj0gMCAmJlxuICAgICAgcmVjdC5ib3R0b20gPD1cbiAgICAgICAgKHdpbmRvdy5pbm5lckhlaWdodCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0KSAmJlxuICAgICAgcmVjdC5yaWdodCA8PSAod2luZG93LmlubmVyV2lkdGggfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoKVxuICAgICk7XG4gIH1cbn0pO1xuIl0sIm5hbWVzIjpbIlBST0pFQ1RfQ09ERSIsIkRBVEFfQVRUUklCVVRFIiwiU1RBVEVTIiwiQ1JFQVRFRCIsIk1PVU5URUQiLCJJRExFIiwiTU9WSU5HIiwiREVTVFJPWUVEIiwiZW1wdHkiLCJhcnJheSIsImxlbmd0aCIsImlzT2JqZWN0Iiwic3ViamVjdCIsImlzTnVsbCIsImlzQXJyYXkiLCJBcnJheSIsImlzU3RyaW5nIiwiaXNVbmRlZmluZWQiLCJpc0hUTUxFbGVtZW50IiwiSFRNTEVsZW1lbnQiLCJ0b0FycmF5IiwidmFsdWUiLCJmb3JFYWNoIiwidmFsdWVzIiwiaXRlcmF0ZWUiLCJpbmNsdWRlcyIsImluZGV4T2YiLCJwdXNoIiwiaXRlbXMiLCJhcnJheVByb3RvIiwicHJvdG90eXBlIiwic2xpY2UiLCJhcnJheUxpa2UiLCJzdGFydCIsImVuZCIsImNhbGwiLCJ0b2dnbGVDbGFzcyIsImVsbSIsImNsYXNzZXMiLCJhZGQiLCJuYW1lIiwiY2xhc3NMaXN0IiwiYWRkQ2xhc3MiLCJzcGxpdCIsImFwcGVuZCIsInBhcmVudCIsImNoaWxkcmVuIiwiYXBwZW5kQ2hpbGQiLCJiaW5kIiwiYmVmb3JlIiwibm9kZXMiLCJyZWYiLCJub2RlIiwicGFyZW50Tm9kZSIsImluc2VydEJlZm9yZSIsIm1hdGNoZXMiLCJzZWxlY3RvciIsImZpbHRlciIsImNoaWxkIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJmb3JPd24iLCJvYmplY3QiLCJyaWdodCIsImtleXMiLCJPYmplY3QiLCJyZXZlcnNlIiwiaSIsImtleSIsImFzc2lnbiIsImFyZ3VtZW50cyIsInNvdXJjZSIsIm1lcmdlIiwicmVtb3ZlQXR0cmlidXRlIiwiYXR0cnMiLCJhdHRyIiwic2V0QXR0cmlidXRlIiwidmFsdWUyIiwiU3RyaW5nIiwiY3JlYXRlIiwidGFnIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic3R5bGUiLCJwcm9wIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInN0eWxlMiIsImRpc3BsYXkiLCJkaXNwbGF5MiIsImdldEF0dHJpYnV0ZSIsImhhc0NsYXNzIiwiY2xhc3NOYW1lIiwiY29udGFpbnMiLCJyZWN0IiwidGFyZ2V0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwicmVtb3ZlIiwicmVtb3ZlQ2hpbGQiLCJwYXJzZUh0bWwiLCJodG1sIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwiYm9keSIsInByZXZlbnQiLCJlIiwic3RvcFByb3BhZ2F0aW9uIiwicHJldmVudERlZmF1bHQiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJxdWVyeSIsInF1ZXJ5U2VsZWN0b3IiLCJxdWVyeUFsbCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJyZW1vdmVDbGFzcyIsInVuaXQiLCJhc3NlcnQiLCJjb25kaXRpb24iLCJtZXNzYWdlIiwiRXJyb3IiLCJuZXh0VGljayIsImNhbGxiYWNrIiwic2V0VGltZW91dCIsIm5vb3AiLCJyYWYiLCJmdW5jIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibWluIiwibWF4IiwiZmxvb3IiLCJjZWlsIiwiYWJzIiwiTWF0aCIsImJldHdlZW4iLCJudW1iZXIiLCJtaW5Pck1heCIsIm1heE9yTWluIiwiZXhjbHVzaXZlIiwibWluaW11bSIsIm1heGltdW0iLCJjbGFtcCIsIngiLCJ5Iiwic2lnbiIsImNhbWVsVG9LZWJhYiIsInN0cmluZyIsInJlcGxhY2UiLCJ0b0xvd2VyQ2FzZSIsImZvcm1hdCIsInJlcGxhY2VtZW50cyIsInJlcGxhY2VtZW50IiwicGFkIiwiaWRzIiwidW5pcXVlSWQiLCJwcmVmaXgiLCJFdmVudEJ1cyIsImhhbmRsZXJzIiwib2ZmIiwiZXZlbnRzIiwiZm9yRWFjaEV2ZW50IiwiZXZlbnQiLCJuYW1lc3BhY2UiLCJldmVudEhhbmRsZXJzIiwiaGFuZGxlciIsIl9rZXkiLCJfbmFtZXNwYWNlIiwiam9pbiIsImV2ZW50TlMiLCJmcmFnbWVudHMiLCJvbiIsInByaW9yaXR5IiwiX2V2ZW50IiwiX2NhbGxiYWNrIiwiX3ByaW9yaXR5Iiwic29ydCIsImhhbmRsZXIxIiwiaGFuZGxlcjIiLCJvZmZCeSIsImVtaXQiLCJhcHBseSIsImRlc3Ryb3kiLCJFVkVOVF9NT1VOVEVEIiwiRVZFTlRfUkVBRFkiLCJFVkVOVF9NT1ZFIiwiRVZFTlRfTU9WRUQiLCJFVkVOVF9TSElGVEVEIiwiRVZFTlRfQ0xJQ0siLCJFVkVOVF9BQ1RJVkUiLCJFVkVOVF9JTkFDVElWRSIsIkVWRU5UX1ZJU0lCTEUiLCJFVkVOVF9ISURERU4iLCJFVkVOVF9TTElERV9LRVlET1dOIiwiRVZFTlRfUkVGUkVTSCIsIkVWRU5UX1VQREFURUQiLCJFVkVOVF9SRVNJWkUiLCJFVkVOVF9SRVNJWkVEIiwiRVZFTlRfUkVQT1NJVElPTkVEIiwiRVZFTlRfRFJBRyIsIkVWRU5UX0RSQUdHSU5HIiwiRVZFTlRfRFJBR0dFRCIsIkVWRU5UX1NDUk9MTCIsIkVWRU5UX1NDUk9MTEVEIiwiRVZFTlRfREVTVFJPWSIsIkVWRU5UX0FSUk9XU19NT1VOVEVEIiwiRVZFTlRfQVJST1dTX1VQREFURUQiLCJFVkVOVF9QQUdJTkFUSU9OX01PVU5URUQiLCJFVkVOVF9QQUdJTkFUSU9OX1VQREFURUQiLCJFVkVOVF9OQVZJR0FUSU9OX01PVU5URUQiLCJFVkVOVF9BVVRPUExBWV9QTEFZIiwiRVZFTlRfQVVUT1BMQVlfUExBWUlORyIsIkVWRU5UX0FVVE9QTEFZX1BBVVNFIiwiRVZFTlRfTEFaWUxPQURfTE9BREVEIiwiRXZlbnRJbnRlcmZhY2UiLCJTcGxpZGUyIiwibGlzdGVuZXJzIiwidW5iaW5kIiwidGFyZ2V0cyIsImV2ZW50MiIsImxpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImRhdGEiLCJvcHRpb25zIiwiYWRkRXZlbnRMaXN0ZW5lciIsIlJlcXVlc3RJbnRlcnZhbCIsImludGVydmFsIiwib25JbnRlcnZhbCIsIm9uVXBkYXRlIiwibGltaXQiLCJub3ciLCJEYXRlIiwic3RhcnRUaW1lIiwiaWQiLCJyYXRlIiwicGF1c2VkIiwiY291bnQiLCJ1cGRhdGUiLCJlbGFwc2VkIiwicGF1c2UiLCJjYW5jZWwiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInJlc3VtZSIsInJld2luZCIsInNldCIsInRpbWUiLCJpc1BhdXNlZCIsIlN0YXRlIiwiaW5pdGlhbFN0YXRlIiwic3RhdGUiLCJpcyIsInN0YXRlcyIsIlRocm90dGxlIiwiZHVyYXRpb24iLCJ0aGlzIiwiVFRCIiwiT1JJRU5UQVRJT05fTUFQIiwibWFyZ2luUmlnaHQiLCJhdXRvV2lkdGgiLCJmaXhlZFdpZHRoIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJ3aWR0aCIsImxlZnQiLCJYIiwiWSIsIkFycm93TGVmdCIsIkFycm93UmlnaHQiLCJEaXJlY3Rpb24iLCJDb21wb25lbnRzMiIsInJlc29sdmUiLCJheGlzT25seSIsImRpcmVjdGlvbiIsIm9yaWVudCIsIkNMQVNTX1JPT1QiLCJDTEFTU19TTElERVIiLCJDTEFTU19UUkFDSyIsIkNMQVNTX0xJU1QiLCJDTEFTU19TTElERSIsIkNMQVNTX0NMT05FIiwiQ0xBU1NfQ09OVEFJTkVSIiwiQ0xBU1NfQVJST1dTIiwiQ0xBU1NfQVJST1ciLCJDTEFTU19BUlJPV19QUkVWIiwiQ0xBU1NfQVJST1dfTkVYVCIsIkNMQVNTX1BBR0lOQVRJT04iLCJDTEFTU19QQUdJTkFUSU9OX1BBR0UiLCJDTEFTU19QUk9HUkVTUyIsIkNMQVNTX1BST0dSRVNTX0JBUiIsIkNMQVNTX0FVVE9QTEFZIiwiQ0xBU1NfUExBWSIsIkNMQVNTX1BBVVNFIiwiQ0xBU1NfU1BJTk5FUiIsIkNMQVNTX0lOSVRJQUxJWkVEIiwiQ0xBU1NfQUNUSVZFIiwiQ0xBU1NfUFJFViIsIkNMQVNTX05FWFQiLCJDTEFTU19WSVNJQkxFIiwiQ0xBU1NfTE9BRElORyIsIlNUQVRVU19DTEFTU0VTIiwiQ0xBU1NFUyIsInNsaWRlIiwiY2xvbmUiLCJhcnJvd3MiLCJhcnJvdyIsInByZXYiLCJuZXh0IiwicGFnaW5hdGlvbiIsInBhZ2UiLCJzcGlubmVyIiwiUk9MRSIsIkFSSUFfQ09OVFJPTFMiLCJBUklBX0NVUlJFTlQiLCJBUklBX0xBQkVMIiwiQVJJQV9ISURERU4iLCJUQUJfSU5ERVgiLCJBUklBX09SSUVOVEFUSU9OIiwiQUxMX0FUVFJJQlVURVMiLCJTTElERSIsIkxPT1AiLCJGQURFIiwiU2xpZGUkMSIsImluZGV4Iiwic2xpZGVJbmRleCIsImRlc3Ryb3lFdmVudHMiLCJDb21wb25lbnRzIiwicm9vdCIsImlzTmF2aWdhdGlvbiIsInVwZGF0ZU9uTW92ZSIsInN0eWxlcyIsImlzQ2xvbmUiLCJjb250YWluZXIiLCJmb2N1c2FibGVOb2RlcyIsImRlc3Ryb3llZCIsImluaXROYXZpZ2F0aW9uIiwiaWR4IiwibGFiZWwiLCJpMThuIiwic2xpZGVYIiwiY29udHJvbHMiLCJzcGxpZGVzIiwibWFwIiwic3BsaWRlIiwidXBkYXRlQWN0aXZpdHkiLCJpc0FjdGl2ZSIsIm9uTW92ZSIsImN1cnJJbmRleCIsInZpc2libGUiLCJhcmlhSGlkZGVuIiwic2xpZGVGb2N1cyIsInNlbGYiLCJ1cGRhdGVWaXNpYmlsaXR5IiwidHJhY2tSZWN0IiwiRWxlbWVudHMiLCJ0cmFjayIsInNsaWRlUmVjdCIsImlzVmlzaWJsZSIsImFjdGl2ZSIsImN1cnIiLCJjbG9uZVN0YXR1cyIsIm1vdW50IiwidHlwZSIsInVzZUNvbnRhaW5lciIsImlzV2l0aGluIiwiZnJvbSIsImRpc3RhbmNlIiwiZGlmZiIsIlhNTF9OQU1FX1NQQUNFIiwiUEFUSCIsIklOVEVSVkFMX0RBVEFfQVRUUklCVVRFIiwiU0NST0xMX0xJU1RFTkVSX09QVElPTlMiLCJwYXNzaXZlIiwiY2FwdHVyZSIsIlBPSU5URVJfTU9WRV9FVkVOVFMiLCJQT0lOVEVSX1VQX0VWRU5UUyIsIklFX0FSUk9XX0tFWVMiLCJTUkNfREFUQV9BVFRSSUJVVEUiLCJTUkNTRVRfREFUQV9BVFRSSUJVVEUiLCJJTUFHRV9TRUxFQ1RPUiIsIlRSSUdHRVJfS0VZUyIsIkNvbXBvbmVudENvbnN0cnVjdG9ycyIsImZyZWV6ZSIsIl9fcHJvdG9fXyIsIk9wdGlvbnMiLCJ0aHJvdHRsZWRPYnNlcnZlIiwib2JzZXJ2ZSIsImluaXRpYWxPcHRpb25zIiwicG9pbnRzIiwiY3VyclBvaW50IiwiY29tcGxldGVseSIsIml0ZW0iLCJwcmVkaWNhdGUiLCJpdGVtMiIsInBvaW50IiwibmV3T3B0aW9ucyIsImJyZWFrcG9pbnRzIiwib25NYXRjaCIsInNldHVwIiwiSlNPTiIsInBhcnNlIiwiaXNNaW4iLCJtZWRpYVF1ZXJ5IiwibiIsIm0iLCJtYXRjaE1lZGlhIiwiZWxlbWVudHMiLCJzbGlkZXMiLCJzbGlkZXIiLCJsaXN0IiwiYXV0b3BsYXkiLCJmaW5kIiwiYmFyIiwicGxheSIsImNvbGxlY3QiLCJpZGVudGlmeSIsImdldENsYXNzZXMiLCJyZWZyZXNoIiwiZHJhZyIsIkRFRkFVTFRfRVZFTlRfUFJJT1JJVFkiLCJTbGlkZXMiLCJTbGlkZXMyIiwiaW5pdCIsInJlZ2lzdGVyIiwiZm9yRWFjaCQxIiwiU2xpZGUyIiwiZ2V0IiwiZXhjbHVkZUNsb25lcyIsIm1hdGNoZXIiLCJTbGlkZTEiLCJnZXRJbiIsIkNvbnRyb2xsZXIiLCJ0b0luZGV4IiwiaGFzRm9jdXMiLCJwZXJQYWdlIiwiZ2V0QXQiLCJpbWFnZXMiLCJpbWciLCJvYnNlcnZlSW1hZ2VzIiwiZ2V0TGVuZ3RoIiwiaXNFbm91Z2giLCJMYXlvdXQiLCJ2ZXJ0aWNhbCIsInJvb3RSZWN0IiwiY3NzUGFkZGluZyIsInJlc2l6ZSIsIm5ld1JlY3QiLCJoZWlnaHQiLCJjc3NIZWlnaHQiLCJjc3NUcmFja0hlaWdodCIsImdhcCIsImNzc1NsaWRlU2l6ZSIsImZpeGVkSGVpZ2h0IiwiYXV0b0hlaWdodCIsInBhZGRpbmciLCJoZWlnaHRSYXRpbyIsInRvdGFsU2l6ZSIsIndpdGhvdXRHYXAiLCJTbGlkZSIsImdldEdhcCIsInBhcnNlRmxvYXQiLCJ3aW5kb3ciLCJsaXN0U2l6ZSIsInNsaWRlU2l6ZSIsInNsaWRlclNpemUiLCJnZXRQYWRkaW5nIiwiQ2xvbmVzIiwiY2xvbmVzIiwiY2xvbmVDb3VudCIsImNvbXB1dGVDbG9uZUNvdW50IiwiaXNIZWFkIiwiY2xvbmVOb2RlIiwiY2xvbmVEZWVwIiwiZ2VuZXJhdGUiLCJjbG9uZXMyIiwiZml4ZWRTaXplIiwiZGl2IiwibWVhc3VyZSIsImZsaWNrTWF4UGFnZXMiLCJNb3ZlIiwiVHJhbnNpdGlvbiIsInJlcG9zaXRpb24iLCJpc0J1c3kiLCJTY3JvbGwiLCJqdW1wIiwidHJhbnNsYXRlIiwidG9Qb3NpdGlvbiIsInBvc2l0aW9uIiwicHJldmVudExvb3AiLCJkZXN0aW5hdGlvbiIsImdldFBvc2l0aW9uIiwiZXhjZWVkZWRNaW4iLCJleGNlZWRlZExpbWl0IiwiZXhjZWVkZWRNYXgiLCJzaGlmdCIsImxvb3AiLCJ0cmFuc2Zvcm0iLCJiYWNrd2FyZHMiLCJleGNlc3MiLCJnZXRMaW1pdCIsInNpemUiLCJ0cmltbWluZyIsImZvY3VzIiwib2Zmc2V0IiwidHJpbVNwYWNlIiwidHJpbSIsImdldEVuZCIsIndhaXRGb3JUcmFuc2l0aW9uIiwibW92ZSIsImRlc3QiLCJnbyIsIm1pbkRpc3RhbmNlIiwiSW5maW5pdHkiLCJpc0xvb3AiLCJpc1NsaWRlIiwic2xpZGVDb3VudCIsInBlck1vdmUiLCJwcmV2SW5kZXgiLCJzY3JvbGwiLCJ1c2VJbmRleCIsInNuYXAiLCJ0b0Rlc3QiLCJzZXRJbmRleCIsImdldE5leHQiLCJnZXRBZGphY2VudCIsImdldFByZXYiLCJjb21wdXRlRGVzdEluZGV4IiwiZXBzaWxvbiIsImluY3JlbWVudGFsIiwidG9QYWdlIiwiY2xvc2VzdCIsImNvbnRyb2wiLCJhbGxvd1NhbWVJbmRleCIsImluZGljYXRvciIsIm1hdGNoIiwidXNlU2Nyb2xsIiwic3BlZWQiLCJnZXRJbmRleCIsIkFycm93cyIsImNyZWF0ZWQiLCJ3cmFwcGVyIiwiY3JlYXRlQXJyb3ciLCJsaXN0ZW4iLCJwcmV2MiIsImFycm93UGF0aCIsIm5leHRJbmRleCIsInByZXZMYWJlbCIsImxhc3QiLCJuZXh0TGFiZWwiLCJmaXJzdCIsImRpc2FibGVkIiwiQXV0b3BsYXkiLCJob3ZlcmVkIiwiZm9jdXNlZCIsImluaXRCdXR0b24iLCJmb3JQYXVzZSIsImJ1dHRvbiIsInJlc2V0UHJvZ3Jlc3MiLCJtYW51YWwiLCJhdXRvVG9nZ2xlIiwidXBkYXRlSW50ZXJ2YWwiLCJwYXVzZU9uSG92ZXIiLCJwYXVzZU9uRm9jdXMiLCJDb3ZlciIsImNvdmVyIiwic3JjIiwidG9nZ2xlIiwic2Nyb2xsQ2FsbGJhY2siLCJzdXBwcmVzc0NvbnN0cmFpbnQiLCJmcmljdGlvbiIsImNsZWFyIiwib25TY3JvbGxlZCIsInQiLCJlYXNpbmdGdW5jIiwicG93IiwiZWFzaW5nIiwiRHJhZyIsImJhc2VQb3NpdGlvbiIsImJhc2VFdmVudCIsInByZXZCYXNlRXZlbnQiLCJsYXN0RXZlbnQiLCJpc0ZyZWUiLCJkcmFnZ2luZyIsImNsaWNrUHJldmVudGVkIiwiaGFzRXhjZWVkZWQiLCJkaXNhYmxlIiwib25Qb2ludGVyRG93biIsIm5vRHJhZyIsImlzVG91Y2giLCJpc1RvdWNoRXZlbnQiLCJvblBvaW50ZXJNb3ZlIiwib25Qb2ludGVyVXAiLCJzYXZlIiwiY2FuY2VsYWJsZSIsImNvb3JkT2YiLCJjb25zdHJhaW4iLCJleHBpcmVkIiwidGltZU9mIiwiZXhjZWVkZWQiLCJkcmFnTWluVGhyZXNob2xkIiwidGhyZXNob2xkcyIsIm1vdXNlIiwidG91Y2giLCJpc1NsaWRlckRpcmVjdGlvbiIsInZlbG9jaXR5IiwiYmFzZSIsImRpZmZDb29yZCIsImRpZmZUaW1lIiwiaXNGbGljayIsImNvbXB1dGVWZWxvY2l0eSIsImZsaWNrUG93ZXIiLCJjb21wdXRlRGVzdGluYXRpb24iLCJvbkNsaWNrIiwib3J0aG9nb25hbCIsInRvdWNoZXMiLCJ0aW1lU3RhbXAiLCJUb3VjaEV2ZW50IiwiaXNEcmFnZ2luZyIsIktleWJvYXJkIiwia2V5Ym9hcmQiLCJvbktleWRvd24iLCJvblVwZGF0ZWQiLCJub3JtYWxpemVkS2V5IiwiTGF6eUxvYWQiLCJpc1NlcXVlbnRpYWwiLCJsYXp5TG9hZCIsIl9TbGlkZSIsIl9pbWciLCJzcmNzZXQiLCJwYXJlbnRFbGVtZW50IiwiX3NwaW5uZXIiLCJsb2FkTmV4dCIsInByZWxvYWRQYWdlcyIsImxvYWQiLCJlcnJvciIsIm9uTG9hZCIsIlBhZ2luYXRpb24iLCJsaSIsImNsYXNzIiwidGV4dCIsInBhZ2VYIiwiY3JlYXRlUGFnaW5hdGlvbiIsInByZXZlbnRTY3JvbGwiLCJTeW5jIiwiaXNQYXJlbnQiLCJpbnN0YW5jZSIsIm5hdmlnYXRlIiwicmVtb3VudCIsIldoZWVsIiwib25XaGVlbCIsImRlbHRhWSIsInJlbGVhc2VXaGVlbCIsInNob3VsZFByZXZlbnQiLCJ3aGVlbCIsIkRFRkFVTFRTIiwiRmFkZSIsImRvbmUiLCJlbmRDYWxsYmFjayIsInRyYW5zaXRpb24iLCJyZXdpbmRTcGVlZCIsImdldFNwZWVkIiwiX1NwbGlkZSIsImNvbnN0cnVjdG9yIiwiX29wdGlvbnMiLCJfRXh0ZW5zaW9ucyIsImRlZmF1bHRzIiwiRXh0ZW5zaW9ucyIsIl9Db21wb25lbnRzIiwiX1RyYW5zaXRpb24iLCJDb21wb25lbnQiLCJjb21wb25lbnQiLCJzeW5jIiwiU3BsaWRlIiwiUkVOREVSRVJfREVGQVVMVF9DT05GSUciLCJsaXN0VGFnIiwic2xpZGVUYWciLCJTdHlsZSIsInJ1bGUiLCJicmVha3BvaW50Iiwic2VsZWN0b3JzIiwiYnVpbGQiLCJjc3MiLCJkZWZhdWx0IiwiYnVpbGRTZWxlY3RvcnMiLCJTcGxpZGVSZW5kZXJlciIsImNvbnRlbnRzIiwiY29uZmlnIiwic3RhdGljIiwicGFyc2VCcmVha3BvaW50cyIsImluaXRTbGlkZXMiLCJyZWdpc3RlclJvb3RTdHlsZXMiLCJyZWdpc3RlclRyYWNrU3R5bGVzIiwicmVnaXN0ZXJTbGlkZVN0eWxlcyIsInJlZ2lzdGVyTGlzdFN0eWxlcyIsImNvbnRlbnQiLCJidWlsZFN0eWxlcyIsImdlbmVyYXRlQ2xvbmVzIiwiU3R5bGUyIiwiYnVpbGRUcmFuc2xhdGUiLCJjc3NTbGlkZUhlaWdodCIsImNzc0FzcGVjdFJhdGlvIiwiY3NzU2xpZGVXaWR0aCIsImNzc09mZnNldENsb25lcyIsImNzc09mZnNldEdhcHMiLCJpc0NlbnRlciIsImJ1aWxkQ3NzVmFsdWUiLCJjc3NPZmZzZXRDZW50ZXIiLCJCb29sZWFuIiwiZ2V0Q2xvbmVDb3VudCIsImlzRml4ZWRXaWR0aCIsInVuaXQyIiwicGFyc2VDc3NWYWx1ZSIsImdhcE9mZnNldCIsImdhcHMiLCJpc1ZlcnRpY2FsIiwiYnVpbGRDbGFzc2VzIiwiaGlkZGVuIiwiYnVpbGRBdHRycyIsInJlbmRlclNsaWRlcyIsImJhY2tncm91bmQiLCJ1bnNoaWZ0Iiwib3B0aW9uczIiLCJyZW5kZXJBcnJvd3MiLCJyZW5kZXJBcnJvdyIsImFyaWFMYWJlbCIsInJvb3RDbGFzcyIsImJlZm9yZVRyYWNrIiwiYWZ0ZXJUcmFjayIsImJlZm9yZVNsaWRlciIsImFmdGVyU2xpZGVyIiwiRGVzaWduU3R5bGUiLCJmcm9tU3RyaW5nIiwiZnJvbU51bWJlciIsIkxvY2FsU3RvcmFnZUhhbmRsZXIiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwic2V0SXRlbSIsInRvU3RyaW5nIiwiaW5pdFBvcnR1Z2FsIiwic3RvcmFnZVRvUmVxdWVzdEJvZHkiLCJzdG9yYWdlIiwicmVzdWx0IiwiaXNGaW5pdGUiLCJOdW1iZXIiLCJzdHJpbmdpZnkiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJ1bmRlZmluZWQiLCJleHBvcnRzIiwibW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImQiLCJkZWZpbml0aW9uIiwibyIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsIm9iaiIsImhhc093blByb3BlcnR5IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwiJCIsInZ3Iiwic3BsaWRlT3B0aW9ucyIsInNwbGlkZUNhbGMiLCJlYWNoIiwiZXEiLCJ0ZXh0UHJldiIsInRleHROZXh0IiwidHJpZ2dlciIsInNpYmxpbmdzIiwidmFsIiwib2xkQnRuTmFtZSIsImZkIiwiRm9ybURhdGEiLCJmZXRjaCIsIm1ldGhvZCIsInRoZW4iLCJjYXRjaCIsImNvbnNvbGUiLCJmaW5hbGx5IiwibG9jYXRpb24iLCJocmVmIiwicGFyc2VJbnQiLCJlbGVtZW50IiwidG9wIiwiYm90dG9tIiwiaW5uZXJIZWlnaHQiLCJkb2N1bWVudEVsZW1lbnQiLCJjbGllbnRIZWlnaHQiLCJpbm5lcldpZHRoIiwiY2xpZW50V2lkdGgiLCJpc0luVmlld3BvcnQiLCJhbmltYXRlIiwic2Nyb2xsVG9wIiwib3BhY2l0eSIsIm9wZW4iLCJtb3VzZWVudGVyIiwibW91c2VsZWF2ZSIsIm5vdCJdLCJzb3VyY2VSb290IjoiIn0=