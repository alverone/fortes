(()=>{"use strict";class e{static formatCurrency(e){return Intl.NumberFormat("uk-UA",{maximumFractionDigits:2}).format(e)}}class t{constructor(e,t){this.address=e,this._value=t}hasValue(){return null!==this._value&&this._value.length>0}value(){return this._value}numeric(){return parseFloat(this._value)}formattedNumerical(){return e.formatCurrency(parseFloat(this.value()))}}class l{constructor(e){this.cells=e}getCell(e){const l=this.cells.filter((t=>t.address===e));return 0==l.length?new t(e,"0"):l[0]}}class n{get(e){try{return JSON.parse(localStorage.getItem(e))}catch(t){return localStorage.getItem(e)}}set(e,t){localStorage.setItem(e,t.toString())}init(){this.set("style","cozy"),this.set("bath",!0),this.set("shower",!1),this.set("ceiling","stretch ceiling"),this.set("flooring","laminat"),this.set("hygienic_shower",!1),this.set("second_gypsum_layer",!1),this.set("floor_screed",!1),this.set("heated_flooring",!1),this.set("denoising",!1),this.set("entrance_doors",!1),this.set("conditioning",!1),this.set("amount_of_rooms",2),this.set("amount_of_bathrooms",1),this.set("appliances","gorenje"),this.set("appliances_bool_total",!1),this.set("furniture_bool",!0),this.set("space",50)}initPortugal(){this.set("style","cozy"),this.set("space",50),this.set("amount_of_rooms",2),this.set("amount_of_bathrooms",1),this.set("bath",!0),this.set("shower",!1),this.set("flooring","laminat"),this.set("finishing_materials",!1),this.set("demontage",!1),this.set("cement_screed",!1),this.set("heated_flooring",0),this.set("denoising",!1),this.set("entrance_doors",!1),this.set("windows_installation",0),this.set("builtin_furniture",!1),this.set("conditioning",0),this.set("furniture_bool",!1),this.set("appliances_bool_total",!1),this.set("appliances","gorenje"),this.set("transportation_expenses",5)}storageToRequestBody(e){const t={};for(const l in e)"length"!==l&&"costPerMetre"!=l&&("true"!==String(e[l])?"false"!==String(e[l])?isFinite(Number(e[l]))?t[l]=Number(e[l]):t[l]=e[l]:t[l]=0:t[l]=1);return JSON.stringify(t)}}class i{static numberToEncodedLetter(e){if(isNaN(e))return;let t,l=(e=Math.abs(Math.floor(e)))%26,n=e/26;return e<=26?this.numToLetter(e):(n>=1&&(0===l&&n--,t=this.numberToEncodedLetter(n)),0===l&&(l=26),t+this.numToLetter(l))}static numToLetter(e){if(!(e>26||e<0))return 0===e?"":this.alphabet.slice(e-1,e)}}i.alphabet="ABCDEFGHIJKLMNOPQRSTUVWXYZ";class s{}s.kCost="Cost",s.kAmount="Amount",s.kKitchen="Kitchen",s.kLMonth="month";var a=(e,t,l)=>new Promise(((n,i)=>{var s=e=>{try{o(l.next(e))}catch(e){i(e)}},a=e=>{try{o(l.throw(e))}catch(e){i(e)}},o=e=>e.done?n(e.value):Promise.resolve(e.value).then(s,a);o((l=l.apply(e,t)).next())}));$((function(){const o=/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,r=new n,u=r.get("style"),c=(function(e){let t="J";"cozy"==e?t="J":"japandi"==e?t="L":"fusion"==e?t="N":"modern"==e?t="P":"neoclassic"==e&&(t="R")}(u),Boolean(r.get("appliances_bool_total"))),g=Boolean(r.get("furniture_bool")),d=r.get("space"),p=Boolean(r.get("bath")),m=Boolean(r.get("shower")),v=r.get("amount_of_rooms"),h=r.get("amount_of_bathrooms"),C=Boolean(r.get("demontage")),f=r.get("windows_installation"),y=Boolean(r.get("finishing_materials")),k=Boolean(r.get("cement_screed")),w=Boolean(r.get("builtin_furiture")),b=r.get("heated_flooring"),F=Boolean(r.get("denoising")),L=Boolean(r.get("entrance_doors")),_=r.get("conditioning"),x=r.get("flooring"),S=r.get("transportation_expenses"),T=r.get("appliances"),G=r.get("summedPrice"),M=r.get("costPerMetre"),N=$("#furnitureList");let E="",P="",A=0,B=0;const j=(d<=40?3:d<=80?4:d<=100?5:d<=130?6:d<=150?7:d<=175?8:9)+("modern"==u||"neoclassic"==u?1:0);function I(e,t,l){return`<div class="option-block"><div class="division-block pricelist"></div><div class="list-option-container"><span class='name'>${e}</span><span class='list-text amount'>${t}</span><span class='list-text'>${l}</span></div></div>`}function O(e,t){e.append(t)}$("#months").html(j.toString()),$("#total").html(e.formatCurrency(G)),$("#space").html(d.toString()),$("#pricePerMetre").html(e.formatCurrency(M)),fetch("https://docs.google.com/spreadsheets/d/1KkkpKbytztt48mwP1RGgpVFpfke8-IqB0KLWA8Sn2FE/gviz/tq?tqx=out:json&gid=1219923480").then((e=>e.text())).then((n=>{var a,o,G,M,z,J,D,K,q,R,V,H,Q,U,W,Z,Y,X,ee,te,le,ne,ie,se,ae,oe,re,ue,ce,ge,de,pe,me,ve,he,Ce,$e,fe,ye,ke,we,be,Fe,Le,_e,xe,Se,Te,Ge,Me,Ne,Ee,Pe,Ae,Be,je,Ie,Oe,ze,Je,De,Ke,qe;const Re=JSON.parse(n.substring(n.length-2,0).replace("/*O_o*/\ngoogle.visualization.Query.setResponse(","")).table.rows,Ve=new l(Re.map(((e,l)=>e.c.map((function(e,n){var s;if(null!==e&&null!==e.v)return new t(`${i.numberToEncodedLetter(n+1)}${l+1}`,null!=(s=e.v)?s:e.f)})).filter((e=>null!=e)))).reduce(((e,t)=>[...e,...t]))),He=Ve.getCell("S46").numeric(),Qe=Ve.getCell("S44").numeric(),Ue=Ve.getCell("S69").numeric(),We=Ve.getCell("T103").numeric(),Ze=Ve.getCell("S104").numeric();"cozy"==u?(E="I",P="A"):"japandi"==u?(E="K",P="B"):"fusion"==u?(E="M",P="C"):"modern"==u?(E="O",P="D"):"neoclassic"==u&&(E="Q",P="E");let Ye,Xe,et=0;"vynil"==x?(Ye="60",Xe="86",et=d*(d<70?220.33:161.8)*He*3):"parket"==x?(Ye="61",Xe="87",et=d*(d<80?369.96:240.31)*He*2):(Ye="59",Xe="85",et=d*(d<70?201.26:198.81)*He*2);const tt=$("#workList");let lt="";const nt=2523*((v>0?6:0)+(p?2:0)+(m?2:0)+2*h)*He*2*Qe+(p?1:0)*h*2500*2*Qe*He-950*He/41+4e3*(m?1:0)*h*2*Qe*He-800*He/41,it=1974*((v>0?3:0)+(p?1:0)+(m?1:0)+2*h)*He*2*Qe,st=d*h*(d<=100?83.2:33.98)*Qe*He*2,at=(d/v<=50?850*d:24*v*3519)*He*Qe,ot=[Ve.getCell("J47").numeric()/Qe,Ve.getCell("J48").numeric()/Qe,d/v<=50?d*(d<=60?1142.78:d<=95?883.87:819.43)*He*1.45:4*Math.sqrt(d)*3*600*He,d*(d<=60?283.08:d<=95?281.22:d<=124?338.33:362.47)*He*1.35*1.45,d*(d<=60?700.67:d<=100?687.36:d<=130?341.25:317.36)*He*1.1*1.5/2,2100*He,(d/v<50?1.77*(d<=50?1e3*d:990*d):4*Math.sqrt(d)*3*600)*He,d*(d<=60?418.86:d<=100?416.29:d<=135?416.73:416.67)*1.77*He,140*(d<=60?Ve.getCell(`${E}55`).numeric():d<=80?50:d<=120?78:d<=180?114:162)*("modern"==u||"neoclassic"==u?1:0),et,d*(d<=70?114.47:86.84)*He*2,d*(d<=70?206.59:170)*He*2*("japandi"==u||"fusion"==u?1:0)],rt=[m?h:0,p?h:0,1,1,h,h+v,1,1,1,1,"japandi"!==u&&"fusion"!==u?1:0,"japandi"===u||"fusion"===u?1:0],ut=[47,48,50,51,52,53,55,56,57,Ye,63,64];A+=nt,lt=I(Ve.getCell("F44").value(),"",Math.round(nt)+" €"),$("#workList").append(lt),A+=it,lt=I(Ve.getCell("F45").value(),"",Math.round(it)+" €"),$("#workList").append(lt),A+=st,lt=I(Ve.getCell("F46").value(),"",Math.round(st)+" €"),$("#workList").append(lt),A+=at,lt=I(Ve.getCell("F49").value(),"",Math.round(at)+" €"),$("#workList").append(lt);for(let e=0;e<ut.length;e++){const t=ot[e]*rt[e]*Qe;0===t||isNaN(t)||(A+=t,lt=I(Ve.getCell("F"+ut[e]).value(),"",Math.round(t)+" €"),$("#workList").append(lt))}if(y){$("#workList").append('</div><div class="list-option-container margined"></div>'),$("#workList .list-option-container").last().append(`<h4 class="pricelist-header small no-padding">${Ve.getCell("F68").value()}</h4><span class='notation amount'> </span><span class='notation'>${s.kCost}</span>`);const e=[Ve.getCell(`${E}69`).numeric(),Ve.getCell(`${E}70`).numeric(),Ve.getCell(`${E}71`).numeric(),Ve.getCell(`${E}72`).numeric(),Ve.getCell(`${E}73`).numeric(),Ve.getCell(`${E}74`).numeric(),Ve.getCell(`${E}76`).numeric(),Ve.getCell(`${E}77`).numeric(),Ve.getCell(`${E}78`).numeric(),Ve.getCell(`${E}79`).numeric(),Ve.getCell(`${E}80`).numeric(),Ve.getCell(`${E}81`).numeric(),Ve.getCell(`${E}82`).numeric(),Ve.getCell(`${E+Xe}`).numeric()];let t=[h+v,35*h,.66*d,.66*d,.59*d,d<=50?42:d<=90?60:d<=120?84:90,h,Number(p),Number(m),Number(p)+Number(m),h,h,h,d<100?d-7*h:d-10*h];const l=[69,70,71,72,73,74,76,77,78,79,80,81,82,Xe];for(let n=0;n<l.length;n++){const i=e[n]*t[n]*Ve.getCell("S69").numeric()/1.23;0===i||isNaN(i)||(A+=i,lt=I(Ve.getCell("F"+l[n]).value(),"",Math.round(i)+"€"),$("#workList").append(lt))}}lt=`<div class="option-block">\n      <div class="division-block pricelist"></div>\n      <div class="list-option-container">\n        <span class='name'>${Ve.getCell("F93").value()}</span>\n        <span class='list-text amount'>${j} months</span>\n        <span class='list-text'> </span>\n      </div>\n    </div>`,$("#workList").append(lt);const ct=[(41e3*Math.ceil((S+2)/5)/1.35/2/1.5+100*d)*Qe*He,.022*A*He,(2*j*1200+3e3+220*d)*Qe*He],gt=[94,95,96];lt="";for(let t=0;t<gt.length;t++){const l=ct[t];A+=l,lt+=`<div class="option-block">\n        <div class="division-block pricelist"></div>\n        <div class="list-option-container">\n          <span class='name'>${Ve.getCell(`F${gt[t]}`).value()}</span>\n            <span class='list-text amount'></span>\n          <span class='list-text'>${e.formatCurrency(l)} €</span>\n        </div>\n      </div>`}$("#workList").append(lt),lt="",O(tt,'<div class="division-block pricelist"></div><div class="list-option-container summary"></div>'),O($("#workList .list-option-container").last(),`<span class='pricelist-header small no-padding'>Total for construction with components and finishing materials:</span><span class='list-text summary work'>${e.formatCurrency(A)} €</span>`),g&&($("#furnitureList").append('</div><div class="list-option-container"></div>'),$("#furnitureList .list-option-container").last().append(`<h4 class="pricelist-header small no-padding">${s.kKitchen}</h4>\n          <span class='notation amount'>${s.kAmount}</span>\n          <span class='notation'>${s.kCost}</span>`),dt(Ve.getCell("F121").value(),null==(a=Ve.getCell(`${P}121`))?void 0:a.value(),1,Ve.getCell(`${E}121`).numeric(),Ve.getCell("G121").value()),dt(Ve.getCell("F122").value(),null==(o=Ve.getCell(`${P}122`))?void 0:o.value(),4,Ve.getCell(`${E}122`).numeric(),Ve.getCell("G122").value()),dt(Ve.getCell("F123").value(),null==(G=Ve.getCell(`${P}123`))?void 0:G.value(),1,Ve.getCell(`${E}123`).numeric(),Ve.getCell("G123").value()),O($("#furnitureList"),'</div><div class="list-option-container margined"></div>'),O($("#furnitureList .list-option-container").last(),`<h4 class="pricelist-header small no-padding">${Ve.getCell("F124").value()}</h4><span class='notation amount'>${s.kAmount}</span><span class='notation'>${s.kCost}</span>`),dt(Ve.getCell("F124").value(),null==(M=Ve.getCell(P+"124"))?void 0:M.value(),1,null==(z=Ve.getCell(`${E}124`))?void 0:z.numeric(),null==(J=Ve.getCell("G124"))?void 0:J.value()),dt(Ve.getCell("F125").value(),null==(D=Ve.getCell(P+"125"))?void 0:D.value(),1,null==(K=Ve.getCell(`${E}125`))?void 0:K.numeric(),null==(q=Ve.getCell("G125"))?void 0:q.value()),O($("#furnitureList"),'</div><div class="list-option-container margined"></div>'),O($("#furnitureList .list-option-container").last(),`<h4 class="pricelist-header small no-padding">${Ve.getCell("F127").value()}</h4><span class='notation amount'>${s.kAmount}</span><span class='notation'>${s.kCost}</span>`),dt(Ve.getCell("F128").value(),null==(R=Ve.getCell(P+"128"))?void 0:R.value(),1,null==(V=Ve.getCell(`${E}128`))?void 0:V.numeric(),null==(H=Ve.getCell("G128"))?void 0:H.value()),dt(Ve.getCell("F129").value(),null==(Q=Ve.getCell(P+"129"))?void 0:Q.value(),1,null==(U=Ve.getCell(`${E}129`))?void 0:U.numeric(),null==(W=Ve.getCell("G129"))?void 0:W.value()),dt(Ve.getCell("F130").value(),null==(Z=Ve.getCell(P+"130"))?void 0:Z.value(),2,null==(Y=Ve.getCell(`${E}130`))?void 0:Y.numeric(),null==(X=Ve.getCell("G130"))?void 0:X.value()),dt(Ve.getCell("F131").value(),null==(ee=Ve.getCell(P+"131"))?void 0:ee.value(),1,null==(te=Ve.getCell(`${E}131`))?void 0:te.numeric(),null==(le=Ve.getCell("G131"))?void 0:le.value()),dt(Ve.getCell("F132").value(),null==(ne=Ve.getCell(P+"132"))?void 0:ne.value(),1,null==(ie=Ve.getCell(`${E}132`))?void 0:ie.numeric(),null==(se=Ve.getCell("G132"))?void 0:se.value()),O($("#furnitureList"),'</div><div class="list-option-container margined"></div>'),$("#furnitureList .list-option-container").last().append(`<h4 class="pricelist-header small no-padding">${Ve.getCell("F133").value()}</h4><span class='notation amount'>${s.kAmount}</span><span class='notation'>${s.kCost}</span>`),dt(Ve.getCell("F134").value(),null==(ae=Ve.getCell(P+"134"))?void 0:ae.value(),Math.ceil(.48*d),null==(oe=Ve.getCell(`${E}134`))?void 0:oe.numeric(),null==(re=Ve.getCell("G134"))?void 0:re.value()),dt(Ve.getCell("F135").value(),null==(ue=Ve.getCell(P+"135"))?void 0:ue.value(),1,null==(ce=Ve.getCell(`${E}135`))?void 0:ce.numeric(),null==(ge=Ve.getCell("G135"))?void 0:ge.value()),dt(Ve.getCell("F137").value(),null==(de=Ve.getCell(P+"137"))?void 0:de.value(),1,null==(pe=Ve.getCell(`${E}137`))?void 0:pe.numeric(),null==(me=Ve.getCell("G137"))?void 0:me.value()),dt(Ve.getCell("F139").value(),null==(ve=Ve.getCell(P+"139"))?void 0:ve.value(),1,null==(he=Ve.getCell(`${E}139`))?void 0:he.numeric(),null==(Ce=Ve.getCell("G139"))?void 0:Ce.value()),dt(Ve.getCell("F140").value(),null==($e=Ve.getCell(P+"140"))?void 0:$e.value(),1,null==(fe=Ve.getCell(`${E}140`))?void 0:fe.numeric(),null==(ye=Ve.getCell("G140"))?void 0:ye.value()),dt(Ve.getCell("F136").value(),null==(ke=Ve.getCell(P+"136"))?void 0:ke.value(),v>1?1:0,null==(we=Ve.getCell(`${E}136`))?void 0:we.numeric(),null==(be=Ve.getCell("G136"))?void 0:be.value()),dt(Ve.getCell("F138").value(),null==(Fe=Ve.getCell(P+"138"))?void 0:Fe.value(),2,null==(Le=Ve.getCell(`${E}138`))?void 0:Le.numeric(),null==(_e=Ve.getCell("G138"))?void 0:_e.value()),$("#furnitureList").append('</div><div class="list-option-container margined"></div>'),$("#furnitureList .list-option-container").last().append(`<h4 class="pricelist-header small no-padding">${Ve.getCell("F141").value()}</h4>\n            <span class='notation amount'>${s.kAmount}</span>\n            <span class='notation'>${s.kCost}</span>`),dt(Ve.getCell("F142").value(),null==(xe=Ve.getCell(P+"142"))?void 0:xe.value(),v,null==(Se=Ve.getCell(`${E}142`))?void 0:Se.numeric(),null==(Te=Ve.getCell("G142"))?void 0:Te.value()),dt(Ve.getCell("F143").value(),null==(Ge=Ve.getCell(P+"143"))?void 0:Ge.value(),v,null==(Me=Ve.getCell(`${E}143`))?void 0:Me.numeric(),null==(Ne=Ve.getCell("G143"))?void 0:Ne.value()),dt(Ve.getCell("F144").value(),null==(Ee=Ve.getCell(P+"144"))?void 0:Ee.value(),v,null==(Pe=Ve.getCell(`${E}144`))?void 0:Pe.numeric(),null==(Ae=Ve.getCell("G144"))?void 0:Ae.value()),dt(Ve.getCell("F145").value(),null==(Be=Ve.getCell(P+"145"))?void 0:Be.value(),1,null==(je=Ve.getCell(`${E}145`))?void 0:je.numeric(),null==(Ie=Ve.getCell("G145"))?void 0:Ie.value()),dt(Ve.getCell("F146").value(),null==(Oe=Ve.getCell(P+"146"))?void 0:Oe.value(),v-1,null==(ze=Ve.getCell(`${E}146`))?void 0:ze.numeric(),null==(Je=Ve.getCell("G146"))?void 0:Je.value()),O($("#furnitureList"),I(Ve.getCell("F147").value()," ",Math.round(.3*B)+"€")),B*=1.3,O($("#furnitureList"),'<div class="division-block pricelist"></div><div class="list-option-container summary"></div>'),O($("#furnitureList .list-option-container").last(),`<span class='pricelist-header small no-padding'>Total for furniture:</span><span class='list-text summary work'>${e.formatCurrency(B)} €</span>`));if(w||k||y||f||C||b>0||F||L||_){$("#workList").append('</div><div class="list-option-container margined"></div>'),$("#workList .list-option-container").last().append(`<h4 class="pricelist-header small no-padding">${Ve.getCell("F102").value()}</h4><span class='notation amount'></span><span class='notation'>${s.kCost}</span>`);let t=0;const l=[Ve.getCell(`${E}103`).numeric()*d,Ve.getCell(`${E}104`).numeric(),(d<=60?440:410)*He*2*d*Qe/Ze,Ve.getCell(`${E}106`).numeric(),((d<=60?90.02:d<=95?60.78:d<125?58.29:d>=125?79.01:0)+(d<=60?60.91:d<=95?64.57:d<125?63.87:d>=125?66.24:0))*d*We,Ve.getCell(`${E}108`).numeric()/1.23,Ve.getCell(`${E}109`).numeric()*Ue/Ze,Ve.getCell(`${E}110`).numeric()*Ue/Ze,Ve.getCell(`${E}112`).numeric()*d],n=[C?1:0,f,k?1:0,b,F?1:0,L?1:0,w?1:0,w?1:0,_],i=[103,104,105,106,107,108,109,110,112];for(let s=0;s<i.length;s++){const a=l[s]*n[s]*Ve.getCell("S104").numeric();0!==a&&0!=n[s]&&(t+=a,O(tt,I(null==(De=Ve.getCell("F"+i[s]))?void 0:De.value(),"",e.formatCurrency(a)+" €")))}if(_>0){const l=_*Ve.getCell(`${E}113`).numeric()*(1+Ve.getCell("S113").numeric()/100)/Ve.getCell("E5").numeric(),n=.05*l*We;O(tt,I(null==(Ke=Ve.getCell("F113"))?void 0:Ke.value(),"",e.formatCurrency(l)+" €")),O(tt,I(null==(qe=Ve.getCell("F114"))?void 0:qe.value(),"",e.formatCurrency(n)+" €")),t+=n+l}O($("#workList"),'<div class="division-block pricelist"></div><div class="list-option-container summary"></div>'),O($("#workList .list-option-container").last(),`<span class='pricelist-header small no-padding'>Total for options:</span><span class='list-text summary work'>${e.formatCurrency(t)} €</span>`),A+=t}function dt(t,l,n,i,s){g&&0!=n&&n&&i&&(B+=i*n,O(N,'<div class="option-block"><div class="division-block pricelist"></div><div class="list-option-container"></div></div>'),null!==l?O($("#furnitureList .option-block .list-option-container").last(),`<span class='name'>${t}, ${l}</span><span class='list-text amount'>${n} ${s}</span><span class='list-text'>${e.formatCurrency(i*n)} €</span>`):O($("#materialsList .option-block .list-option-container").last(),`<span class='name'>${t}</span><span class='list-text'>${n} ${s}</span>`))}c||$(".comfy-section").toggle(!1),g||$("#furnitureList").toggle(!1),O($("#materialsList"),'<div class="division-block pricelist"></div><div class="list-option-container summary"></div>'),O($("#materialsList .list-option-container").last(),`<span class='pricelist-header small no-padding'>Total for construction with components and finishing materials:</span><span class='list-text summary work'>${e.formatCurrency(A)} €</span>`);let pt=0;const mt=document.getElementById("appliancesListTotal"),vt=[];if("gorenje"===T?vt.push(154,9):"bosch"===T?vt.push(169,10):"smeg"===T?vt.push(185,9):vt.push(154,9),c){let t="";for(let l=0;l<vt[1];l++){const n=.9*Ve.getCell("D"+(vt[0]+l)).numeric();t+=`<div class="option-block">\n          <div class="division-block pricelist"></div>\n          <div class="list-option-container"><span class='name'>${Ve.getCell("F"+(vt[0]+l)).value()} ${Ve.getCell("E"+(vt[0]+l)).value()}</span>\n            <span class='list-text amount'>1 piece</span>\n            <span class='list-text'>${e.formatCurrency(n)}€</span>\n            </div>\n            </div>`,pt+=n}const l=Ve.getCell("G35").numeric(),n=Ve.getCell("E5").numeric();pt+=vt[1]*l/n,t+=`<div class="option-block"><div class="division-block pricelist"></div><div class="list-option-container"><span class='name'>Appliances delivery</span><span class='list-text amount'></span><span class='list-text'>${e.formatCurrency(vt[1]*l/n)} €</span></div></div>`,t+=`<div class="option-block"><div class="division-block pricelist"></div><div class="list-option-container"><span class='name'>${Ve.getCell("F165").value()}</span><span class='list-text amount'></span><span class='list-text'>${e.formatCurrency(.2*pt)} €</span></div></div>`,pt*=1.2,t+=`<div class="division-block pricelist"></div><div class="list-option-container summary"><span class='pricelist-header small no-padding'>Total for appliances:</span><span class='list-text summary work'>${e.formatCurrency(pt)} €</span></div>`,mt.innerHTML=mt.innerHTML+t}else mt.style.display="none";if(w){const t=Ve.getCell(`${E}109`).numeric();$("#kitchenPrice").html(e.formatCurrency(t*Ue)+" €")}else $("#kitchenSection").toggle(!1);A+=pt,1-Math.abs(r.get("summedPrice")/A)<=.06?($("#totalPriceTotal").html(e.formatCurrency(A)+" € *"),$("#totalVAT").html(e.formatCurrency(1.23*A)+" € *")):($("#totalPriceTotal").html(e.formatCurrency(r.get("summedPrice")/1.23)),$("#totalVAT").html(e.formatCurrency(r.get("summedPrice"))))})),$(".form-2").on("submit",(function(e){return a(this,null,(function*(){if(e.preventDefault(),$("#agreementCheckbox").is(":checked")?$(".warning.agreementcheckbox").toggle(!1):$(".warning.agreementcheckbox").toggle(!0),$("#sPhone").val()||$("#sEmail").val()?$(".warning.inputs.phone").toggle(!1):$(".warning.inputs.phone").toggle(!0),$("#sName").val()?$(".warning.inputs.name").toggle(!1):$(".warning.inputs.name").toggle(!0),0==$("#sEmail").val().length?($(".warning.inputs.wrongEmail").toggle(!1),$(".warning.inputs.emptyEmail").toggle(!0)):o.test($("#sEmail").val())?($(".warning.inputs.wrongEmail").toggle(!1),$(".warning.inputs.emptyEmail").toggle(!1)):($(".warning.inputs.wrongEmail").toggle(!0),$(".warning.inputs.emptyEmail").toggle(!1)),$(".warning").is(":visible"))return e.preventDefault(),!1;!function(){a(this,null,(function*(){$(".modal-note").html("Please wait...");const e=$("html").clone().find("script").remove().end().html(),t=new File(['<!DOCTYPE html><html lang="en_US">'+e+"</html>"],"source.html",{type:"text/html"}),l=new FormData;l.append("file",t,"source.html");const n=yield fetch("https://api.fortes.agency/convert",{method:"POST",body:l}),i=yield n.json(),s=i.success?i.id:"";$(".modal-note").html("We sent your estimation to your email address. If you don't see it, check Spam folder or wait a few minutes."),fetch("https://api.fortes.agency/mail",{method:"POST",body:JSON.stringify({fileId:s,fileName:localStorage.getItem("style"),recipientMail:$("#sEmail").val()}),headers:{"Content-Type":"application/json"}}).finally((()=>setTimeout((()=>{window.location.assign("/sdyakuiemo")}),5e3)))}))}()}))})),$("img").each((function(){$(this).attr("loading","eager")}))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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MkNBOUksRUFBRSxPQUFPK0ksTUFBSyxXQUNaL0ksRUFBRWxELE1BQU1rTSxLQUFLLFVBQVcsUUFDMUIsR0EyQkYsRyIsInNvdXJjZXMiOlsid2VicGFjazovL2ZvcnRlcy8uL3NyYy91dGlscy9Gb3JtYXR0ZXIudHMiLCJ3ZWJwYWNrOi8vZm9ydGVzLy4vc3JjL21vZGVscy9DZWxsLnRzIiwid2VicGFjazovL2ZvcnRlcy8uL3NyYy9tb2RlbHMvVGFibGUudHMiLCJ3ZWJwYWNrOi8vZm9ydGVzLy4vc3JjL3V0aWxzL0xvY2FsU3RvcmFnZUhhbmRsZXIudHMiLCJ3ZWJwYWNrOi8vZm9ydGVzLy4vc3JjL3V0aWxzL1V0aWxzLnRzIiwid2VicGFjazovL2ZvcnRlcy8uL3NyYy91dGlscy9TdHJpbmdDb25zdHMudHMiLCJ3ZWJwYWNrOi8vZm9ydGVzLy4vc3JjL3NwZWNpZmljYXRpb25fcG9ydHVnYWxfNTkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiYWJzdHJhY3QgY2xhc3MgRm9ybWF0dGVyIHtcbiAgcHVibGljIHN0YXRpYyBmb3JtYXRDdXJyZW5jeShudW06IG51bWJlcikge1xuICAgIHJldHVybiBJbnRsLk51bWJlckZvcm1hdChcInVrLVVBXCIsIHtcbiAgICAgIG1heGltdW1GcmFjdGlvbkRpZ2l0czogMixcbiAgICB9KS5mb3JtYXQobnVtKTtcbiAgfVxufVxuXG5leHBvcnQgeyBGb3JtYXR0ZXIgfTtcbiIsImltcG9ydCB7IEZvcm1hdHRlciB9IGZyb20gXCIuLi91dGlscy9Gb3JtYXR0ZXJcIjtcblxuZXhwb3J0IGNsYXNzIENlbGwge1xuICBwdWJsaWMgcmVhZG9ubHkgYWRkcmVzczogc3RyaW5nO1xuICBwcml2YXRlIHJlYWRvbmx5IF92YWx1ZTogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKGFkZHJlc3M6IHN0cmluZywgdmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuYWRkcmVzcyA9IGFkZHJlc3M7XG4gICAgdGhpcy5fdmFsdWUgPSB2YWx1ZTtcbiAgfVxuXG4gIGhhc1ZhbHVlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZSAhPT0gbnVsbCAmJiB0aGlzLl92YWx1ZS5sZW5ndGggPiAwO1xuICB9XG5cbiAgcHVibGljIHZhbHVlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICB9XG5cbiAgcHVibGljIG51bWVyaWMoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gcGFyc2VGbG9hdCh0aGlzLl92YWx1ZSk7XG4gIH1cblxuICBwdWJsaWMgZm9ybWF0dGVkTnVtZXJpY2FsKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIEZvcm1hdHRlci5mb3JtYXRDdXJyZW5jeShwYXJzZUZsb2F0KHRoaXMudmFsdWUoKSkpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBDZWxsIH0gZnJvbSBcIi4vQ2VsbFwiO1xuXG5leHBvcnQgY2xhc3MgVGFibGUge1xuICBwdWJsaWMgY2VsbHM6IENlbGxbXTtcblxuICBjb25zdHJ1Y3RvcihjZWxsczogQ2VsbFtdKSB7XG4gICAgdGhpcy5jZWxscyA9IGNlbGxzO1xuICB9XG5cbiAgZ2V0Q2VsbChhZGRyZXNzOiBzdHJpbmcpOiBDZWxsIHtcbiAgICBjb25zdCByZXN1bHQ6IENlbGxbXSA9IHRoaXMuY2VsbHMuZmlsdGVyKFxuICAgICAgKGl0ZW0pID0+IGl0ZW0uYWRkcmVzcyA9PT0gYWRkcmVzc1xuICAgICk7XG5cbiAgICBpZiAocmVzdWx0Lmxlbmd0aCA9PSAwKSB7XG4gICAgICByZXR1cm4gbmV3IENlbGwoYWRkcmVzcywgXCIwXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmVzdWx0WzBdO1xuICAgIH1cbiAgfVxufVxuIiwiY2xhc3MgTG9jYWxTdG9yYWdlSGFuZGxlciB7XG4gIGdldChuYW1lOiBzdHJpbmcpOiBhbnkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShuYW1lKSk7XG4gICAgfSBjYXRjaCB7XG4gICAgICByZXR1cm4gbG9jYWxTdG9yYWdlLmdldEl0ZW0obmFtZSk7XG4gICAgfVxuICB9XG5cbiAgc2V0KG5hbWU6IHN0cmluZywgdmFsdWU6IGFueSk6IHZvaWQge1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKG5hbWUsIHZhbHVlLnRvU3RyaW5nKCkpO1xuICB9XG5cbiAgaW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLnNldChcInN0eWxlXCIsIFwiY296eVwiKTtcbiAgICB0aGlzLnNldChcImJhdGhcIiwgdHJ1ZSk7XG4gICAgdGhpcy5zZXQoXCJzaG93ZXJcIiwgZmFsc2UpO1xuICAgIHRoaXMuc2V0KFwiY2VpbGluZ1wiLCBcInN0cmV0Y2ggY2VpbGluZ1wiKTtcbiAgICB0aGlzLnNldChcImZsb29yaW5nXCIsIFwibGFtaW5hdFwiKTtcbiAgICB0aGlzLnNldChcImh5Z2llbmljX3Nob3dlclwiLCBmYWxzZSk7XG4gICAgdGhpcy5zZXQoXCJzZWNvbmRfZ3lwc3VtX2xheWVyXCIsIGZhbHNlKTtcbiAgICB0aGlzLnNldChcImZsb29yX3NjcmVlZFwiLCBmYWxzZSk7XG4gICAgdGhpcy5zZXQoXCJoZWF0ZWRfZmxvb3JpbmdcIiwgZmFsc2UpO1xuICAgIHRoaXMuc2V0KFwiZGVub2lzaW5nXCIsIGZhbHNlKTtcbiAgICB0aGlzLnNldChcImVudHJhbmNlX2Rvb3JzXCIsIGZhbHNlKTtcbiAgICB0aGlzLnNldChcImNvbmRpdGlvbmluZ1wiLCBmYWxzZSk7XG4gICAgdGhpcy5zZXQoXCJhbW91bnRfb2Zfcm9vbXNcIiwgMik7XG4gICAgdGhpcy5zZXQoXCJhbW91bnRfb2ZfYmF0aHJvb21zXCIsIDEpO1xuICAgIHRoaXMuc2V0KFwiYXBwbGlhbmNlc1wiLCBcImdvcmVuamVcIik7XG4gICAgdGhpcy5zZXQoXCJhcHBsaWFuY2VzX2Jvb2xfdG90YWxcIiwgZmFsc2UpO1xuICAgIHRoaXMuc2V0KFwiZnVybml0dXJlX2Jvb2xcIiwgdHJ1ZSk7XG4gICAgdGhpcy5zZXQoXCJzcGFjZVwiLCA1MCk7XG4gIH1cblxuICBpbml0UG9ydHVnYWwoKTogdm9pZCB7XG4gICAgdGhpcy5zZXQoXCJzdHlsZVwiLCBcImNvenlcIik7XG4gICAgdGhpcy5zZXQoXCJzcGFjZVwiLCA1MCk7XG4gICAgdGhpcy5zZXQoXCJhbW91bnRfb2Zfcm9vbXNcIiwgMik7XG4gICAgdGhpcy5zZXQoXCJhbW91bnRfb2ZfYmF0aHJvb21zXCIsIDEpO1xuICAgIHRoaXMuc2V0KFwiYmF0aFwiLCB0cnVlKTtcbiAgICB0aGlzLnNldChcInNob3dlclwiLCBmYWxzZSk7XG4gICAgdGhpcy5zZXQoXCJmbG9vcmluZ1wiLCBcImxhbWluYXRcIik7XG4gICAgdGhpcy5zZXQoXCJmaW5pc2hpbmdfbWF0ZXJpYWxzXCIsIGZhbHNlKTtcbiAgICB0aGlzLnNldChcImRlbW9udGFnZVwiLCBmYWxzZSk7XG4gICAgdGhpcy5zZXQoXCJjZW1lbnRfc2NyZWVkXCIsIGZhbHNlKTtcbiAgICB0aGlzLnNldChcImhlYXRlZF9mbG9vcmluZ1wiLCAwKTtcbiAgICB0aGlzLnNldChcImRlbm9pc2luZ1wiLCBmYWxzZSk7XG4gICAgdGhpcy5zZXQoXCJlbnRyYW5jZV9kb29yc1wiLCBmYWxzZSk7XG4gICAgdGhpcy5zZXQoXCJ3aW5kb3dzX2luc3RhbGxhdGlvblwiLCAwKTtcbiAgICB0aGlzLnNldChcImJ1aWx0aW5fZnVybml0dXJlXCIsIGZhbHNlKTtcbiAgICB0aGlzLnNldChcImNvbmRpdGlvbmluZ1wiLCAwKTtcbiAgICB0aGlzLnNldChcImZ1cm5pdHVyZV9ib29sXCIsIGZhbHNlKTtcbiAgICB0aGlzLnNldChcImFwcGxpYW5jZXNfYm9vbF90b3RhbFwiLCBmYWxzZSk7XG4gICAgdGhpcy5zZXQoXCJhcHBsaWFuY2VzXCIsIFwiZ29yZW5qZVwiKTtcbiAgICB0aGlzLnNldChcInRyYW5zcG9ydGF0aW9uX2V4cGVuc2VzXCIsIDUpO1xuICB9XG5cbiAgc3RvcmFnZVRvUmVxdWVzdEJvZHkoc3RvcmFnZTogU3RvcmFnZSk6IHN0cmluZyB7XG4gICAgY29uc3QgcmVzdWx0ID0ge307XG5cbiAgICBmb3IgKGNvbnN0IGtleSBpbiBzdG9yYWdlKSB7XG4gICAgICBpZiAoa2V5ID09PSBcImxlbmd0aFwiIHx8IGtleSA9PSBcImNvc3RQZXJNZXRyZVwiKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoU3RyaW5nKHN0b3JhZ2Vba2V5XSkgPT09IFwidHJ1ZVwiKSB7XG4gICAgICAgIHJlc3VsdFtrZXldID0gMTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9IGVsc2UgaWYgKFN0cmluZyhzdG9yYWdlW2tleV0pID09PSBcImZhbHNlXCIpIHtcbiAgICAgICAgcmVzdWx0W2tleV0gPSAwO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRmluaXRlKE51bWJlcihzdG9yYWdlW2tleV0pKSkge1xuICAgICAgICByZXN1bHRba2V5XSA9IE51bWJlcihzdG9yYWdlW2tleV0pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgcmVzdWx0W2tleV0gPSBzdG9yYWdlW2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHJlc3VsdCk7XG4gIH1cbn1cblxuZXhwb3J0IHsgTG9jYWxTdG9yYWdlSGFuZGxlciB9O1xuIiwiZXhwb3J0IGFic3RyYWN0IGNsYXNzIFV0aWxzIHtcbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgYWxwaGFiZXQgPSBcIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaXCI7XG5cbiAgcHVibGljIHN0YXRpYyBudW1iZXJUb0VuY29kZWRMZXR0ZXIobnVtYmVyOiBudW1iZXIpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgIGlmIChpc05hTihudW1iZXIpKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIG51bWJlciA9IE1hdGguYWJzKE1hdGguZmxvb3IobnVtYmVyKSk7XG5cbiAgICBsZXQgaW5kZXggPSBudW1iZXIgJSAyNjtcbiAgICBsZXQgcXVvdGllbnQgPSBudW1iZXIgLyAyNjtcbiAgICBsZXQgcmVzdWx0OiBzdHJpbmc7XG5cbiAgICBpZiAobnVtYmVyIDw9IDI2KSB7XG4gICAgICByZXR1cm4gdGhpcy5udW1Ub0xldHRlcihudW1iZXIpO1xuICAgIH1cblxuICAgIGlmIChxdW90aWVudCA+PSAxKSB7XG4gICAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgICAgcXVvdGllbnQtLTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCA9IHRoaXMubnVtYmVyVG9FbmNvZGVkTGV0dGVyKHF1b3RpZW50KTtcbiAgICB9XG5cbiAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgIGluZGV4ID0gMjY7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdCArIHRoaXMubnVtVG9MZXR0ZXIoaW5kZXgpO1xuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgbnVtVG9MZXR0ZXIobnVtYmVyOiBudW1iZXIpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgIGlmIChudW1iZXIgPiAyNiB8fCBudW1iZXIgPCAwKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGlmIChudW1iZXIgPT09IDApIHtcbiAgICAgIHJldHVybiBcIlwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5hbHBoYWJldC5zbGljZShudW1iZXIgLSAxLCBudW1iZXIpO1xuICAgIH1cbiAgfVxufVxuIiwiZXhwb3J0IGFic3RyYWN0IGNsYXNzIFN0cmluZ0NvbnN0cyB7XG4gIHN0YXRpYyBrQ29zdDogc3RyaW5nID0gXCJDb3N0XCI7XG4gIHN0YXRpYyBrQW1vdW50OiBzdHJpbmcgPSBcIkFtb3VudFwiO1xuICBzdGF0aWMga0tpdGNoZW46IHN0cmluZyA9IFwiS2l0Y2hlblwiO1xuICBzdGF0aWMga0xNb250aDogc3RyaW5nID0gXCJtb250aFwiO1xufVxuIiwiaW1wb3J0IHsgQ2VsbCB9IGZyb20gXCIuL21vZGVscy9DZWxsXCI7XG5pbXBvcnQgeyBUYWJsZSB9IGZyb20gXCIuL21vZGVscy9UYWJsZVwiO1xuaW1wb3J0IHsgUmVzcG9uc2VSb3cgfSBmcm9tIFwiLi9tb2RlbHMvaW50ZXJmYWNlcy9Sb3dcIjtcbmltcG9ydCB7IExvY2FsU3RvcmFnZUhhbmRsZXIgfSBmcm9tIFwiLi91dGlscy9Mb2NhbFN0b3JhZ2VIYW5kbGVyXCI7XG5pbXBvcnQgeyBVdGlscyB9IGZyb20gXCIuL3V0aWxzL1V0aWxzXCI7XG5pbXBvcnQgeyBGb3JtYXR0ZXIgfSBmcm9tIFwiLi91dGlscy9Gb3JtYXR0ZXJcIjtcbmltcG9ydCB7IFN0cmluZ0NvbnN0cyB9IGZyb20gXCIuL3V0aWxzL1N0cmluZ0NvbnN0c1wiO1xuXG4kKGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgZW1haWxSZWdleCA9XG4gICAgL14oKFtePD4oKVxcW1xcXVxcXFwuLDs6XFxzQFwiXSsoXFwuW148PigpXFxbXFxdXFxcXC4sOzpcXHNAXCJdKykqKXwoXCIuK1wiKSlAKChcXFtbMC05XXsxLDN9XFwuWzAtOV17MSwzfVxcLlswLTldezEsM31cXC5bMC05XXsxLDN9XSl8KChbYS16QS1aXFwtMC05XStcXC4pK1thLXpBLVpdezIsfSkpJC87XG4gIGNvbnN0IHN0b3JhZ2UgPSBuZXcgTG9jYWxTdG9yYWdlSGFuZGxlcigpO1xuXG4gIGNvbnN0IHN0eWxlOiBzdHJpbmcgPSBzdG9yYWdlLmdldChcInN0eWxlXCIpO1xuICBjb25zdCBzdHlsZUxldHRlciA9IGdldFJpZ2h0U3R5bGVMZXR0ZXIoc3R5bGUpO1xuICBjb25zdCBhcHBsaWFuY2VzQm9vbFRvdGFsID0gQm9vbGVhbihzdG9yYWdlLmdldChcImFwcGxpYW5jZXNfYm9vbF90b3RhbFwiKSksXG4gICAgZnVybml0dXJlQm9vbDogYm9vbGVhbiA9IEJvb2xlYW4oc3RvcmFnZS5nZXQoXCJmdXJuaXR1cmVfYm9vbFwiKSksXG4gICAgc3BhY2U6IG51bWJlciA9IHN0b3JhZ2UuZ2V0KFwic3BhY2VcIiksXG4gICAgYmF0aDogYm9vbGVhbiA9IEJvb2xlYW4oc3RvcmFnZS5nZXQoXCJiYXRoXCIpKSxcbiAgICBzaG93ZXI6IGJvb2xlYW4gPSBCb29sZWFuKHN0b3JhZ2UuZ2V0KFwic2hvd2VyXCIpKSxcbiAgICBhbW91bnRPZlJvb21zOiBudW1iZXIgPSBzdG9yYWdlLmdldChcImFtb3VudF9vZl9yb29tc1wiKSxcbiAgICBhbW91bnRPZkJhdGhyb29tczogbnVtYmVyID0gc3RvcmFnZS5nZXQoXCJhbW91bnRfb2ZfYmF0aHJvb21zXCIpLFxuICAgIGRlbW9udGFnZTogYm9vbGVhbiA9IEJvb2xlYW4oc3RvcmFnZS5nZXQoXCJkZW1vbnRhZ2VcIikpLFxuICAgIHdpbmRvd3M6IG51bWJlciA9IHN0b3JhZ2UuZ2V0KFwid2luZG93c19pbnN0YWxsYXRpb25cIiksXG4gICAgZmluaXNoaW5nTWF0ZXJpYWxzOiBib29sZWFuID0gQm9vbGVhbihzdG9yYWdlLmdldChcImZpbmlzaGluZ19tYXRlcmlhbHNcIikpLFxuICAgIGNlbWVudFNjcmVlZDogYm9vbGVhbiA9IEJvb2xlYW4oc3RvcmFnZS5nZXQoXCJjZW1lbnRfc2NyZWVkXCIpKSxcbiAgICBidWlsdGluRnVybml0dXJlOiBib29sZWFuID0gQm9vbGVhbihzdG9yYWdlLmdldChcImJ1aWx0aW5fZnVyaXR1cmVcIikpLFxuICAgIGhlYXRlZEZsb29yaW5nOiBudW1iZXIgPSBzdG9yYWdlLmdldChcImhlYXRlZF9mbG9vcmluZ1wiKSxcbiAgICBkZW5vaXNpbmc6IGJvb2xlYW4gPSBCb29sZWFuKHN0b3JhZ2UuZ2V0KFwiZGVub2lzaW5nXCIpKSxcbiAgICBlbnRyYW5jZURvb3JzOiBib29sZWFuID0gQm9vbGVhbihzdG9yYWdlLmdldChcImVudHJhbmNlX2Rvb3JzXCIpKSxcbiAgICBjb25kaXRpb25pbmc6IG51bWJlciA9IHN0b3JhZ2UuZ2V0KFwiY29uZGl0aW9uaW5nXCIpLFxuICAgIGZsb29yaW5nOiBzdHJpbmcgPSBzdG9yYWdlLmdldChcImZsb29yaW5nXCIpLFxuICAgIHRyYW5zcG9ydGF0aW9uRXhwZW5zZXM6IG51bWJlciA9IHN0b3JhZ2UuZ2V0KFwidHJhbnNwb3J0YXRpb25fZXhwZW5zZXNcIiksXG4gICAgYXBwbGlhbmNlczogc3RyaW5nID0gc3RvcmFnZS5nZXQoXCJhcHBsaWFuY2VzXCIpLFxuICAgIHN1bW1lZFByaWNlOiBudW1iZXIgPSBzdG9yYWdlLmdldChcInN1bW1lZFByaWNlXCIpLFxuICAgIGNvc3RQZXJNZXRyZTogbnVtYmVyID0gc3RvcmFnZS5nZXQoXCJjb3N0UGVyTWV0cmVcIiksXG4gICAgJGZ1cm5pdHVyZSA9ICQoXCIjZnVybml0dXJlTGlzdFwiKTtcblxuICBsZXQgbGV0dGVyOiBzdHJpbmcgPSBcIlwiLFxuICAgIGxldHRlck1vZGVsOiBzdHJpbmcgPSBcIlwiLFxuICAgIHdvcmtTdW0gPSAwLFxuICAgIGZ1cm5pdHVyZVN1bSA9IDA7XG5cbiAgY29uc3QgbW9udGhzID1cbiAgICAoc3BhY2UgPD0gNDBcbiAgICAgID8gM1xuICAgICAgOiBzcGFjZSA8PSA4MFxuICAgICAgPyA0XG4gICAgICA6IHNwYWNlIDw9IDEwMFxuICAgICAgPyA1XG4gICAgICA6IHNwYWNlIDw9IDEzMFxuICAgICAgPyA2XG4gICAgICA6IHNwYWNlIDw9IDE1MFxuICAgICAgPyA3XG4gICAgICA6IHNwYWNlIDw9IDE3NVxuICAgICAgPyA4XG4gICAgICA6IDkpICsgKHN0eWxlID09IFwibW9kZXJuXCIgfHwgc3R5bGUgPT0gXCJuZW9jbGFzc2ljXCIgPyAxIDogMCk7XG5cbiAgJChcIiNtb250aHNcIikuaHRtbChtb250aHMudG9TdHJpbmcoKSk7XG4gICQoXCIjdG90YWxcIikuaHRtbChGb3JtYXR0ZXIuZm9ybWF0Q3VycmVuY3koc3VtbWVkUHJpY2UpKTtcbiAgJChcIiNzcGFjZVwiKS5odG1sKHNwYWNlLnRvU3RyaW5nKCkpO1xuICAkKFwiI3ByaWNlUGVyTWV0cmVcIikuaHRtbChGb3JtYXR0ZXIuZm9ybWF0Q3VycmVuY3koY29zdFBlck1ldHJlKSk7XG5cbiAgZmV0Y2goXG4gICAgXCJodHRwczovL2RvY3MuZ29vZ2xlLmNvbS9zcHJlYWRzaGVldHMvZC8xS2trcEtieXR6dHQ0OG13UDFSR2dwVkZwZmtlOC1JcUIwS0xXQThTbjJGRS9ndml6L3RxP3RxeD1vdXQ6anNvbiZnaWQ9MTIxOTkyMzQ4MFwiXG4gIClcbiAgICAudGhlbigocmVzOiBSZXNwb25zZSkgPT4gcmVzLnRleHQoKSlcbiAgICAudGhlbigodGV4dDogc3RyaW5nKSA9PiB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IEpTT04ucGFyc2UoXG4gICAgICAgIHRleHRcbiAgICAgICAgICAuc3Vic3RyaW5nKHRleHQubGVuZ3RoIC0gMiwgMClcbiAgICAgICAgICAucmVwbGFjZShgLypPX28qL1xcbmdvb2dsZS52aXN1YWxpemF0aW9uLlF1ZXJ5LnNldFJlc3BvbnNlKGAsIFwiXCIpXG4gICAgICApO1xuXG4gICAgICBjb25zdCByZXNwb25zZVJvd3M6IEFycmF5PFJlc3BvbnNlUm93PiA9IHJlc3BvbnNlLnRhYmxlLnJvd3M7XG5cbiAgICAgIGNvbnN0IHRhYmxlOiBUYWJsZSA9IG5ldyBUYWJsZShcbiAgICAgICAgcmVzcG9uc2VSb3dzXG4gICAgICAgICAgLm1hcCgocm93OiBSZXNwb25zZVJvdywgb3V0ZXJJbmRleDogbnVtYmVyKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gcm93LmNcbiAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAoY2VsbCwgaW5kZXg6IG51bWJlcik6IENlbGwge1xuICAgICAgICAgICAgICAgIGlmIChjZWxsID09PSBudWxsIHx8IGNlbGwudiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ2VsbChcbiAgICAgICAgICAgICAgICAgIGAke1V0aWxzLm51bWJlclRvRW5jb2RlZExldHRlcihpbmRleCArIDEpfSR7b3V0ZXJJbmRleCArIDF9YCxcbiAgICAgICAgICAgICAgICAgIGNlbGwudiA/PyBjZWxsLmZcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAuZmlsdGVyKChjZWxsKSA9PiBjZWxsICE9IG51bGwpO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLnJlZHVjZSgocHYsIGN2KSA9PiBbLi4ucHYsIC4uLmN2XSlcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IFM0NiA9IHRhYmxlLmdldENlbGwoXCJTNDZcIikubnVtZXJpYygpO1xuICAgICAgY29uc3QgUzQ0ID0gdGFibGUuZ2V0Q2VsbChcIlM0NFwiKS5udW1lcmljKCk7XG4gICAgICBjb25zdCBTNjkgPSB0YWJsZS5nZXRDZWxsKFwiUzY5XCIpLm51bWVyaWMoKTtcbiAgICAgIGNvbnN0IFQxMDMgPSB0YWJsZS5nZXRDZWxsKFwiVDEwM1wiKS5udW1lcmljKCk7XG4gICAgICBjb25zdCBTMTA0ID0gdGFibGUuZ2V0Q2VsbChcIlMxMDRcIikubnVtZXJpYygpO1xuXG4gICAgICBpZiAoc3R5bGUgPT0gXCJjb3p5XCIpIHtcbiAgICAgICAgbGV0dGVyID0gXCJJXCI7XG4gICAgICAgIGxldHRlck1vZGVsID0gXCJBXCI7XG4gICAgICB9IGVsc2UgaWYgKHN0eWxlID09IFwiamFwYW5kaVwiKSB7XG4gICAgICAgIGxldHRlciA9IFwiS1wiO1xuICAgICAgICBsZXR0ZXJNb2RlbCA9IFwiQlwiO1xuICAgICAgfSBlbHNlIGlmIChzdHlsZSA9PSBcImZ1c2lvblwiKSB7XG4gICAgICAgIGxldHRlciA9IFwiTVwiO1xuICAgICAgICBsZXR0ZXJNb2RlbCA9IFwiQ1wiO1xuICAgICAgfSBlbHNlIGlmIChzdHlsZSA9PSBcIm1vZGVyblwiKSB7XG4gICAgICAgIGxldHRlciA9IFwiT1wiO1xuICAgICAgICBsZXR0ZXJNb2RlbCA9IFwiRFwiO1xuICAgICAgfSBlbHNlIGlmIChzdHlsZSA9PSBcIm5lb2NsYXNzaWNcIikge1xuICAgICAgICBsZXR0ZXIgPSBcIlFcIjtcbiAgICAgICAgbGV0dGVyTW9kZWwgPSBcIkVcIjtcbiAgICAgIH1cblxuICAgICAgbGV0IGZsb29yaW5nUHJpY2U6IG51bWJlciA9IDA7XG4gICAgICBsZXQgZmxvb3JpbmdOdW06IHN0cmluZywgZmxvb3JpbmdOdW0yOiBzdHJpbmc7XG5cbiAgICAgIGlmIChmbG9vcmluZyA9PSBcInZ5bmlsXCIpIHtcbiAgICAgICAgZmxvb3JpbmdOdW0gPSBcIjYwXCI7XG4gICAgICAgIGZsb29yaW5nTnVtMiA9IFwiODZcIjtcbiAgICAgICAgZmxvb3JpbmdQcmljZSA9IHNwYWNlICogKHNwYWNlIDwgNzAgPyAyMjAuMzMgOiAxNjEuOCkgKiBTNDYgKiAzO1xuICAgICAgfSBlbHNlIGlmIChmbG9vcmluZyA9PSBcInBhcmtldFwiKSB7XG4gICAgICAgIGZsb29yaW5nTnVtID0gXCI2MVwiO1xuICAgICAgICBmbG9vcmluZ051bTIgPSBcIjg3XCI7XG4gICAgICAgIGZsb29yaW5nUHJpY2UgPSBzcGFjZSAqIChzcGFjZSA8IDgwID8gMzY5Ljk2IDogMjQwLjMxKSAqIFM0NiAqIDI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvL2xhbWluYXRcbiAgICAgICAgZmxvb3JpbmdOdW0gPSBcIjU5XCI7XG4gICAgICAgIGZsb29yaW5nTnVtMiA9IFwiODVcIjtcbiAgICAgICAgZmxvb3JpbmdQcmljZSA9IHNwYWNlICogKHNwYWNlIDwgNzAgPyAyMDEuMjYgOiAxOTguODEpICogUzQ2ICogMjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgJHdvcmsgPSAkKFwiI3dvcmtMaXN0XCIpO1xuICAgICAgbGV0IHRleHRPYmplY3QgPSBcIlwiO1xuICAgICAgY29uc3Qgd2F0ZXIgPVxuICAgICAgICAyNTIzICpcbiAgICAgICAgICAoKGFtb3VudE9mUm9vbXMgPiAwID8gNiA6IDApICtcbiAgICAgICAgICAgIChiYXRoID8gMiA6IDApICtcbiAgICAgICAgICAgIChzaG93ZXIgPyAyIDogMCkgK1xuICAgICAgICAgICAgYW1vdW50T2ZCYXRocm9vbXMgKiAyKSAqXG4gICAgICAgICAgLy9pbmZsYXRpb25cbiAgICAgICAgICBTNDYgKlxuICAgICAgICAgIDIgKlxuICAgICAgICAgIFM0NCArXG4gICAgICAgIChiYXRoID8gMSA6IDApICogYW1vdW50T2ZCYXRocm9vbXMgKiAyNTAwICogMiAqIFM0NCAqIFM0NiAtXG4gICAgICAgICg5NTAgKiBTNDYpIC8gNDEgK1xuICAgICAgICAoc2hvd2VyID8gMSA6IDApICogNDAwMCAqIGFtb3VudE9mQmF0aHJvb21zICogMiAqIFM0NCAqIFM0NiAtXG4gICAgICAgICg4MDAgKiBTNDYpIC8gNDE7XG4gICAgICBjb25zdCBjYW5hbGlzYXRpb24gPVxuICAgICAgICAxOTc0ICpcbiAgICAgICAgKChhbW91bnRPZlJvb21zID4gMCA/IDMgOiAwKSArXG4gICAgICAgICAgKGJhdGggPyAxIDogMCkgK1xuICAgICAgICAgIChzaG93ZXIgPyAxIDogMCkgK1xuICAgICAgICAgIGFtb3VudE9mQmF0aHJvb21zICogMikgKlxuICAgICAgICBTNDYgKlxuICAgICAgICAyICpcbiAgICAgICAgUzQ0O1xuICAgICAgY29uc3QgdmVudHMgPVxuICAgICAgICBzcGFjZSAqXG4gICAgICAgIGFtb3VudE9mQmF0aHJvb21zICpcbiAgICAgICAgKHNwYWNlIDw9IDEwMCA/IDgzLjIgOiAzMy45OCkgKlxuICAgICAgICBTNDQgKlxuICAgICAgICBTNDYgKlxuICAgICAgICAyO1xuICAgICAgY29uc3QgZWxlY3RyaWNpdHkgPVxuICAgICAgICAoc3BhY2UgLyBhbW91bnRPZlJvb21zIDw9IDUwXG4gICAgICAgICAgPyA4NTAgKiBzcGFjZVxuICAgICAgICAgIDogYW1vdW50T2ZSb29tcyAqIDI0ICogMzUxOSkgKlxuICAgICAgICBTNDYgKlxuICAgICAgICBTNDQ7XG5cbiAgICAgIGNvbnN0IHdvcmtQcmljZUFycmF5ID0gW1xuICAgICAgICB0YWJsZS5nZXRDZWxsKGBKNDdgKS5udW1lcmljKCkgLyBTNDQsXG4gICAgICAgIHRhYmxlLmdldENlbGwoYEo0OGApLm51bWVyaWMoKSAvIFM0NCxcbiAgICAgICAgc3BhY2UgLyBhbW91bnRPZlJvb21zIDw9IDUwXG4gICAgICAgICAgPyBzcGFjZSAqXG4gICAgICAgICAgICAoc3BhY2UgPD0gNjBcbiAgICAgICAgICAgICAgPyAxMTQyLjc4XG4gICAgICAgICAgICAgIDogc3BhY2UgPD0gOTVcbiAgICAgICAgICAgICAgPyA4ODMuODdcbiAgICAgICAgICAgICAgOiBzcGFjZSA8PSAxMjVcbiAgICAgICAgICAgICAgPyA4MTkuNDNcbiAgICAgICAgICAgICAgOiA4MTkuNDMpICpcbiAgICAgICAgICAgIFM0NiAqXG4gICAgICAgICAgICAxLjQ1XG4gICAgICAgICAgOiBNYXRoLnNxcnQoc3BhY2UpICogNCAqIDMgKiA2MDAgKiBTNDYsXG4gICAgICAgIHNwYWNlICpcbiAgICAgICAgICAoc3BhY2UgPD0gNjBcbiAgICAgICAgICAgID8gMjgzLjA4XG4gICAgICAgICAgICA6IHNwYWNlIDw9IDk1XG4gICAgICAgICAgICA/IDI4MS4yMlxuICAgICAgICAgICAgOiBzcGFjZSA8PSAxMjRcbiAgICAgICAgICAgID8gMzM4LjMzXG4gICAgICAgICAgICA6IDM2Mi40NykgKlxuICAgICAgICAgIFM0NiAqXG4gICAgICAgICAgMS4zNSAqXG4gICAgICAgICAgMS40NSxcbiAgICAgICAgKHNwYWNlICpcbiAgICAgICAgICAoc3BhY2UgPD0gNjBcbiAgICAgICAgICAgID8gNzAwLjY3XG4gICAgICAgICAgICA6IHNwYWNlIDw9IDEwMFxuICAgICAgICAgICAgPyA2ODcuMzZcbiAgICAgICAgICAgIDogc3BhY2UgPD0gMTMwXG4gICAgICAgICAgICA/IDM0MS4yNVxuICAgICAgICAgICAgOiAzMTcuMzYpICpcbiAgICAgICAgICBTNDYgKlxuICAgICAgICAgIDEuMSAqXG4gICAgICAgICAgMS41KSAvXG4gICAgICAgICAgMixcbiAgICAgICAgNzAwICogMyAqIFM0NixcbiAgICAgICAgKHNwYWNlIC8gYW1vdW50T2ZSb29tcyA8IDUwXG4gICAgICAgICAgPyAoc3BhY2UgPD0gNTAgPyAxMDAwICogc3BhY2UgOiA5OTAgKiBzcGFjZSkgKiAxLjc3XG4gICAgICAgICAgOiBNYXRoLnNxcnQoc3BhY2UpICogNCAqIDMgKiA2MDApICogUzQ2LFxuICAgICAgICBzcGFjZSAqXG4gICAgICAgICAgKHNwYWNlIDw9IDYwXG4gICAgICAgICAgICA/IDQxOC44NlxuICAgICAgICAgICAgOiBzcGFjZSA8PSAxMDBcbiAgICAgICAgICAgID8gNDE2LjI5XG4gICAgICAgICAgICA6IHNwYWNlIDw9IDEzNVxuICAgICAgICAgICAgPyA0MTYuNzNcbiAgICAgICAgICAgIDogNDE2LjY3KSAqXG4gICAgICAgICAgMS43NyAqXG4gICAgICAgICAgUzQ2LFxuICAgICAgICAxNDAgKlxuICAgICAgICAgIChzcGFjZSA8PSA2MFxuICAgICAgICAgICAgPyB0YWJsZS5nZXRDZWxsKGAke2xldHRlcn01NWApLm51bWVyaWMoKVxuICAgICAgICAgICAgOiBzcGFjZSA8PSA4MFxuICAgICAgICAgICAgPyA1MFxuICAgICAgICAgICAgOiBzcGFjZSA8PSAxMjBcbiAgICAgICAgICAgID8gNzhcbiAgICAgICAgICAgIDogc3BhY2UgPD0gMTgwXG4gICAgICAgICAgICA/IDExNFxuICAgICAgICAgICAgOiAxNjIpICpcbiAgICAgICAgICAoc3R5bGUgPT0gXCJtb2Rlcm5cIiB8fCBzdHlsZSA9PSBcIm5lb2NsYXNzaWNcIiA/IDEgOiAwKSxcbiAgICAgICAgZmxvb3JpbmdQcmljZSxcbiAgICAgICAgc3BhY2UgKiAoc3BhY2UgPD0gNzAgPyAxMTQuNDcgOiA4Ni44NCkgKiBTNDYgKiAyLFxuICAgICAgICBzcGFjZSAqXG4gICAgICAgICAgKHNwYWNlIDw9IDcwID8gMjA2LjU5IDogMTcwKSAqXG4gICAgICAgICAgUzQ2ICpcbiAgICAgICAgICAyICpcbiAgICAgICAgICAoc3R5bGUgPT0gXCJqYXBhbmRpXCIgfHwgc3R5bGUgPT0gXCJmdXNpb25cIiA/IDEgOiAwKSxcbiAgICAgIF07XG5cbiAgICAgIGNvbnN0IHdvcmtBbW91bnRBcnJheSA9IFtcbiAgICAgICAgc2hvd2VyID8gYW1vdW50T2ZCYXRocm9vbXMgOiAwLFxuICAgICAgICBiYXRoID8gYW1vdW50T2ZCYXRocm9vbXMgOiAwLFxuICAgICAgICAxLFxuICAgICAgICAxLFxuICAgICAgICBhbW91bnRPZkJhdGhyb29tcyxcbiAgICAgICAgYW1vdW50T2ZCYXRocm9vbXMgKyBhbW91bnRPZlJvb21zLFxuICAgICAgICAxLFxuICAgICAgICAxLFxuICAgICAgICAxLFxuICAgICAgICAxLFxuICAgICAgICBzdHlsZSAhPT0gXCJqYXBhbmRpXCIgJiYgc3R5bGUgIT09IFwiZnVzaW9uXCIgPyAxIDogMCxcbiAgICAgICAgc3R5bGUgPT09IFwiamFwYW5kaVwiIHx8IHN0eWxlID09PSBcImZ1c2lvblwiID8gMSA6IDAsXG4gICAgICBdO1xuICAgICAgY29uc3Qgd29ya0FkcmVzc2VzQXJyYXkgPSBbXG4gICAgICAgIDQ3LFxuICAgICAgICA0OCxcbiAgICAgICAgNTAsXG4gICAgICAgIDUxLFxuICAgICAgICA1MixcbiAgICAgICAgNTMsXG4gICAgICAgIDU1LFxuICAgICAgICA1NixcbiAgICAgICAgNTcsXG4gICAgICAgIGZsb29yaW5nTnVtLFxuICAgICAgICA2MyxcbiAgICAgICAgNjQsXG4gICAgICBdO1xuXG4gICAgICB3b3JrU3VtICs9IHdhdGVyO1xuICAgICAgdGV4dE9iamVjdCA9IHJldHVybk9iamVjdChcbiAgICAgICAgdGFibGUuZ2V0Q2VsbChcIkY0NFwiKS52YWx1ZSgpLFxuICAgICAgICBcIlwiLFxuICAgICAgICBNYXRoLnJvdW5kKHdhdGVyKSArIFwiIOKCrFwiXG4gICAgICApO1xuICAgICAgJChcIiN3b3JrTGlzdFwiKS5hcHBlbmQodGV4dE9iamVjdCk7XG5cbiAgICAgIHdvcmtTdW0gKz0gY2FuYWxpc2F0aW9uO1xuICAgICAgdGV4dE9iamVjdCA9IHJldHVybk9iamVjdChcbiAgICAgICAgdGFibGUuZ2V0Q2VsbChcIkY0NVwiKS52YWx1ZSgpLFxuICAgICAgICBcIlwiLFxuICAgICAgICBNYXRoLnJvdW5kKGNhbmFsaXNhdGlvbikgKyBcIiDigqxcIlxuICAgICAgKTtcbiAgICAgICQoXCIjd29ya0xpc3RcIikuYXBwZW5kKHRleHRPYmplY3QpO1xuXG4gICAgICB3b3JrU3VtICs9IHZlbnRzO1xuICAgICAgdGV4dE9iamVjdCA9IHJldHVybk9iamVjdChcbiAgICAgICAgdGFibGUuZ2V0Q2VsbChcIkY0NlwiKS52YWx1ZSgpLFxuICAgICAgICBcIlwiLFxuICAgICAgICBNYXRoLnJvdW5kKHZlbnRzKSArIFwiIOKCrFwiXG4gICAgICApO1xuICAgICAgJChcIiN3b3JrTGlzdFwiKS5hcHBlbmQodGV4dE9iamVjdCk7XG5cbiAgICAgIHdvcmtTdW0gKz0gZWxlY3RyaWNpdHk7XG4gICAgICB0ZXh0T2JqZWN0ID0gcmV0dXJuT2JqZWN0KFxuICAgICAgICB0YWJsZS5nZXRDZWxsKFwiRjQ5XCIpLnZhbHVlKCksXG4gICAgICAgIFwiXCIsXG4gICAgICAgIE1hdGgucm91bmQoZWxlY3RyaWNpdHkpICsgXCIg4oKsXCJcbiAgICAgICk7XG4gICAgICAkKFwiI3dvcmtMaXN0XCIpLmFwcGVuZCh0ZXh0T2JqZWN0KTtcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB3b3JrQWRyZXNzZXNBcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBwcmljZSA9IHdvcmtQcmljZUFycmF5W2ldICogd29ya0Ftb3VudEFycmF5W2ldICogUzQ0O1xuXG4gICAgICAgIGlmIChwcmljZSA9PT0gMCB8fCBpc05hTihwcmljZSkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHdvcmtTdW0gKz0gcHJpY2U7XG4gICAgICAgIHRleHRPYmplY3QgPSByZXR1cm5PYmplY3QoXG4gICAgICAgICAgdGFibGUuZ2V0Q2VsbChcIkZcIiArIHdvcmtBZHJlc3Nlc0FycmF5W2ldKS52YWx1ZSgpLFxuICAgICAgICAgIFwiXCIsXG4gICAgICAgICAgTWF0aC5yb3VuZChwcmljZSkgKyBcIiDigqxcIlxuICAgICAgICApO1xuXG4gICAgICAgICQoXCIjd29ya0xpc3RcIikuYXBwZW5kKHRleHRPYmplY3QpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZmluaXNoaW5nTWF0ZXJpYWxzKSB7XG4gICAgICAgICQoXCIjd29ya0xpc3RcIikuYXBwZW5kKFxuICAgICAgICAgICc8L2Rpdj48ZGl2IGNsYXNzPVwibGlzdC1vcHRpb24tY29udGFpbmVyIG1hcmdpbmVkXCI+PC9kaXY+J1xuICAgICAgICApO1xuICAgICAgICAkKFwiI3dvcmtMaXN0IC5saXN0LW9wdGlvbi1jb250YWluZXJcIilcbiAgICAgICAgICAubGFzdCgpXG4gICAgICAgICAgLmFwcGVuZChcbiAgICAgICAgICAgIGA8aDQgY2xhc3M9XFxcInByaWNlbGlzdC1oZWFkZXIgc21hbGwgbm8tcGFkZGluZ1xcXCI+JHt0YWJsZVxuICAgICAgICAgICAgICAuZ2V0Q2VsbChcIkY2OFwiKVxuICAgICAgICAgICAgICAudmFsdWUoKX08L2g0PjxzcGFuIGNsYXNzPVxcJ25vdGF0aW9uIGFtb3VudFxcJz4gPC9zcGFuPjxzcGFuIGNsYXNzPVxcJ25vdGF0aW9uXFwnPiR7XG4gICAgICAgICAgICAgIFN0cmluZ0NvbnN0cy5rQ29zdFxuICAgICAgICAgICAgfTwvc3Bhbj5gXG4gICAgICAgICAgKTtcblxuICAgICAgICBjb25zdCBtYXRlcmlhbHNQcmljZUFycmF5ID0gW1xuICAgICAgICAgIHRhYmxlLmdldENlbGwoYCR7bGV0dGVyfTY5YCkubnVtZXJpYygpLFxuICAgICAgICAgIHRhYmxlLmdldENlbGwoYCR7bGV0dGVyfTcwYCkubnVtZXJpYygpLFxuICAgICAgICAgIHRhYmxlLmdldENlbGwoYCR7bGV0dGVyfTcxYCkubnVtZXJpYygpLFxuICAgICAgICAgIHRhYmxlLmdldENlbGwoYCR7bGV0dGVyfTcyYCkubnVtZXJpYygpLFxuICAgICAgICAgIHRhYmxlLmdldENlbGwoYCR7bGV0dGVyfTczYCkubnVtZXJpYygpLFxuICAgICAgICAgIHRhYmxlLmdldENlbGwoYCR7bGV0dGVyfTc0YCkubnVtZXJpYygpLFxuICAgICAgICAgIHRhYmxlLmdldENlbGwoYCR7bGV0dGVyfTc2YCkubnVtZXJpYygpLFxuICAgICAgICAgIHRhYmxlLmdldENlbGwoYCR7bGV0dGVyfTc3YCkubnVtZXJpYygpLFxuICAgICAgICAgIHRhYmxlLmdldENlbGwoYCR7bGV0dGVyfTc4YCkubnVtZXJpYygpLFxuICAgICAgICAgIHRhYmxlLmdldENlbGwoYCR7bGV0dGVyfTc5YCkubnVtZXJpYygpLFxuICAgICAgICAgIHRhYmxlLmdldENlbGwoYCR7bGV0dGVyfTgwYCkubnVtZXJpYygpLFxuICAgICAgICAgIHRhYmxlLmdldENlbGwoYCR7bGV0dGVyfTgxYCkubnVtZXJpYygpLFxuICAgICAgICAgIHRhYmxlLmdldENlbGwoYCR7bGV0dGVyfTgyYCkubnVtZXJpYygpLFxuICAgICAgICAgIHRhYmxlLmdldENlbGwoYCR7bGV0dGVyICsgZmxvb3JpbmdOdW0yfWApLm51bWVyaWMoKSxcbiAgICAgICAgXTtcbiAgICAgICAgbGV0IG1hdGVyaWFsc0Ftb3VudEFycmF5ID0gW1xuICAgICAgICAgIGFtb3VudE9mQmF0aHJvb21zICsgYW1vdW50T2ZSb29tcyxcbiAgICAgICAgICBhbW91bnRPZkJhdGhyb29tcyAqIDM1LFxuICAgICAgICAgIDAuNjYgKiBzcGFjZSxcbiAgICAgICAgICAwLjY2ICogc3BhY2UsXG4gICAgICAgICAgMC41OSAqIHNwYWNlLFxuICAgICAgICAgIHNwYWNlIDw9IDUwID8gNDIgOiBzcGFjZSA8PSA5MCA/IDYwIDogc3BhY2UgPD0gMTIwID8gODQgOiA5MCxcbiAgICAgICAgICBhbW91bnRPZkJhdGhyb29tcyxcbiAgICAgICAgICBOdW1iZXIoYmF0aCksXG4gICAgICAgICAgTnVtYmVyKHNob3dlciksXG4gICAgICAgICAgTnVtYmVyKGJhdGgpICsgTnVtYmVyKHNob3dlciksXG4gICAgICAgICAgYW1vdW50T2ZCYXRocm9vbXMsXG4gICAgICAgICAgYW1vdW50T2ZCYXRocm9vbXMsXG4gICAgICAgICAgYW1vdW50T2ZCYXRocm9vbXMsXG4gICAgICAgICAgc3BhY2UgPCAxMDBcbiAgICAgICAgICAgID8gc3BhY2UgLSBhbW91bnRPZkJhdGhyb29tcyAqIDdcbiAgICAgICAgICAgIDogc3BhY2UgLSBhbW91bnRPZkJhdGhyb29tcyAqIDEwLFxuICAgICAgICBdO1xuICAgICAgICBjb25zdCBtYXRlcmlhbHNBZHJlc3Nlc0FycmF5ID0gW1xuICAgICAgICAgIDY5LFxuICAgICAgICAgIDcwLFxuICAgICAgICAgIDcxLFxuICAgICAgICAgIDcyLFxuICAgICAgICAgIDczLFxuICAgICAgICAgIDc0LFxuICAgICAgICAgIDc2LFxuICAgICAgICAgIDc3LFxuICAgICAgICAgIDc4LFxuICAgICAgICAgIDc5LFxuICAgICAgICAgIDgwLFxuICAgICAgICAgIDgxLFxuICAgICAgICAgIDgyLFxuXG4gICAgICAgICAgZmxvb3JpbmdOdW0yLFxuICAgICAgICBdO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWF0ZXJpYWxzQWRyZXNzZXNBcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGNvbnN0IHByaWNlID1cbiAgICAgICAgICAgIChtYXRlcmlhbHNQcmljZUFycmF5W2ldICpcbiAgICAgICAgICAgICAgbWF0ZXJpYWxzQW1vdW50QXJyYXlbaV0gKlxuICAgICAgICAgICAgICB0YWJsZS5nZXRDZWxsKFwiUzY5XCIpLm51bWVyaWMoKSkgL1xuICAgICAgICAgICAgMS4yMztcblxuICAgICAgICAgIGlmIChwcmljZSA9PT0gMCB8fCBpc05hTihwcmljZSkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHdvcmtTdW0gKz0gcHJpY2U7XG4gICAgICAgICAgdGV4dE9iamVjdCA9IHJldHVybk9iamVjdChcbiAgICAgICAgICAgIHRhYmxlLmdldENlbGwoXCJGXCIgKyBtYXRlcmlhbHNBZHJlc3Nlc0FycmF5W2ldKS52YWx1ZSgpLFxuICAgICAgICAgICAgXCJcIixcbiAgICAgICAgICAgIE1hdGgucm91bmQocHJpY2UpICsgXCLigqxcIlxuICAgICAgICAgICk7XG5cbiAgICAgICAgICAkKFwiI3dvcmtMaXN0XCIpLmFwcGVuZCh0ZXh0T2JqZWN0KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0ZXh0T2JqZWN0ID0gYDxkaXYgY2xhc3M9XFxcIm9wdGlvbi1ibG9ja1xcXCI+XG4gICAgICA8ZGl2IGNsYXNzPVxcXCJkaXZpc2lvbi1ibG9jayBwcmljZWxpc3RcXFwiPjwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cXFwibGlzdC1vcHRpb24tY29udGFpbmVyXFxcIj5cbiAgICAgICAgPHNwYW4gY2xhc3M9XFwnbmFtZVxcJz4ke3RhYmxlLmdldENlbGwoXCJGOTNcIikudmFsdWUoKX08L3NwYW4+XG4gICAgICAgIDxzcGFuIGNsYXNzPVxcJ2xpc3QtdGV4dCBhbW91bnRcXCc+JHttb250aHN9IG1vbnRoczwvc3Bhbj5cbiAgICAgICAgPHNwYW4gY2xhc3M9XFwnbGlzdC10ZXh0XFwnPiA8L3NwYW4+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5gO1xuICAgICAgJChcIiN3b3JrTGlzdFwiKS5hcHBlbmQodGV4dE9iamVjdCk7XG5cbiAgICAgIGNvbnN0IGNhc3VhbHRpZXNQcmljZUFycmF5ID0gW1xuICAgICAgICAoKDQxMDAwICogTWF0aC5jZWlsKCh0cmFuc3BvcnRhdGlvbkV4cGVuc2VzICsgMikgLyA1KSkgL1xuICAgICAgICAgIDEuMzUgL1xuICAgICAgICAgIDIgL1xuICAgICAgICAgIDEuNSArXG4gICAgICAgICAgMTAwICogc3BhY2UpICpcbiAgICAgICAgICBTNDQgKlxuICAgICAgICAgIFM0NixcbiAgICAgICAgd29ya1N1bSAqIDAuMDIyICogUzQ2LFxuICAgICAgICAobW9udGhzICogMiAqIDEyMDAgKyAzMDAwICsgc3BhY2UgKiAyMjApICogUzQ0ICogUzQ2LFxuICAgICAgXTtcbiAgICAgIGNvbnN0IGNhc3VhbHRpZXNBZHJlc3Nlc0FycmF5ID0gWzk0LCA5NSwgOTZdO1xuICAgICAgdGV4dE9iamVjdCA9IFwiXCI7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2FzdWFsdGllc0FkcmVzc2VzQXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgcHJpY2UgPSBjYXN1YWx0aWVzUHJpY2VBcnJheVtpXTtcbiAgICAgICAgd29ya1N1bSArPSBwcmljZTtcbiAgICAgICAgdGV4dE9iamVjdCArPSBgPGRpdiBjbGFzcz1cXFwib3B0aW9uLWJsb2NrXFxcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiZGl2aXNpb24tYmxvY2sgcHJpY2VsaXN0XFxcIj48L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cXFwibGlzdC1vcHRpb24tY29udGFpbmVyXFxcIj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cXCduYW1lXFwnPiR7dGFibGVcbiAgICAgICAgICAgIC5nZXRDZWxsKGBGJHtjYXN1YWx0aWVzQWRyZXNzZXNBcnJheVtpXX1gKVxuICAgICAgICAgICAgLnZhbHVlKCl9PC9zcGFuPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFwnbGlzdC10ZXh0IGFtb3VudFxcJz48L3NwYW4+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XFwnbGlzdC10ZXh0XFwnPiR7Rm9ybWF0dGVyLmZvcm1hdEN1cnJlbmN5KHByaWNlKX0g4oKsPC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PmA7XG4gICAgICB9XG4gICAgICAkKFwiI3dvcmtMaXN0XCIpLmFwcGVuZCh0ZXh0T2JqZWN0KTtcbiAgICAgIHRleHRPYmplY3QgPSBcIlwiO1xuXG4gICAgICBhcHBlbmRPYmplY3QoXG4gICAgICAgICR3b3JrLFxuICAgICAgICAnPGRpdiBjbGFzcz1cImRpdmlzaW9uLWJsb2NrIHByaWNlbGlzdFwiPjwvZGl2PjxkaXYgY2xhc3M9XCJsaXN0LW9wdGlvbi1jb250YWluZXIgc3VtbWFyeVwiPjwvZGl2PidcbiAgICAgICk7XG4gICAgICBhcHBlbmRPYmplY3QoXG4gICAgICAgICQoXCIjd29ya0xpc3QgLmxpc3Qtb3B0aW9uLWNvbnRhaW5lclwiKS5sYXN0KCksXG4gICAgICAgIGA8c3BhbiBjbGFzcz1cXCdwcmljZWxpc3QtaGVhZGVyIHNtYWxsIG5vLXBhZGRpbmdcXCc+VG90YWwgZm9yIGNvbnN0cnVjdGlvbiB3aXRoIGNvbXBvbmVudHMgYW5kIGZpbmlzaGluZyBtYXRlcmlhbHM6PC9zcGFuPjxzcGFuIGNsYXNzPVxcJ2xpc3QtdGV4dCBzdW1tYXJ5IHdvcmtcXCc+JHtGb3JtYXR0ZXIuZm9ybWF0Q3VycmVuY3koXG4gICAgICAgICAgd29ya1N1bVxuICAgICAgICApfSDigqw8L3NwYW4+YFxuICAgICAgKTtcblxuICAgICAgaWYgKGZ1cm5pdHVyZUJvb2wpIHtcbiAgICAgICAgJChcIiNmdXJuaXR1cmVMaXN0XCIpLmFwcGVuZChcbiAgICAgICAgICAnPC9kaXY+PGRpdiBjbGFzcz1cImxpc3Qtb3B0aW9uLWNvbnRhaW5lclwiPjwvZGl2PidcbiAgICAgICAgKTtcbiAgICAgICAgJChcIiNmdXJuaXR1cmVMaXN0IC5saXN0LW9wdGlvbi1jb250YWluZXJcIilcbiAgICAgICAgICAubGFzdCgpXG4gICAgICAgICAgLmFwcGVuZChcbiAgICAgICAgICAgIGA8aDQgY2xhc3M9XFxcInByaWNlbGlzdC1oZWFkZXIgc21hbGwgbm8tcGFkZGluZ1xcXCI+JHtTdHJpbmdDb25zdHMua0tpdGNoZW59PC9oND5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cXCdub3RhdGlvbiBhbW91bnRcXCc+JHtTdHJpbmdDb25zdHMua0Ftb3VudH08L3NwYW4+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XFwnbm90YXRpb25cXCc+JHtTdHJpbmdDb25zdHMua0Nvc3R9PC9zcGFuPmBcbiAgICAgICAgICApO1xuXG4gICAgICAgIGFwcGVuZEZ1cm5pdHVyZU9wdGlvbihcbiAgICAgICAgICB0YWJsZS5nZXRDZWxsKFwiRjEyMVwiKS52YWx1ZSgpLFxuICAgICAgICAgIHRhYmxlLmdldENlbGwoYCR7bGV0dGVyTW9kZWx9MTIxYCk/LnZhbHVlKCksXG4gICAgICAgICAgMSxcbiAgICAgICAgICB0YWJsZS5nZXRDZWxsKGAke2xldHRlcn0xMjFgKS5udW1lcmljKCksXG4gICAgICAgICAgdGFibGUuZ2V0Q2VsbChcIkcxMjFcIikudmFsdWUoKVxuICAgICAgICApO1xuXG4gICAgICAgIGFwcGVuZEZ1cm5pdHVyZU9wdGlvbihcbiAgICAgICAgICB0YWJsZS5nZXRDZWxsKFwiRjEyMlwiKS52YWx1ZSgpLFxuICAgICAgICAgIHRhYmxlLmdldENlbGwoYCR7bGV0dGVyTW9kZWx9MTIyYCk/LnZhbHVlKCksXG4gICAgICAgICAgNCxcbiAgICAgICAgICB0YWJsZS5nZXRDZWxsKGAke2xldHRlcn0xMjJgKS5udW1lcmljKCksXG4gICAgICAgICAgdGFibGUuZ2V0Q2VsbChcIkcxMjJcIikudmFsdWUoKVxuICAgICAgICApO1xuXG4gICAgICAgIGFwcGVuZEZ1cm5pdHVyZU9wdGlvbihcbiAgICAgICAgICB0YWJsZS5nZXRDZWxsKFwiRjEyM1wiKS52YWx1ZSgpLFxuICAgICAgICAgIHRhYmxlLmdldENlbGwoYCR7bGV0dGVyTW9kZWx9MTIzYCk/LnZhbHVlKCksXG4gICAgICAgICAgMSxcbiAgICAgICAgICB0YWJsZS5nZXRDZWxsKGAke2xldHRlcn0xMjNgKS5udW1lcmljKCksXG4gICAgICAgICAgdGFibGUuZ2V0Q2VsbChcIkcxMjNcIikudmFsdWUoKVxuICAgICAgICApO1xuXG4gICAgICAgIGFwcGVuZE9iamVjdChcbiAgICAgICAgICAkKFwiI2Z1cm5pdHVyZUxpc3RcIiksXG4gICAgICAgICAgJzwvZGl2PjxkaXYgY2xhc3M9XCJsaXN0LW9wdGlvbi1jb250YWluZXIgbWFyZ2luZWRcIj48L2Rpdj4nXG4gICAgICAgICk7XG4gICAgICAgIGFwcGVuZE9iamVjdChcbiAgICAgICAgICAkKFwiI2Z1cm5pdHVyZUxpc3QgLmxpc3Qtb3B0aW9uLWNvbnRhaW5lclwiKS5sYXN0KCksXG4gICAgICAgICAgYDxoNCBjbGFzcz1cXFwicHJpY2VsaXN0LWhlYWRlciBzbWFsbCBuby1wYWRkaW5nXFxcIj4ke3RhYmxlXG4gICAgICAgICAgICAuZ2V0Q2VsbChcIkYxMjRcIilcbiAgICAgICAgICAgIC52YWx1ZSgpfTwvaDQ+PHNwYW4gY2xhc3M9XFwnbm90YXRpb24gYW1vdW50XFwnPiR7XG4gICAgICAgICAgICBTdHJpbmdDb25zdHMua0Ftb3VudFxuICAgICAgICAgIH08L3NwYW4+PHNwYW4gY2xhc3M9XFwnbm90YXRpb25cXCc+JHtTdHJpbmdDb25zdHMua0Nvc3R9PC9zcGFuPmBcbiAgICAgICAgKTtcblxuICAgICAgICBhcHBlbmRGdXJuaXR1cmVPcHRpb24oXG4gICAgICAgICAgdGFibGUuZ2V0Q2VsbChcIkYxMjRcIikudmFsdWUoKSxcbiAgICAgICAgICB0YWJsZS5nZXRDZWxsKGxldHRlck1vZGVsICsgXCIxMjRcIik/LnZhbHVlKCksXG4gICAgICAgICAgMSxcbiAgICAgICAgICB0YWJsZS5nZXRDZWxsKGAke2xldHRlcn0xMjRgKT8ubnVtZXJpYygpLFxuICAgICAgICAgIHRhYmxlLmdldENlbGwoXCJHMTI0XCIpPy52YWx1ZSgpXG4gICAgICAgICk7XG4gICAgICAgIGFwcGVuZEZ1cm5pdHVyZU9wdGlvbihcbiAgICAgICAgICB0YWJsZS5nZXRDZWxsKFwiRjEyNVwiKS52YWx1ZSgpLFxuICAgICAgICAgIHRhYmxlLmdldENlbGwobGV0dGVyTW9kZWwgKyBcIjEyNVwiKT8udmFsdWUoKSxcbiAgICAgICAgICAxLFxuICAgICAgICAgIHRhYmxlLmdldENlbGwoYCR7bGV0dGVyfTEyNWApPy5udW1lcmljKCksXG4gICAgICAgICAgdGFibGUuZ2V0Q2VsbChcIkcxMjVcIik/LnZhbHVlKClcbiAgICAgICAgKTtcblxuICAgICAgICBhcHBlbmRPYmplY3QoXG4gICAgICAgICAgJChcIiNmdXJuaXR1cmVMaXN0XCIpLFxuICAgICAgICAgICc8L2Rpdj48ZGl2IGNsYXNzPVwibGlzdC1vcHRpb24tY29udGFpbmVyIG1hcmdpbmVkXCI+PC9kaXY+J1xuICAgICAgICApO1xuICAgICAgICBhcHBlbmRPYmplY3QoXG4gICAgICAgICAgJChcIiNmdXJuaXR1cmVMaXN0IC5saXN0LW9wdGlvbi1jb250YWluZXJcIikubGFzdCgpLFxuICAgICAgICAgIGA8aDQgY2xhc3M9XFxcInByaWNlbGlzdC1oZWFkZXIgc21hbGwgbm8tcGFkZGluZ1xcXCI+JHt0YWJsZVxuICAgICAgICAgICAgLmdldENlbGwoXCJGMTI3XCIpXG4gICAgICAgICAgICAudmFsdWUoKX08L2g0PjxzcGFuIGNsYXNzPVxcJ25vdGF0aW9uIGFtb3VudFxcJz4ke1xuICAgICAgICAgICAgU3RyaW5nQ29uc3RzLmtBbW91bnRcbiAgICAgICAgICB9PC9zcGFuPjxzcGFuIGNsYXNzPVxcJ25vdGF0aW9uXFwnPiR7U3RyaW5nQ29uc3RzLmtDb3N0fTwvc3Bhbj5gXG4gICAgICAgICk7XG5cbiAgICAgICAgYXBwZW5kRnVybml0dXJlT3B0aW9uKFxuICAgICAgICAgIHRhYmxlLmdldENlbGwoXCJGMTI4XCIpLnZhbHVlKCksXG4gICAgICAgICAgdGFibGUuZ2V0Q2VsbChsZXR0ZXJNb2RlbCArIFwiMTI4XCIpPy52YWx1ZSgpLFxuICAgICAgICAgIDEsXG4gICAgICAgICAgdGFibGUuZ2V0Q2VsbChgJHtsZXR0ZXJ9MTI4YCk/Lm51bWVyaWMoKSxcbiAgICAgICAgICB0YWJsZS5nZXRDZWxsKFwiRzEyOFwiKT8udmFsdWUoKVxuICAgICAgICApO1xuICAgICAgICBhcHBlbmRGdXJuaXR1cmVPcHRpb24oXG4gICAgICAgICAgdGFibGUuZ2V0Q2VsbChcIkYxMjlcIikudmFsdWUoKSxcbiAgICAgICAgICB0YWJsZS5nZXRDZWxsKGxldHRlck1vZGVsICsgXCIxMjlcIik/LnZhbHVlKCksXG4gICAgICAgICAgMSxcbiAgICAgICAgICB0YWJsZS5nZXRDZWxsKGAke2xldHRlcn0xMjlgKT8ubnVtZXJpYygpLFxuICAgICAgICAgIHRhYmxlLmdldENlbGwoXCJHMTI5XCIpPy52YWx1ZSgpXG4gICAgICAgICk7XG4gICAgICAgIGFwcGVuZEZ1cm5pdHVyZU9wdGlvbihcbiAgICAgICAgICB0YWJsZS5nZXRDZWxsKFwiRjEzMFwiKS52YWx1ZSgpLFxuICAgICAgICAgIHRhYmxlLmdldENlbGwobGV0dGVyTW9kZWwgKyBcIjEzMFwiKT8udmFsdWUoKSxcbiAgICAgICAgICAyLFxuICAgICAgICAgIHRhYmxlLmdldENlbGwoYCR7bGV0dGVyfTEzMGApPy5udW1lcmljKCksXG4gICAgICAgICAgdGFibGUuZ2V0Q2VsbChcIkcxMzBcIik/LnZhbHVlKClcbiAgICAgICAgKTtcblxuICAgICAgICBhcHBlbmRGdXJuaXR1cmVPcHRpb24oXG4gICAgICAgICAgdGFibGUuZ2V0Q2VsbChcIkYxMzFcIikudmFsdWUoKSxcbiAgICAgICAgICB0YWJsZS5nZXRDZWxsKGxldHRlck1vZGVsICsgXCIxMzFcIik/LnZhbHVlKCksXG4gICAgICAgICAgMSxcbiAgICAgICAgICB0YWJsZS5nZXRDZWxsKGAke2xldHRlcn0xMzFgKT8ubnVtZXJpYygpLFxuICAgICAgICAgIHRhYmxlLmdldENlbGwoXCJHMTMxXCIpPy52YWx1ZSgpXG4gICAgICAgICk7XG4gICAgICAgIGFwcGVuZEZ1cm5pdHVyZU9wdGlvbihcbiAgICAgICAgICB0YWJsZS5nZXRDZWxsKFwiRjEzMlwiKS52YWx1ZSgpLFxuICAgICAgICAgIHRhYmxlLmdldENlbGwobGV0dGVyTW9kZWwgKyBcIjEzMlwiKT8udmFsdWUoKSxcbiAgICAgICAgICAxLFxuICAgICAgICAgIHRhYmxlLmdldENlbGwoYCR7bGV0dGVyfTEzMmApPy5udW1lcmljKCksXG4gICAgICAgICAgdGFibGUuZ2V0Q2VsbChcIkcxMzJcIik/LnZhbHVlKClcbiAgICAgICAgKTtcblxuICAgICAgICBhcHBlbmRPYmplY3QoXG4gICAgICAgICAgJChcIiNmdXJuaXR1cmVMaXN0XCIpLFxuICAgICAgICAgICc8L2Rpdj48ZGl2IGNsYXNzPVwibGlzdC1vcHRpb24tY29udGFpbmVyIG1hcmdpbmVkXCI+PC9kaXY+J1xuICAgICAgICApO1xuICAgICAgICAkKFwiI2Z1cm5pdHVyZUxpc3QgLmxpc3Qtb3B0aW9uLWNvbnRhaW5lclwiKVxuICAgICAgICAgIC5sYXN0KClcbiAgICAgICAgICAuYXBwZW5kKFxuICAgICAgICAgICAgYDxoNCBjbGFzcz1cXFwicHJpY2VsaXN0LWhlYWRlciBzbWFsbCBuby1wYWRkaW5nXFxcIj4ke3RhYmxlXG4gICAgICAgICAgICAgIC5nZXRDZWxsKFwiRjEzM1wiKVxuICAgICAgICAgICAgICAudmFsdWUoKX08L2g0PjxzcGFuIGNsYXNzPVxcJ25vdGF0aW9uIGFtb3VudFxcJz4ke1xuICAgICAgICAgICAgICBTdHJpbmdDb25zdHMua0Ftb3VudFxuICAgICAgICAgICAgfTwvc3Bhbj48c3BhbiBjbGFzcz1cXCdub3RhdGlvblxcJz4ke1N0cmluZ0NvbnN0cy5rQ29zdH08L3NwYW4+YFxuICAgICAgICAgICk7XG5cbiAgICAgICAgYXBwZW5kRnVybml0dXJlT3B0aW9uKFxuICAgICAgICAgIHRhYmxlLmdldENlbGwoXCJGMTM0XCIpLnZhbHVlKCksXG4gICAgICAgICAgdGFibGUuZ2V0Q2VsbChsZXR0ZXJNb2RlbCArIFwiMTM0XCIpPy52YWx1ZSgpLFxuICAgICAgICAgIE1hdGguY2VpbChzcGFjZSAqIDAuNDgpLFxuICAgICAgICAgIHRhYmxlLmdldENlbGwoYCR7bGV0dGVyfTEzNGApPy5udW1lcmljKCksXG4gICAgICAgICAgdGFibGUuZ2V0Q2VsbChcIkcxMzRcIik/LnZhbHVlKClcbiAgICAgICAgKTtcbiAgICAgICAgYXBwZW5kRnVybml0dXJlT3B0aW9uKFxuICAgICAgICAgIHRhYmxlLmdldENlbGwoXCJGMTM1XCIpLnZhbHVlKCksXG4gICAgICAgICAgdGFibGUuZ2V0Q2VsbChsZXR0ZXJNb2RlbCArIFwiMTM1XCIpPy52YWx1ZSgpLFxuICAgICAgICAgIDEsXG4gICAgICAgICAgdGFibGUuZ2V0Q2VsbChgJHtsZXR0ZXJ9MTM1YCk/Lm51bWVyaWMoKSxcbiAgICAgICAgICB0YWJsZS5nZXRDZWxsKFwiRzEzNVwiKT8udmFsdWUoKVxuICAgICAgICApO1xuICAgICAgICBhcHBlbmRGdXJuaXR1cmVPcHRpb24oXG4gICAgICAgICAgdGFibGUuZ2V0Q2VsbChcIkYxMzdcIikudmFsdWUoKSxcbiAgICAgICAgICB0YWJsZS5nZXRDZWxsKGxldHRlck1vZGVsICsgXCIxMzdcIik/LnZhbHVlKCksXG4gICAgICAgICAgMSxcbiAgICAgICAgICB0YWJsZS5nZXRDZWxsKGAke2xldHRlcn0xMzdgKT8ubnVtZXJpYygpLFxuICAgICAgICAgIHRhYmxlLmdldENlbGwoXCJHMTM3XCIpPy52YWx1ZSgpXG4gICAgICAgICk7XG4gICAgICAgIGFwcGVuZEZ1cm5pdHVyZU9wdGlvbihcbiAgICAgICAgICB0YWJsZS5nZXRDZWxsKFwiRjEzOVwiKS52YWx1ZSgpLFxuICAgICAgICAgIHRhYmxlLmdldENlbGwobGV0dGVyTW9kZWwgKyBcIjEzOVwiKT8udmFsdWUoKSxcbiAgICAgICAgICAxLFxuICAgICAgICAgIHRhYmxlLmdldENlbGwoYCR7bGV0dGVyfTEzOWApPy5udW1lcmljKCksXG4gICAgICAgICAgdGFibGUuZ2V0Q2VsbChcIkcxMzlcIik/LnZhbHVlKClcbiAgICAgICAgKTtcbiAgICAgICAgYXBwZW5kRnVybml0dXJlT3B0aW9uKFxuICAgICAgICAgIHRhYmxlLmdldENlbGwoXCJGMTQwXCIpLnZhbHVlKCksXG4gICAgICAgICAgdGFibGUuZ2V0Q2VsbChsZXR0ZXJNb2RlbCArIFwiMTQwXCIpPy52YWx1ZSgpLFxuICAgICAgICAgIDEsXG4gICAgICAgICAgdGFibGUuZ2V0Q2VsbChgJHtsZXR0ZXJ9MTQwYCk/Lm51bWVyaWMoKSxcbiAgICAgICAgICB0YWJsZS5nZXRDZWxsKFwiRzE0MFwiKT8udmFsdWUoKVxuICAgICAgICApO1xuXG4gICAgICAgIGFwcGVuZEZ1cm5pdHVyZU9wdGlvbihcbiAgICAgICAgICB0YWJsZS5nZXRDZWxsKFwiRjEzNlwiKS52YWx1ZSgpLFxuICAgICAgICAgIHRhYmxlLmdldENlbGwobGV0dGVyTW9kZWwgKyBcIjEzNlwiKT8udmFsdWUoKSxcbiAgICAgICAgICBhbW91bnRPZlJvb21zID4gMSA/IDEgOiAwLFxuICAgICAgICAgIHRhYmxlLmdldENlbGwoYCR7bGV0dGVyfTEzNmApPy5udW1lcmljKCksXG4gICAgICAgICAgdGFibGUuZ2V0Q2VsbChcIkcxMzZcIik/LnZhbHVlKClcbiAgICAgICAgKTtcbiAgICAgICAgYXBwZW5kRnVybml0dXJlT3B0aW9uKFxuICAgICAgICAgIHRhYmxlLmdldENlbGwoXCJGMTM4XCIpLnZhbHVlKCksXG4gICAgICAgICAgdGFibGUuZ2V0Q2VsbChsZXR0ZXJNb2RlbCArIFwiMTM4XCIpPy52YWx1ZSgpLFxuICAgICAgICAgIDIsXG4gICAgICAgICAgdGFibGUuZ2V0Q2VsbChgJHtsZXR0ZXJ9MTM4YCk/Lm51bWVyaWMoKSxcbiAgICAgICAgICB0YWJsZS5nZXRDZWxsKFwiRzEzOFwiKT8udmFsdWUoKVxuICAgICAgICApO1xuXG4gICAgICAgICQoXCIjZnVybml0dXJlTGlzdFwiKS5hcHBlbmQoXG4gICAgICAgICAgJzwvZGl2PjxkaXYgY2xhc3M9XCJsaXN0LW9wdGlvbi1jb250YWluZXIgbWFyZ2luZWRcIj48L2Rpdj4nXG4gICAgICAgICk7XG4gICAgICAgICQoXCIjZnVybml0dXJlTGlzdCAubGlzdC1vcHRpb24tY29udGFpbmVyXCIpXG4gICAgICAgICAgLmxhc3QoKVxuICAgICAgICAgIC5hcHBlbmQoXG4gICAgICAgICAgICBgPGg0IGNsYXNzPVxcXCJwcmljZWxpc3QtaGVhZGVyIHNtYWxsIG5vLXBhZGRpbmdcXFwiPiR7dGFibGVcbiAgICAgICAgICAgICAgLmdldENlbGwoXCJGMTQxXCIpXG4gICAgICAgICAgICAgIC52YWx1ZSgpfTwvaDQ+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cXCdub3RhdGlvbiBhbW91bnRcXCc+JHtTdHJpbmdDb25zdHMua0Ftb3VudH08L3NwYW4+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cXCdub3RhdGlvblxcJz4ke1N0cmluZ0NvbnN0cy5rQ29zdH08L3NwYW4+YFxuICAgICAgICAgICk7XG5cbiAgICAgICAgYXBwZW5kRnVybml0dXJlT3B0aW9uKFxuICAgICAgICAgIHRhYmxlLmdldENlbGwoXCJGMTQyXCIpLnZhbHVlKCksXG4gICAgICAgICAgdGFibGUuZ2V0Q2VsbChsZXR0ZXJNb2RlbCArIFwiMTQyXCIpPy52YWx1ZSgpLFxuICAgICAgICAgIGFtb3VudE9mUm9vbXMsXG4gICAgICAgICAgdGFibGUuZ2V0Q2VsbChgJHtsZXR0ZXJ9MTQyYCk/Lm51bWVyaWMoKSxcbiAgICAgICAgICB0YWJsZS5nZXRDZWxsKFwiRzE0MlwiKT8udmFsdWUoKVxuICAgICAgICApO1xuICAgICAgICBhcHBlbmRGdXJuaXR1cmVPcHRpb24oXG4gICAgICAgICAgdGFibGUuZ2V0Q2VsbChcIkYxNDNcIikudmFsdWUoKSxcbiAgICAgICAgICB0YWJsZS5nZXRDZWxsKGxldHRlck1vZGVsICsgXCIxNDNcIik/LnZhbHVlKCksXG4gICAgICAgICAgYW1vdW50T2ZSb29tcyxcbiAgICAgICAgICB0YWJsZS5nZXRDZWxsKGAke2xldHRlcn0xNDNgKT8ubnVtZXJpYygpLFxuICAgICAgICAgIHRhYmxlLmdldENlbGwoXCJHMTQzXCIpPy52YWx1ZSgpXG4gICAgICAgICk7XG4gICAgICAgIGFwcGVuZEZ1cm5pdHVyZU9wdGlvbihcbiAgICAgICAgICB0YWJsZS5nZXRDZWxsKFwiRjE0NFwiKS52YWx1ZSgpLFxuICAgICAgICAgIHRhYmxlLmdldENlbGwobGV0dGVyTW9kZWwgKyBcIjE0NFwiKT8udmFsdWUoKSxcbiAgICAgICAgICBhbW91bnRPZlJvb21zLFxuICAgICAgICAgIHRhYmxlLmdldENlbGwoYCR7bGV0dGVyfTE0NGApPy5udW1lcmljKCksXG4gICAgICAgICAgdGFibGUuZ2V0Q2VsbChcIkcxNDRcIik/LnZhbHVlKClcbiAgICAgICAgKTtcblxuICAgICAgICBhcHBlbmRGdXJuaXR1cmVPcHRpb24oXG4gICAgICAgICAgdGFibGUuZ2V0Q2VsbChcIkYxNDVcIikudmFsdWUoKSxcbiAgICAgICAgICB0YWJsZS5nZXRDZWxsKGxldHRlck1vZGVsICsgXCIxNDVcIik/LnZhbHVlKCksXG4gICAgICAgICAgMSxcbiAgICAgICAgICB0YWJsZS5nZXRDZWxsKGAke2xldHRlcn0xNDVgKT8ubnVtZXJpYygpLFxuICAgICAgICAgIHRhYmxlLmdldENlbGwoXCJHMTQ1XCIpPy52YWx1ZSgpXG4gICAgICAgICk7XG4gICAgICAgIGFwcGVuZEZ1cm5pdHVyZU9wdGlvbihcbiAgICAgICAgICB0YWJsZS5nZXRDZWxsKFwiRjE0NlwiKS52YWx1ZSgpLFxuICAgICAgICAgIHRhYmxlLmdldENlbGwobGV0dGVyTW9kZWwgKyBcIjE0NlwiKT8udmFsdWUoKSxcbiAgICAgICAgICBhbW91bnRPZlJvb21zIC0gMSxcbiAgICAgICAgICB0YWJsZS5nZXRDZWxsKGAke2xldHRlcn0xNDZgKT8ubnVtZXJpYygpLFxuICAgICAgICAgIHRhYmxlLmdldENlbGwoXCJHMTQ2XCIpPy52YWx1ZSgpXG4gICAgICAgICk7XG5cbiAgICAgICAgYXBwZW5kT2JqZWN0KFxuICAgICAgICAgICQoXCIjZnVybml0dXJlTGlzdFwiKSxcbiAgICAgICAgICByZXR1cm5PYmplY3QoXG4gICAgICAgICAgICB0YWJsZS5nZXRDZWxsKFwiRjE0N1wiKS52YWx1ZSgpLFxuICAgICAgICAgICAgXCIgXCIsXG4gICAgICAgICAgICBNYXRoLnJvdW5kKGZ1cm5pdHVyZVN1bSAqIDAuMykgKyBcIuKCrFwiXG4gICAgICAgICAgKVxuICAgICAgICApO1xuXG4gICAgICAgIGZ1cm5pdHVyZVN1bSAqPSAxLjM7XG4gICAgICAgIGFwcGVuZE9iamVjdChcbiAgICAgICAgICAkKFwiI2Z1cm5pdHVyZUxpc3RcIiksXG4gICAgICAgICAgJzxkaXYgY2xhc3M9XCJkaXZpc2lvbi1ibG9jayBwcmljZWxpc3RcIj48L2Rpdj48ZGl2IGNsYXNzPVwibGlzdC1vcHRpb24tY29udGFpbmVyIHN1bW1hcnlcIj48L2Rpdj4nXG4gICAgICAgICk7XG4gICAgICAgIGFwcGVuZE9iamVjdChcbiAgICAgICAgICAkKFwiI2Z1cm5pdHVyZUxpc3QgLmxpc3Qtb3B0aW9uLWNvbnRhaW5lclwiKS5sYXN0KCksXG4gICAgICAgICAgYDxzcGFuIGNsYXNzPVxcJ3ByaWNlbGlzdC1oZWFkZXIgc21hbGwgbm8tcGFkZGluZ1xcJz5Ub3RhbCBmb3IgZnVybml0dXJlOjwvc3Bhbj48c3BhbiBjbGFzcz1cXCdsaXN0LXRleHQgc3VtbWFyeSB3b3JrXFwnPiR7Rm9ybWF0dGVyLmZvcm1hdEN1cnJlbmN5KFxuICAgICAgICAgICAgZnVybml0dXJlU3VtXG4gICAgICAgICAgKX0g4oKsPC9zcGFuPmBcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgaGFzT3B0aW9ucyA9XG4gICAgICAgIGJ1aWx0aW5GdXJuaXR1cmUgfHxcbiAgICAgICAgY2VtZW50U2NyZWVkIHx8XG4gICAgICAgIGZpbmlzaGluZ01hdGVyaWFscyB8fFxuICAgICAgICB3aW5kb3dzIHx8XG4gICAgICAgIGRlbW9udGFnZSB8fFxuICAgICAgICBoZWF0ZWRGbG9vcmluZyA+IDAgfHxcbiAgICAgICAgZGVub2lzaW5nIHx8XG4gICAgICAgIGVudHJhbmNlRG9vcnMgfHxcbiAgICAgICAgY29uZGl0aW9uaW5nO1xuXG4gICAgICBpZiAoaGFzT3B0aW9ucykge1xuICAgICAgICAkKFwiI3dvcmtMaXN0XCIpLmFwcGVuZChcbiAgICAgICAgICAnPC9kaXY+PGRpdiBjbGFzcz1cImxpc3Qtb3B0aW9uLWNvbnRhaW5lciBtYXJnaW5lZFwiPjwvZGl2PidcbiAgICAgICAgKTtcbiAgICAgICAgJChcIiN3b3JrTGlzdCAubGlzdC1vcHRpb24tY29udGFpbmVyXCIpXG4gICAgICAgICAgLmxhc3QoKVxuICAgICAgICAgIC5hcHBlbmQoXG4gICAgICAgICAgICBgPGg0IGNsYXNzPVxcXCJwcmljZWxpc3QtaGVhZGVyIHNtYWxsIG5vLXBhZGRpbmdcXFwiPiR7dGFibGVcbiAgICAgICAgICAgICAgLmdldENlbGwoXCJGMTAyXCIpXG4gICAgICAgICAgICAgIC52YWx1ZSgpfTwvaDQ+PHNwYW4gY2xhc3M9XFwnbm90YXRpb24gYW1vdW50XFwnPjwvc3Bhbj48c3BhbiBjbGFzcz1cXCdub3RhdGlvblxcJz4ke1xuICAgICAgICAgICAgICBTdHJpbmdDb25zdHMua0Nvc3RcbiAgICAgICAgICAgIH08L3NwYW4+YFxuICAgICAgICAgICk7XG4gICAgICAgIGxldCBvcHRpb25zU3VtID0gMDtcblxuICAgICAgICBjb25zdCBvcHRpb25zUHJpY2VBcnJheTogbnVtYmVyW10gPSBbXG4gICAgICAgICAgdGFibGUuZ2V0Q2VsbChgJHtsZXR0ZXJ9MTAzYCkubnVtZXJpYygpICogc3BhY2UsXG4gICAgICAgICAgdGFibGUuZ2V0Q2VsbChgJHtsZXR0ZXJ9MTA0YCkubnVtZXJpYygpLFxuICAgICAgICAgICgoc3BhY2UgPD0gNjAgPyA0NDAgOiA0MTApICogUzQ2ICogMiAqIHNwYWNlICogUzQ0KSAvIFMxMDQsXG4gICAgICAgICAgdGFibGUuZ2V0Q2VsbChgJHtsZXR0ZXJ9MTA2YCkubnVtZXJpYygpLFxuICAgICAgICAgICgoc3BhY2UgPD0gNjBcbiAgICAgICAgICAgID8gOTAuMDJcbiAgICAgICAgICAgIDogc3BhY2UgPD0gOTVcbiAgICAgICAgICAgID8gNjAuNzhcbiAgICAgICAgICAgIDogc3BhY2UgPCAxMjVcbiAgICAgICAgICAgID8gNTguMjlcbiAgICAgICAgICAgIDogc3BhY2UgPj0gMTI1XG4gICAgICAgICAgICA/IDc5LjAxXG4gICAgICAgICAgICA6IDApICtcbiAgICAgICAgICAgIChzcGFjZSA8PSA2MFxuICAgICAgICAgICAgICA/IDYwLjkxXG4gICAgICAgICAgICAgIDogc3BhY2UgPD0gOTVcbiAgICAgICAgICAgICAgPyA2NC41N1xuICAgICAgICAgICAgICA6IHNwYWNlIDwgMTI1XG4gICAgICAgICAgICAgID8gNjMuODdcbiAgICAgICAgICAgICAgOiBzcGFjZSA+PSAxMjVcbiAgICAgICAgICAgICAgPyA2Ni4yNFxuICAgICAgICAgICAgICA6IDApKSAqXG4gICAgICAgICAgICBzcGFjZSAqXG4gICAgICAgICAgICBUMTAzLFxuICAgICAgICAgIHRhYmxlLmdldENlbGwoYCR7bGV0dGVyfTEwOGApLm51bWVyaWMoKSAvIDEuMjMsXG4gICAgICAgICAgKHRhYmxlLmdldENlbGwoYCR7bGV0dGVyfTEwOWApLm51bWVyaWMoKSAqIFM2OSkgLyBTMTA0LFxuICAgICAgICAgICh0YWJsZS5nZXRDZWxsKGAke2xldHRlcn0xMTBgKS5udW1lcmljKCkgKiBTNjkpIC8gUzEwNCxcbiAgICAgICAgICB0YWJsZS5nZXRDZWxsKGAke2xldHRlcn0xMTJgKS5udW1lcmljKCkgKiBzcGFjZSxcbiAgICAgICAgXTtcbiAgICAgICAgY29uc3Qgb3B0aW9uc0Ftb3VudEFycmF5OiBudW1iZXJbXSA9IFtcbiAgICAgICAgICBkZW1vbnRhZ2UgPyAxIDogMCxcbiAgICAgICAgICB3aW5kb3dzLFxuICAgICAgICAgIGNlbWVudFNjcmVlZCA/IDEgOiAwLFxuICAgICAgICAgIGhlYXRlZEZsb29yaW5nLFxuICAgICAgICAgIGRlbm9pc2luZyA/IDEgOiAwLFxuICAgICAgICAgIGVudHJhbmNlRG9vcnMgPyAxIDogMCxcbiAgICAgICAgICBidWlsdGluRnVybml0dXJlID8gMSA6IDAsXG4gICAgICAgICAgYnVpbHRpbkZ1cm5pdHVyZSA/IDEgOiAwLFxuICAgICAgICAgIGNvbmRpdGlvbmluZyxcbiAgICAgICAgXTtcbiAgICAgICAgY29uc3Qgb3B0aW9uc0FkcmVzc2VzQXJyYXk6IG51bWJlcltdID0gW1xuICAgICAgICAgIDEwMywgMTA0LCAxMDUsIDEwNiwgMTA3LCAxMDgsIDEwOSwgMTEwLCAxMTIsXG4gICAgICAgIF07XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcHRpb25zQWRyZXNzZXNBcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGNvbnN0IHByaWNlID1cbiAgICAgICAgICAgIG9wdGlvbnNQcmljZUFycmF5W2ldICpcbiAgICAgICAgICAgIG9wdGlvbnNBbW91bnRBcnJheVtpXSAqXG4gICAgICAgICAgICB0YWJsZS5nZXRDZWxsKFwiUzEwNFwiKS5udW1lcmljKCk7XG4gICAgICAgICAgaWYgKHByaWNlID09PSAwIHx8IG9wdGlvbnNBbW91bnRBcnJheVtpXSA9PSAwKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBvcHRpb25zU3VtICs9IHByaWNlO1xuICAgICAgICAgIGFwcGVuZE9iamVjdChcbiAgICAgICAgICAgICR3b3JrLFxuICAgICAgICAgICAgcmV0dXJuT2JqZWN0KFxuICAgICAgICAgICAgICB0YWJsZS5nZXRDZWxsKFwiRlwiICsgb3B0aW9uc0FkcmVzc2VzQXJyYXlbaV0pPy52YWx1ZSgpLFxuICAgICAgICAgICAgICBcIlwiLFxuICAgICAgICAgICAgICBGb3JtYXR0ZXIuZm9ybWF0Q3VycmVuY3kocHJpY2UpICsgXCIg4oKsXCJcbiAgICAgICAgICAgIClcbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbmRpdGlvbmluZyA+IDApIHtcbiAgICAgICAgICBjb25zdCBjb25kaXRpb25pbmdBcHBsID1cbiAgICAgICAgICAgIChjb25kaXRpb25pbmcgKlxuICAgICAgICAgICAgICB0YWJsZS5nZXRDZWxsKGAke2xldHRlcn0xMTNgKS5udW1lcmljKCkgKlxuICAgICAgICAgICAgICAoMSArIHRhYmxlLmdldENlbGwoXCJTMTEzXCIpLm51bWVyaWMoKSAvIDEwMCkpIC9cbiAgICAgICAgICAgIHRhYmxlLmdldENlbGwoXCJFNVwiKS5udW1lcmljKCk7XG4gICAgICAgICAgY29uc3QgY29uZGl0aW9uaW5nRGVsaXZlcnkgPSBjb25kaXRpb25pbmdBcHBsICogMC4wNSAqIFQxMDM7XG5cbiAgICAgICAgICBhcHBlbmRPYmplY3QoXG4gICAgICAgICAgICAkd29yayxcbiAgICAgICAgICAgIHJldHVybk9iamVjdChcbiAgICAgICAgICAgICAgdGFibGUuZ2V0Q2VsbChcIkYxMTNcIik/LnZhbHVlKCksXG4gICAgICAgICAgICAgIFwiXCIsXG4gICAgICAgICAgICAgIEZvcm1hdHRlci5mb3JtYXRDdXJyZW5jeShjb25kaXRpb25pbmdBcHBsKSArIFwiIOKCrFwiXG4gICAgICAgICAgICApXG4gICAgICAgICAgKTtcbiAgICAgICAgICBhcHBlbmRPYmplY3QoXG4gICAgICAgICAgICAkd29yayxcbiAgICAgICAgICAgIHJldHVybk9iamVjdChcbiAgICAgICAgICAgICAgdGFibGUuZ2V0Q2VsbChcIkYxMTRcIik/LnZhbHVlKCksXG4gICAgICAgICAgICAgIFwiXCIsXG4gICAgICAgICAgICAgIEZvcm1hdHRlci5mb3JtYXRDdXJyZW5jeShjb25kaXRpb25pbmdEZWxpdmVyeSkgKyBcIiDigqxcIlxuICAgICAgICAgICAgKVxuICAgICAgICAgICk7XG5cbiAgICAgICAgICBvcHRpb25zU3VtICs9IGNvbmRpdGlvbmluZ0RlbGl2ZXJ5ICsgY29uZGl0aW9uaW5nQXBwbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGFwcGVuZE9iamVjdChcbiAgICAgICAgICAkKFwiI3dvcmtMaXN0XCIpLFxuICAgICAgICAgICc8ZGl2IGNsYXNzPVwiZGl2aXNpb24tYmxvY2sgcHJpY2VsaXN0XCI+PC9kaXY+PGRpdiBjbGFzcz1cImxpc3Qtb3B0aW9uLWNvbnRhaW5lciBzdW1tYXJ5XCI+PC9kaXY+J1xuICAgICAgICApO1xuICAgICAgICBhcHBlbmRPYmplY3QoXG4gICAgICAgICAgJChcIiN3b3JrTGlzdCAubGlzdC1vcHRpb24tY29udGFpbmVyXCIpLmxhc3QoKSxcbiAgICAgICAgICBgPHNwYW4gY2xhc3M9XFwncHJpY2VsaXN0LWhlYWRlciBzbWFsbCBuby1wYWRkaW5nXFwnPlRvdGFsIGZvciBvcHRpb25zOjwvc3Bhbj48c3BhbiBjbGFzcz1cXCdsaXN0LXRleHQgc3VtbWFyeSB3b3JrXFwnPiR7Rm9ybWF0dGVyLmZvcm1hdEN1cnJlbmN5KFxuICAgICAgICAgICAgb3B0aW9uc1N1bVxuICAgICAgICAgICl9IOKCrDwvc3Bhbj5gXG4gICAgICAgICk7XG5cbiAgICAgICAgd29ya1N1bSArPSBvcHRpb25zU3VtO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWFwcGxpYW5jZXNCb29sVG90YWwpIHtcbiAgICAgICAgJChcIi5jb21meS1zZWN0aW9uXCIpLnRvZ2dsZShmYWxzZSk7XG4gICAgICB9XG4gICAgICBpZiAoIWZ1cm5pdHVyZUJvb2wpIHtcbiAgICAgICAgJChcIiNmdXJuaXR1cmVMaXN0XCIpLnRvZ2dsZShmYWxzZSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGFwcGVuZEZ1cm5pdHVyZU9wdGlvbihcbiAgICAgICAgbmFtZTogc3RyaW5nLFxuICAgICAgICBtYW51ZmFjdHVyZXI6IHN0cmluZyB8IG51bGwsXG4gICAgICAgIGFtb3VudDogbnVtYmVyIHwgbnVsbCxcbiAgICAgICAgcHJpY2U6IG51bWJlciB8IG51bGwsXG4gICAgICAgIGRpbTogc3RyaW5nIHwgbnVsbFxuICAgICAgKSB7XG4gICAgICAgIGlmICghZnVybml0dXJlQm9vbCB8fCBhbW91bnQgPT0gMCB8fCAhYW1vdW50IHx8ICFwcmljZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1cm5pdHVyZVN1bSArPSBwcmljZSAqIGFtb3VudDtcbiAgICAgICAgYXBwZW5kT2JqZWN0KFxuICAgICAgICAgICRmdXJuaXR1cmUsXG4gICAgICAgICAgJzxkaXYgY2xhc3M9XCJvcHRpb24tYmxvY2tcIj48ZGl2IGNsYXNzPVwiZGl2aXNpb24tYmxvY2sgcHJpY2VsaXN0XCI+PC9kaXY+PGRpdiBjbGFzcz1cImxpc3Qtb3B0aW9uLWNvbnRhaW5lclwiPjwvZGl2PjwvZGl2PidcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKG1hbnVmYWN0dXJlciA9PT0gbnVsbCkge1xuICAgICAgICAgIGFwcGVuZE9iamVjdChcbiAgICAgICAgICAgICQoXCIjbWF0ZXJpYWxzTGlzdCAub3B0aW9uLWJsb2NrIC5saXN0LW9wdGlvbi1jb250YWluZXJcIikubGFzdCgpLFxuICAgICAgICAgICAgYDxzcGFuIGNsYXNzPVxcJ25hbWVcXCc+JHtuYW1lfTwvc3Bhbj48c3BhbiBjbGFzcz1cXCdsaXN0LXRleHRcXCc+JHthbW91bnR9ICR7ZGltfTwvc3Bhbj5gXG4gICAgICAgICAgKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgYXBwZW5kT2JqZWN0KFxuICAgICAgICAgICQoXCIjZnVybml0dXJlTGlzdCAub3B0aW9uLWJsb2NrIC5saXN0LW9wdGlvbi1jb250YWluZXJcIikubGFzdCgpLFxuICAgICAgICAgIGA8c3BhbiBjbGFzcz1cXCduYW1lXFwnPiR7bmFtZX0sICR7bWFudWZhY3R1cmVyfTwvc3Bhbj48c3BhbiBjbGFzcz1cXCdsaXN0LXRleHQgYW1vdW50XFwnPiR7YW1vdW50fSAke2RpbX08L3NwYW4+PHNwYW4gY2xhc3M9XFwnbGlzdC10ZXh0XFwnPiR7Rm9ybWF0dGVyLmZvcm1hdEN1cnJlbmN5KFxuICAgICAgICAgICAgcHJpY2UgKiBhbW91bnRcbiAgICAgICAgICApfSDigqw8L3NwYW4+YFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgYXBwZW5kT2JqZWN0KFxuICAgICAgICAkKFwiI21hdGVyaWFsc0xpc3RcIiksXG4gICAgICAgICc8ZGl2IGNsYXNzPVwiZGl2aXNpb24tYmxvY2sgcHJpY2VsaXN0XCI+PC9kaXY+PGRpdiBjbGFzcz1cImxpc3Qtb3B0aW9uLWNvbnRhaW5lciBzdW1tYXJ5XCI+PC9kaXY+J1xuICAgICAgKTtcbiAgICAgIGFwcGVuZE9iamVjdChcbiAgICAgICAgJChcIiNtYXRlcmlhbHNMaXN0IC5saXN0LW9wdGlvbi1jb250YWluZXJcIikubGFzdCgpLFxuICAgICAgICBgPHNwYW4gY2xhc3M9XFwncHJpY2VsaXN0LWhlYWRlciBzbWFsbCBuby1wYWRkaW5nXFwnPlRvdGFsIGZvciBjb25zdHJ1Y3Rpb24gd2l0aCBjb21wb25lbnRzIGFuZCBmaW5pc2hpbmcgbWF0ZXJpYWxzOjwvc3Bhbj48c3BhbiBjbGFzcz1cXCdsaXN0LXRleHQgc3VtbWFyeSB3b3JrXFwnPiR7Rm9ybWF0dGVyLmZvcm1hdEN1cnJlbmN5KFxuICAgICAgICAgIHdvcmtTdW1cbiAgICAgICAgKX0g4oKsPC9zcGFuPmBcbiAgICAgICk7XG4gICAgICBsZXQgYXBwbGlhbmNlU3VtID0gMDtcblxuICAgICAgY29uc3QgJGFwcGxpYW5jZXNMaXN0VG90YWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcbiAgICAgICAgXCJhcHBsaWFuY2VzTGlzdFRvdGFsXCJcbiAgICAgICk7XG4gICAgICBjb25zdCBhcHBsaWFuY2VzVHVwbGU6IG51bWJlcltdID0gW107XG5cbiAgICAgIGlmIChhcHBsaWFuY2VzID09PSBcImdvcmVuamVcIikge1xuICAgICAgICBhcHBsaWFuY2VzVHVwbGUucHVzaCguLi5bMTU0LCA5XSk7XG4gICAgICB9IGVsc2UgaWYgKGFwcGxpYW5jZXMgPT09IFwiYm9zY2hcIikge1xuICAgICAgICBhcHBsaWFuY2VzVHVwbGUucHVzaCguLi5bMTY5LCAxMF0pO1xuICAgICAgfSBlbHNlIGlmIChhcHBsaWFuY2VzID09PSBcInNtZWdcIikge1xuICAgICAgICBhcHBsaWFuY2VzVHVwbGUucHVzaCguLi5bMTg1LCA5XSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhcHBsaWFuY2VzVHVwbGUucHVzaCguLi5bMTU0LCA5XSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChhcHBsaWFuY2VzQm9vbFRvdGFsKSB7XG4gICAgICAgIGxldCBhcHBsaWFuY2VzTGlzdFRvdGFsU3RyaW5nID0gXCJcIjtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFwcGxpYW5jZXNUdXBsZVsxXTsgaSsrKSB7XG4gICAgICAgICAgY29uc3QgcHJpY2UgPVxuICAgICAgICAgICAgdGFibGUuZ2V0Q2VsbChcIkRcIiArIChhcHBsaWFuY2VzVHVwbGVbMF0gKyBpKSkubnVtZXJpYygpICogMC45O1xuXG4gICAgICAgICAgYXBwbGlhbmNlc0xpc3RUb3RhbFN0cmluZyArPSBgPGRpdiBjbGFzcz1cIm9wdGlvbi1ibG9ja1wiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJkaXZpc2lvbi1ibG9jayBwcmljZWxpc3RcIj48L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwibGlzdC1vcHRpb24tY29udGFpbmVyXCI+PHNwYW4gY2xhc3M9XFwnbmFtZVxcJz4ke3RhYmxlXG4gICAgICAgICAgICAuZ2V0Q2VsbChcIkZcIiArIChhcHBsaWFuY2VzVHVwbGVbMF0gKyBpKSlcbiAgICAgICAgICAgIC52YWx1ZSgpfSAke3RhYmxlXG4gICAgICAgICAgICAuZ2V0Q2VsbChcIkVcIiArIChhcHBsaWFuY2VzVHVwbGVbMF0gKyBpKSlcbiAgICAgICAgICAgIC52YWx1ZSgpfTwvc3Bhbj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcJ2xpc3QtdGV4dCBhbW91bnRcXCc+MSBwaWVjZTwvc3Bhbj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcJ2xpc3QtdGV4dFxcJz4ke0Zvcm1hdHRlci5mb3JtYXRDdXJyZW5jeShwcmljZSl94oKsPC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5gO1xuXG4gICAgICAgICAgYXBwbGlhbmNlU3VtICs9IHByaWNlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZzM1ID0gdGFibGUuZ2V0Q2VsbChcIkczNVwiKS5udW1lcmljKCk7XG4gICAgICAgIGNvbnN0IGU1ID0gdGFibGUuZ2V0Q2VsbChcIkU1XCIpLm51bWVyaWMoKTtcbiAgICAgICAgYXBwbGlhbmNlU3VtICs9IChhcHBsaWFuY2VzVHVwbGVbMV0gKiBnMzUpIC8gZTU7XG5cbiAgICAgICAgYXBwbGlhbmNlc0xpc3RUb3RhbFN0cmluZyArPSBgPGRpdiBjbGFzcz1cIm9wdGlvbi1ibG9ja1wiPjxkaXYgY2xhc3M9XCJkaXZpc2lvbi1ibG9jayBwcmljZWxpc3RcIj48L2Rpdj48ZGl2IGNsYXNzPVwibGlzdC1vcHRpb24tY29udGFpbmVyXCI+PHNwYW4gY2xhc3M9XFwnbmFtZVxcJz5BcHBsaWFuY2VzIGRlbGl2ZXJ5PC9zcGFuPjxzcGFuIGNsYXNzPVxcJ2xpc3QtdGV4dCBhbW91bnRcXCc+PC9zcGFuPjxzcGFuIGNsYXNzPVxcJ2xpc3QtdGV4dFxcJz4ke0Zvcm1hdHRlci5mb3JtYXRDdXJyZW5jeShcbiAgICAgICAgICAoYXBwbGlhbmNlc1R1cGxlWzFdICogZzM1KSAvIGU1XG4gICAgICAgICl9IOKCrDwvc3Bhbj48L2Rpdj48L2Rpdj5gO1xuXG4gICAgICAgIGFwcGxpYW5jZXNMaXN0VG90YWxTdHJpbmcgKz0gYDxkaXYgY2xhc3M9XCJvcHRpb24tYmxvY2tcIj48ZGl2IGNsYXNzPVwiZGl2aXNpb24tYmxvY2sgcHJpY2VsaXN0XCI+PC9kaXY+PGRpdiBjbGFzcz1cImxpc3Qtb3B0aW9uLWNvbnRhaW5lclwiPjxzcGFuIGNsYXNzPVxcJ25hbWVcXCc+JHt0YWJsZVxuICAgICAgICAgIC5nZXRDZWxsKFwiRjE2NVwiKVxuICAgICAgICAgIC52YWx1ZSgpfTwvc3Bhbj48c3BhbiBjbGFzcz1cXCdsaXN0LXRleHQgYW1vdW50XFwnPjwvc3Bhbj48c3BhbiBjbGFzcz1cXCdsaXN0LXRleHRcXCc+JHtGb3JtYXR0ZXIuZm9ybWF0Q3VycmVuY3koXG4gICAgICAgICAgYXBwbGlhbmNlU3VtICogMC4yXG4gICAgICAgICl9IOKCrDwvc3Bhbj48L2Rpdj48L2Rpdj5gO1xuXG4gICAgICAgIGFwcGxpYW5jZVN1bSAqPSAxLjI7XG5cbiAgICAgICAgYXBwbGlhbmNlc0xpc3RUb3RhbFN0cmluZyArPSBgPGRpdiBjbGFzcz1cImRpdmlzaW9uLWJsb2NrIHByaWNlbGlzdFwiPjwvZGl2PjxkaXYgY2xhc3M9XCJsaXN0LW9wdGlvbi1jb250YWluZXIgc3VtbWFyeVwiPjxzcGFuIGNsYXNzPVxcJ3ByaWNlbGlzdC1oZWFkZXIgc21hbGwgbm8tcGFkZGluZ1xcJz5Ub3RhbCBmb3IgYXBwbGlhbmNlczo8L3NwYW4+PHNwYW4gY2xhc3M9XFwnbGlzdC10ZXh0IHN1bW1hcnkgd29ya1xcJz4ke0Zvcm1hdHRlci5mb3JtYXRDdXJyZW5jeShcbiAgICAgICAgICBhcHBsaWFuY2VTdW1cbiAgICAgICAgKX0g4oKsPC9zcGFuPjwvZGl2PmA7XG5cbiAgICAgICAgJGFwcGxpYW5jZXNMaXN0VG90YWwuaW5uZXJIVE1MID1cbiAgICAgICAgICAkYXBwbGlhbmNlc0xpc3RUb3RhbC5pbm5lckhUTUwgKyBhcHBsaWFuY2VzTGlzdFRvdGFsU3RyaW5nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJGFwcGxpYW5jZXNMaXN0VG90YWwuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoYnVpbHRpbkZ1cm5pdHVyZSkge1xuICAgICAgICBjb25zdCBraXRjaGVuUHJpY2UgPSB0YWJsZS5nZXRDZWxsKGAke2xldHRlcn0xMDlgKS5udW1lcmljKCk7XG5cbiAgICAgICAgJChcIiNraXRjaGVuUHJpY2VcIikuaHRtbChcbiAgICAgICAgICBGb3JtYXR0ZXIuZm9ybWF0Q3VycmVuY3koa2l0Y2hlblByaWNlICogUzY5KSArIFwiIOKCrFwiXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkKFwiI2tpdGNoZW5TZWN0aW9uXCIpLnRvZ2dsZShmYWxzZSk7XG4gICAgICB9XG5cbiAgICAgIHdvcmtTdW0gKz0gYXBwbGlhbmNlU3VtO1xuXG4gICAgICBpZiAoMSAtIE1hdGguYWJzKHN0b3JhZ2UuZ2V0KFwic3VtbWVkUHJpY2VcIikgLyB3b3JrU3VtKSA8PSAwLjA2KSB7XG4gICAgICAgICQoXCIjdG90YWxQcmljZVRvdGFsXCIpLmh0bWwoRm9ybWF0dGVyLmZvcm1hdEN1cnJlbmN5KHdvcmtTdW0pICsgXCIg4oKsICpcIik7XG4gICAgICAgICQoXCIjdG90YWxWQVRcIikuaHRtbChGb3JtYXR0ZXIuZm9ybWF0Q3VycmVuY3kod29ya1N1bSAqIDEuMjMpICsgXCIg4oKsICpcIik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkKFwiI3RvdGFsUHJpY2VUb3RhbFwiKS5odG1sKFxuICAgICAgICAgIEZvcm1hdHRlci5mb3JtYXRDdXJyZW5jeShzdG9yYWdlLmdldChcInN1bW1lZFByaWNlXCIpIC8gMS4yMylcbiAgICAgICAgKTtcbiAgICAgICAgJChcIiN0b3RhbFZBVFwiKS5odG1sKFxuICAgICAgICAgIEZvcm1hdHRlci5mb3JtYXRDdXJyZW5jeShzdG9yYWdlLmdldChcInN1bW1lZFByaWNlXCIpKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICQoXCIuZm9ybS0yXCIpLm9uKFwic3VibWl0XCIsIGFzeW5jIGZ1bmN0aW9uIChlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgaWYgKCEkKFwiI2FncmVlbWVudENoZWNrYm94XCIpLmlzKFwiOmNoZWNrZWRcIikpIHtcbiAgICAgICQoXCIud2FybmluZy5hZ3JlZW1lbnRjaGVja2JveFwiKS50b2dnbGUodHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICQoXCIud2FybmluZy5hZ3JlZW1lbnRjaGVja2JveFwiKS50b2dnbGUoZmFsc2UpO1xuICAgIH1cbiAgICBpZiAoISQoXCIjc1Bob25lXCIpLnZhbCgpICYmICEkKFwiI3NFbWFpbFwiKS52YWwoKSkge1xuICAgICAgJChcIi53YXJuaW5nLmlucHV0cy5waG9uZVwiKS50b2dnbGUodHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICQoXCIud2FybmluZy5pbnB1dHMucGhvbmVcIikudG9nZ2xlKGZhbHNlKTtcbiAgICB9XG4gICAgaWYgKCEkKFwiI3NOYW1lXCIpLnZhbCgpKSB7XG4gICAgICAkKFwiLndhcm5pbmcuaW5wdXRzLm5hbWVcIikudG9nZ2xlKHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAkKFwiLndhcm5pbmcuaW5wdXRzLm5hbWVcIikudG9nZ2xlKGZhbHNlKTtcbiAgICB9XG5cbiAgICBpZiAoKCQoXCIjc0VtYWlsXCIpLnZhbCgpIGFzIHN0cmluZykubGVuZ3RoID09IDApIHtcbiAgICAgICQoXCIud2FybmluZy5pbnB1dHMud3JvbmdFbWFpbFwiKS50b2dnbGUoZmFsc2UpO1xuICAgICAgJChcIi53YXJuaW5nLmlucHV0cy5lbXB0eUVtYWlsXCIpLnRvZ2dsZSh0cnVlKTtcbiAgICB9IGVsc2UgaWYgKCFlbWFpbFJlZ2V4LnRlc3QoJChcIiNzRW1haWxcIikudmFsKCkgYXMgc3RyaW5nKSkge1xuICAgICAgJChcIi53YXJuaW5nLmlucHV0cy53cm9uZ0VtYWlsXCIpLnRvZ2dsZSh0cnVlKTtcbiAgICAgICQoXCIud2FybmluZy5pbnB1dHMuZW1wdHlFbWFpbFwiKS50b2dnbGUoZmFsc2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICAkKFwiLndhcm5pbmcuaW5wdXRzLndyb25nRW1haWxcIikudG9nZ2xlKGZhbHNlKTtcbiAgICAgICQoXCIud2FybmluZy5pbnB1dHMuZW1wdHlFbWFpbFwiKS50b2dnbGUoZmFsc2UpO1xuICAgIH1cblxuICAgIGlmICgkKFwiLndhcm5pbmdcIikuaXMoXCI6dmlzaWJsZVwiKSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdWJtaXQoKTtcbiAgICB9XG4gIH0pO1xuXG4gIGFzeW5jIGZ1bmN0aW9uIHN1Ym1pdCgpIHtcbiAgICAkKFwiLm1vZGFsLW5vdGVcIikuaHRtbChcIlBsZWFzZSB3YWl0Li4uXCIpO1xuXG4gICAgY29uc3QgcGFnZUNvbnRlbnQgPSAkKFwiaHRtbFwiKS5jbG9uZSgpLmZpbmQoXCJzY3JpcHRcIikucmVtb3ZlKCkuZW5kKCkuaHRtbCgpO1xuICAgIGNvbnN0IGZpbGVTdHJpbmcgPVxuICAgICAgYDwhRE9DVFlQRSBodG1sPjxodG1sIGxhbmc9XCJlbl9VU1wiPmAgKyBwYWdlQ29udGVudCArIGA8L2h0bWw+YDtcbiAgICBjb25zdCBmaWxlID0gbmV3IEZpbGUoW2ZpbGVTdHJpbmddLCBcInNvdXJjZS5odG1sXCIsIHtcbiAgICAgIHR5cGU6IFwidGV4dC9odG1sXCIsXG4gICAgfSk7XG5cbiAgICBjb25zdCBib2R5ID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgYm9keS5hcHBlbmQoXCJmaWxlXCIsIGZpbGUsIFwic291cmNlLmh0bWxcIik7XG5cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFwiaHR0cHM6Ly9hcGkuZm9ydGVzLmFnZW5jeS9jb252ZXJ0XCIsIHtcbiAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICBib2R5OiBib2R5LFxuICAgIH0pO1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICBjb25zdCBpZCA9IHJlc3VsdC5zdWNjZXNzID8gcmVzdWx0LmlkIDogXCJcIjtcblxuICAgICQoXCIubW9kYWwtbm90ZVwiKS5odG1sKFxuICAgICAgXCJXZSBzZW50IHlvdXIgZXN0aW1hdGlvbiB0byB5b3VyIGVtYWlsIGFkZHJlc3MuIElmIHlvdSBkb24ndCBzZWUgaXQsIGNoZWNrIFNwYW0gZm9sZGVyIG9yIHdhaXQgYSBmZXcgbWludXRlcy5cIlxuICAgICk7XG5cbiAgICBmZXRjaChcImh0dHBzOi8vYXBpLmZvcnRlcy5hZ2VuY3kvbWFpbFwiLCB7XG4gICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBmaWxlSWQ6IGlkLFxuICAgICAgICBmaWxlTmFtZTogbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJzdHlsZVwiKSxcbiAgICAgICAgcmVjaXBpZW50TWFpbDogJChcIiNzRW1haWxcIikudmFsKCksXG4gICAgICB9KSxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICB9LFxuICAgIH0pLmZpbmFsbHkoKCkgPT5cbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB3aW5kb3cubG9jYXRpb24uYXNzaWduKFwiL3NkeWFrdWllbW9cIik7XG4gICAgICB9LCA1MDAwKVxuICAgICk7XG4gIH1cblxuICAkKFwiaW1nXCIpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICQodGhpcykuYXR0cihcImxvYWRpbmdcIiwgXCJlYWdlclwiKTtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gZ2V0UmlnaHRTdHlsZUxldHRlcihzdHlsZTogc3RyaW5nKSB7XG4gICAgbGV0IHN0eWxlTGV0dGVyID0gXCJKXCI7XG5cbiAgICBpZiAoc3R5bGUgPT0gXCJjb3p5XCIpIHtcbiAgICAgIHN0eWxlTGV0dGVyID0gXCJKXCI7XG4gICAgfSBlbHNlIGlmIChzdHlsZSA9PSBcImphcGFuZGlcIikge1xuICAgICAgc3R5bGVMZXR0ZXIgPSBcIkxcIjtcbiAgICB9IGVsc2UgaWYgKHN0eWxlID09IFwiZnVzaW9uXCIpIHtcbiAgICAgIHN0eWxlTGV0dGVyID0gXCJOXCI7XG4gICAgfSBlbHNlIGlmIChzdHlsZSA9PSBcIm1vZGVyblwiKSB7XG4gICAgICBzdHlsZUxldHRlciA9IFwiUFwiO1xuICAgIH0gZWxzZSBpZiAoc3R5bGUgPT0gXCJuZW9jbGFzc2ljXCIpIHtcbiAgICAgIHN0eWxlTGV0dGVyID0gXCJSXCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0eWxlTGV0dGVyO1xuICB9XG5cbiAgZnVuY3Rpb24gcmV0dXJuT2JqZWN0KGxpbmUxOiBzdHJpbmcsIGxpbmUyOiBzdHJpbmcsIGxpbmUzOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBgPGRpdiBjbGFzcz1cXFwib3B0aW9uLWJsb2NrXFxcIj48ZGl2IGNsYXNzPVxcXCJkaXZpc2lvbi1ibG9jayBwcmljZWxpc3RcXFwiPjwvZGl2PjxkaXYgY2xhc3M9XFxcImxpc3Qtb3B0aW9uLWNvbnRhaW5lclxcXCI+PHNwYW4gY2xhc3M9XFwnbmFtZVxcJz4ke2xpbmUxfTwvc3Bhbj48c3BhbiBjbGFzcz1cXCdsaXN0LXRleHQgYW1vdW50XFwnPiR7bGluZTJ9PC9zcGFuPjxzcGFuIGNsYXNzPVxcJ2xpc3QtdGV4dFxcJz4ke2xpbmUzfTwvc3Bhbj48L2Rpdj48L2Rpdj5gO1xuICB9XG5cbiAgZnVuY3Rpb24gYXBwZW5kT2JqZWN0KG9iajogSlF1ZXJ5PEhUTUxFbGVtZW50PiwgdGV4dDogYW55KSB7XG4gICAgb2JqLmFwcGVuZCh0ZXh0KTtcbiAgfVxufSk7XG4iXSwibmFtZXMiOlsiRm9ybWF0dGVyIiwibnVtIiwiSW50bCIsIk51bWJlckZvcm1hdCIsIm1heGltdW1GcmFjdGlvbkRpZ2l0cyIsImZvcm1hdCIsIkNlbGwiLCJjb25zdHJ1Y3RvciIsImFkZHJlc3MiLCJ2YWx1ZSIsInRoaXMiLCJfdmFsdWUiLCJoYXNWYWx1ZSIsImxlbmd0aCIsIm51bWVyaWMiLCJwYXJzZUZsb2F0IiwiZm9ybWF0dGVkTnVtZXJpY2FsIiwiZm9ybWF0Q3VycmVuY3kiLCJUYWJsZSIsImNlbGxzIiwiZ2V0Q2VsbCIsInJlc3VsdCIsImZpbHRlciIsIml0ZW0iLCJMb2NhbFN0b3JhZ2VIYW5kbGVyIiwiZ2V0IiwibmFtZSIsIkpTT04iLCJwYXJzZSIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJzZXQiLCJzZXRJdGVtIiwidG9TdHJpbmciLCJpbml0IiwiaW5pdFBvcnR1Z2FsIiwic3RvcmFnZVRvUmVxdWVzdEJvZHkiLCJzdG9yYWdlIiwia2V5IiwiU3RyaW5nIiwiaXNGaW5pdGUiLCJOdW1iZXIiLCJzdHJpbmdpZnkiLCJVdGlscyIsIm51bWJlciIsImlzTmFOIiwiaW5kZXgiLCJNYXRoIiwiYWJzIiwiZmxvb3IiLCJxdW90aWVudCIsIm51bVRvTGV0dGVyIiwibnVtYmVyVG9FbmNvZGVkTGV0dGVyIiwiYWxwaGFiZXQiLCJzbGljZSIsIlN0cmluZ0NvbnN0cyIsImtDb3N0Iiwia0Ftb3VudCIsImtLaXRjaGVuIiwia0xNb250aCIsIiQiLCJlbWFpbFJlZ2V4Iiwic3R5bGUiLCJhcHBsaWFuY2VzQm9vbFRvdGFsIiwic3R5bGVMZXR0ZXIiLCJnZXRSaWdodFN0eWxlTGV0dGVyIiwiQm9vbGVhbiIsImZ1cm5pdHVyZUJvb2wiLCJzcGFjZSIsImJhdGgiLCJzaG93ZXIiLCJhbW91bnRPZlJvb21zIiwiYW1vdW50T2ZCYXRocm9vbXMiLCJkZW1vbnRhZ2UiLCJ3aW5kb3dzIiwiZmluaXNoaW5nTWF0ZXJpYWxzIiwiY2VtZW50U2NyZWVkIiwiYnVpbHRpbkZ1cm5pdHVyZSIsImhlYXRlZEZsb29yaW5nIiwiZGVub2lzaW5nIiwiZW50cmFuY2VEb29ycyIsImNvbmRpdGlvbmluZyIsImZsb29yaW5nIiwidHJhbnNwb3J0YXRpb25FeHBlbnNlcyIsImFwcGxpYW5jZXMiLCJzdW1tZWRQcmljZSIsImNvc3RQZXJNZXRyZSIsIiRmdXJuaXR1cmUiLCJsZXR0ZXIiLCJsZXR0ZXJNb2RlbCIsIndvcmtTdW0iLCJmdXJuaXR1cmVTdW0iLCJtb250aHMiLCJyZXR1cm5PYmplY3QiLCJsaW5lMSIsImxpbmUyIiwibGluZTMiLCJhcHBlbmRPYmplY3QiLCJvYmoiLCJ0ZXh0IiwiYXBwZW5kIiwiaHRtbCIsImZldGNoIiwidGhlbiIsInJlcyIsInJlc3BvbnNlUm93cyIsInN1YnN0cmluZyIsInJlcGxhY2UiLCJ0YWJsZSIsInJvd3MiLCJtYXAiLCJyb3ciLCJvdXRlckluZGV4IiwiYyIsImNlbGwiLCJfYSIsInYiLCJmIiwicmVkdWNlIiwicHYiLCJjdiIsIlM0NiIsIlM0NCIsIlM2OSIsIlQxMDMiLCJTMTA0IiwiZmxvb3JpbmdOdW0iLCJmbG9vcmluZ051bTIiLCJmbG9vcmluZ1ByaWNlIiwiJHdvcmsiLCJ0ZXh0T2JqZWN0Iiwid2F0ZXIiLCJjYW5hbGlzYXRpb24iLCJ2ZW50cyIsImVsZWN0cmljaXR5Iiwid29ya1ByaWNlQXJyYXkiLCJzcXJ0Iiwid29ya0Ftb3VudEFycmF5Iiwid29ya0FkcmVzc2VzQXJyYXkiLCJyb3VuZCIsImkiLCJwcmljZSIsImxhc3QiLCJtYXRlcmlhbHNQcmljZUFycmF5IiwibWF0ZXJpYWxzQW1vdW50QXJyYXkiLCJtYXRlcmlhbHNBZHJlc3Nlc0FycmF5IiwiY2FzdWFsdGllc1ByaWNlQXJyYXkiLCJjZWlsIiwiY2FzdWFsdGllc0FkcmVzc2VzQXJyYXkiLCJhcHBlbmRGdXJuaXR1cmVPcHRpb24iLCJvcHRpb25zU3VtIiwib3B0aW9uc1ByaWNlQXJyYXkiLCJvcHRpb25zQW1vdW50QXJyYXkiLCJvcHRpb25zQWRyZXNzZXNBcnJheSIsImNvbmRpdGlvbmluZ0FwcGwiLCJjb25kaXRpb25pbmdEZWxpdmVyeSIsIm1hbnVmYWN0dXJlciIsImFtb3VudCIsImRpbSIsInRvZ2dsZSIsImFwcGxpYW5jZVN1bSIsIiRhcHBsaWFuY2VzTGlzdFRvdGFsIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImFwcGxpYW5jZXNUdXBsZSIsInB1c2giLCJhcHBsaWFuY2VzTGlzdFRvdGFsU3RyaW5nIiwiZzM1IiwiZTUiLCJpbm5lckhUTUwiLCJkaXNwbGF5Iiwia2l0Y2hlblByaWNlIiwib24iLCJlIiwicHJldmVudERlZmF1bHQiLCJpcyIsInZhbCIsInRlc3QiLCJwYWdlQ29udGVudCIsImNsb25lIiwiZmluZCIsInJlbW92ZSIsImVuZCIsImZpbGUiLCJGaWxlIiwidHlwZSIsImJvZHkiLCJGb3JtRGF0YSIsInJlc3BvbnNlIiwibWV0aG9kIiwianNvbiIsImlkIiwic3VjY2VzcyIsImZpbGVJZCIsImZpbGVOYW1lIiwicmVjaXBpZW50TWFpbCIsImhlYWRlcnMiLCJmaW5hbGx5Iiwic2V0VGltZW91dCIsIndpbmRvdyIsImxvY2F0aW9uIiwiYXNzaWduIiwic3VibWl0IiwiZWFjaCIsImF0dHIiXSwic291cmNlUm9vdCI6IiJ9