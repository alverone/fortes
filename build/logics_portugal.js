(()=>{"use strict";
/*!
 * Splide.js
 * Version  : 3.5.8
 * License  : MIT
 * Copyright: 2021 Naotoshi Fujita
 */
const t="splide",e=`data-${t}`,n={CREATED:1,MOUNTED:2,IDLE:3,MOVING:4,DESTROYED:5};function o(t){t.length=0}function i(t){return!a(t)&&"object"==typeof t}function s(t){return Array.isArray(t)}function r(t){return"string"==typeof t}function c(t){return void 0===t}function a(t){return null===t}function l(t){return t instanceof HTMLElement}function u(t){return s(t)?t:[t]}function d(t,e){u(t).forEach(e)}function f(t,e){return t.indexOf(e)>-1}function g(t,e){return t.push(...u(e)),t}const h=Array.prototype;function p(t,e,n){return h.slice.call(t,e,n)}function m(t,e,n){t&&d(e,(e=>{e&&t.classList[n?"add":"remove"](e)}))}function v(t,e){m(t,r(e)?e.split(" "):e,!0)}function y(t,e){d(e,t.appendChild.bind(t))}function _(t,e){d(t,(t=>{const n=e.parentNode;n&&n.insertBefore(t,e)}))}function b(t,e){return l(t)&&(t.msMatchesSelector||t.matches).call(t,e)}function w(t,e){return t?p(t.children).filter((t=>b(t,e))):[]}function S(t,e){return e?w(t,e)[0]:t.firstElementChild}function E(t,e,n){if(t){let o=Object.keys(t);o=n?o.reverse():o;for(let n=0;n<o.length;n++){const i=o[n];if("__proto__"!==i&&!1===e(t[i],i))break}}return t}function x(t){return p(arguments,1).forEach((e=>{E(e,((n,o)=>{t[o]=e[o]}))})),t}function k(t,e){return E(e,((e,n)=>{s(e)?t[n]=e.slice():i(e)?t[n]=k(i(t[n])?t[n]:{},e):t[n]=e})),t}function L(t,e){t&&d(e,(e=>{t.removeAttribute(e)}))}function C(t,e,n){i(e)?E(e,((e,n)=>{C(t,n,e)})):a(n)?L(t,e):t.setAttribute(e,String(n))}function P(t,e,n){const o=document.createElement(t);return e&&(r(e)?v(o,e):C(o,e)),n&&y(n,o),o}function A(t,e,n){if(c(n))return getComputedStyle(t)[e];if(!a(n)){const{style:o}=t;n=`${n}`,o[e]!==n&&(o[e]=n)}}function B(t,e){A(t,"display",e)}function I(t,e){return t.getAttribute(e)}function T(t,e){return t&&t.classList.contains(e)}function z(t){return t.getBoundingClientRect()}function D(t){d(t,(t=>{t&&t.parentNode&&t.parentNode.removeChild(t)}))}function N(t){return S((new DOMParser).parseFromString(t,"text/html").body)}function q(t,e){t.preventDefault(),e&&(t.stopPropagation(),t.stopImmediatePropagation())}function F(t,e){return t&&t.querySelector(e)}function M(t,e){return p(t.querySelectorAll(e))}function j(t,e){m(t,e,!1)}function R(t){return r(t)?t:t?`${t}px`:""}function O(e,n=""){if(!e)throw new Error(`[${t}] ${n}`)}function W(t){setTimeout(t)}const H=()=>{};function K(t){return requestAnimationFrame(t)}const{min:X,max:Y,floor:U,ceil:G,abs:V}=Math;function J(t,e,n,o){const i=X(e,n),s=Y(e,n);return o?i<t&&t<s:i<=t&&t<=s}function Q(t,e,n){const o=X(e,n),i=Y(e,n);return X(Y(o,t),i)}function Z(t){return+(t>0)-+(t<0)}function tt(t,e){return d(e,(e=>{t=t.replace("%s",`${e}`)})),t}function et(t){return t<10?`0${t}`:`${t}`}const nt={};function ot(t){return`${t}${et(nt[t]=(nt[t]||0)+1)}`}const it="mounted",st="ready",rt="move",ct="moved",at="shifted",lt="click",ut="visible",dt="hidden",ft="slide:keydown",gt="refresh",ht="updated",pt="resize",mt="resized",vt="repositioned",yt="scroll",_t="scrolled",bt="destroy",$t="navigation:mounted",wt="lazyload:loaded";function St(t){const{event:e}=t,n={};let o=[];function i(t,e,n){s(t,e,((t,e)=>{o=o.filter((o=>!!(o[0]!==t||o[1]!==e||n&&o[2]!==n)||(t.removeEventListener(e,o[2],o[3]),!1)))}))}function s(t,e,n){d(t,(t=>{t&&e.split(" ").forEach(n.bind(null,t))}))}function r(){o=o.filter((t=>i(t[0],t[1]))),e.offBy(n)}return e.on(bt,r,n),{on:function(t,o,i){e.on(t,o,n,i)},off:function(t){e.off(t,n)},emit:e.emit,bind:function(t,e,n,i){s(t,e,((t,e)=>{o.push([t,e,n,i]),t.addEventListener(e,n,i)}))},unbind:i,destroy:r}}function Et(t,e,n,o){const{now:i}=Date;let s,r,c=0,a=!0,l=0;function u(){if(!a){const r=i()-s;if(r>=t?(c=1,s=i()):c=r/t,n&&n(c),1===c&&(e(),o&&++l>=o))return d();K(u)}}function d(){a=!0}function f(){cancelAnimationFrame(r),c=0,r=0,a=!0}return{start:function(e){!e&&f(),s=i()-(e?c*t:0),a=!1,K(u)},rewind:function(){s=i(),c=0,n&&n(c)},pause:d,cancel:f,set:function(e){t=e},isPaused:function(){return a}}}function xt(t,e){let n;return function(){n||(n=Et(e||0,(()=>{t.apply(this,arguments),n=null}),null,1),n.start())}}const kt="ttb",Lt={marginRight:["marginBottom","marginLeft"],autoWidth:["autoHeight"],fixedWidth:["fixedHeight"],paddingLeft:["paddingTop","paddingRight"],paddingRight:["paddingBottom","paddingLeft"],width:["height"],left:["top","right"],right:["bottom","left"],x:["y"],X:["Y"],Y:["X"],ArrowLeft:["ArrowUp","ArrowRight"],ArrowRight:["ArrowDown","ArrowLeft"]};function Ct(t,e,n){return{resolve:function(t,e){const{direction:o}=n;return Lt[t]["rtl"!==o||e?o===kt?0:-1:1]||t},orient:function(t){return t*("rtl"===n.direction?1:-1)}}}const Pt=t,At=`${t}__slider`,Bt=`${t}__track`,It=`${t}__list`,Tt=`${t}__slide`,zt=`${Tt}--clone`,Dt=`${Tt}__container`,Nt=`${t}__arrows`,qt=`${t}__arrow`,Ft=`${qt}--prev`,Mt=`${qt}--next`,jt=`${t}__pagination`,Rt=`${t}__progress`,Ot=`${Rt}__bar`,Wt=`${t}__autoplay`,Ht=`${t}__play`,Kt=`${t}__pause`,Xt="is-active",Yt="is-prev",Ut="is-next",Gt="is-visible",Vt="is-loading",Jt=[Xt,Gt,Yt,Ut,Vt],Qt={slide:Tt,clone:zt,arrows:Nt,arrow:qt,prev:Ft,next:Mt,pagination:jt,page:`${jt}__page`,spinner:`${t}__spinner`};const Zt="role",te="aria-controls",ee="aria-current",ne="aria-label",oe="aria-hidden",ie="tabindex",se="aria-orientation",re=[Zt,te,ee,ne,oe,se,ie,"disabled"],ce="slide",ae="loop",le="fade";function ue(t,e,n,o){const{on:i,emit:s,bind:r,destroy:c}=St(t),{Components:a,root:l,options:u}=t,{isNavigation:d,updateOnMove:f}=u,{resolve:g}=a.Direction,h=I(o,"style"),p=n>-1,v=S(o,`.${Dt}`),y=u.focusableNodes&&M(o,u.focusableNodes);let _;function b(){const i=p?n:e,s=tt(u.i18n.slideX,i+1),r=t.splides.map((t=>t.splide.root.id)).join(" ");C(o,ne,s),C(o,te,r),C(o,Zt,"menuitem"),E(x())}function $(){_||w()}function w(){if(!_){const{index:n}=t;E(x()),function(t){const e=!t&&!x();C(o,oe,e||null),C(o,ie,!e&&u.slideFocus?0:null),y&&y.forEach((t=>{C(t,ie,e?-1:null)}));t!==T(o,Gt)&&(m(o,Gt,t),s(t?ut:dt,k))}(function(){if(t.is(le))return x();const e=z(a.Elements.track),n=z(o),i=g("left"),s=g("right");return U(e[i])<=G(n[i])&&U(n[s])<=G(e[s])}()),m(o,Yt,e===n-1),m(o,Ut,e===n+1)}}function E(t){t!==T(o,Xt)&&(m(o,Xt,t),d&&C(o,ee,t||null),s(t?"active":"inactive",k))}function x(){const{index:o}=t;return o===e||u.cloneStatus&&o===n}const k={index:e,slideIndex:n,slide:o,container:v,isClone:p,mount:function(){p||(o.id=`${l.id}-slide${et(e+1)}`),r(o,"click keydown",(t=>{s("click"===t.type?lt:ft,k,t)})),i([gt,vt,at,ct,_t],w),i($t,b),f&&i(rt,$)},destroy:function(){_=!0,c(),j(o,Jt),L(o,re),C(o,"style",h)},update:w,style:function(t,e,n){A(n&&v||o,t,e)},isWithin:function(n,o){let i=V(n-e);return p||!u.rewind&&!t.is(ae)||(i=X(i,t.length-i)),i<=o}};return k}const de="http://www.w3.org/2000/svg",fe="m15.5 0.932-4.3 4.38 14.5 14.6-14.5 14.5 4.3 4.4 14.6-14.6 4.4-4.3-4.4-4.4-14.6-14.6z";const ge=`${e}-interval`;const he={passive:!1,capture:!0},pe="touchmove mousemove",me="touchend touchcancel mouseup";const ve=["Left","Right","Up","Down"];const ye=`${e}-lazy`,_e=`${ye}-srcset`,be=`[${ye}], [${_e}]`;const $e=[" ","Enter","Spacebar"];var we=Object.freeze({__proto__:null,Options:function(t,n,o){const i=xt(l);let s,r,c;function a(t){t&&removeEventListener("resize",i)}function l(){const e=(n=t=>t[1].matches,p(r).filter(n)[0]||[]);var n;e[0]!==c&&function(e){const n=o.breakpoints[e]||s;n.destroy?(t.options=s,t.destroy("completely"===n.destroy)):(t.state.is(5)&&(a(!0),t.mount()),t.options=n)}(c=e[0])}return{setup:function(){try{k(o,JSON.parse(I(t.root,e)))}catch(t){O(!1,t.message)}s=k({},o);const{breakpoints:n}=o;if(n){const t="min"===o.mediaQuery;r=Object.keys(n).sort(((e,n)=>t?+n-+e:+e-+n)).map((e=>[e,matchMedia(`(${t?"min":"max"}-width:${e}px)`)])),l()}},mount:function(){r&&addEventListener("resize",i)},destroy:a}},Direction:Ct,Elements:function(e,n,i){const{on:s}=St(e),{root:r}=e,c={},a=[];let l,u,d,f;function h(){!function(){u=S(r,`.${At}`),d=F(r,`.${Bt}`),f=S(d,`.${It}`),O(d&&f,"A track/list element is missing."),g(a,w(f,`.${Tt}:not(.${zt})`));const t=_(`.${Wt}`),e=_(`.${Nt}`);x(c,{root:r,slider:u,track:d,list:f,slides:a,arrows:e,autoplay:t,prev:F(e,`.${Ft}`),next:F(e,`.${Mt}`),bar:F(_(`.${Rt}`),`.${Ot}`),play:F(t,`.${Ht}`),pause:F(t,`.${Kt}`)})}(),function(){const e=r.id||ot(t);r.id=e,d.id=d.id||`${e}-track`,f.id=f.id||`${e}-list`}(),v(r,l=b())}function p(){[r,d,f].forEach((t=>{L(t,"style")})),o(a),j(r,l)}function m(){p(),h()}function y(){j(r,l),v(r,l=b())}function _(t){return S(r,t)||S(u,t)}function b(){return[`${Pt}--${i.type}`,`${Pt}--${i.direction}`,i.drag&&`${Pt}--draggable`,i.isNavigation&&`${Pt}--nav`,Xt]}return x(c,{setup:h,mount:function(){s(gt,m,8),s(ht,y)},destroy:p})},Slides:function(t,e,n){const{on:i,emit:s,bind:c}=St(t),{slides:a,list:g}=e.Elements,h=[];function p(){a.forEach(((t,e)=>{w(t,e,-1)}))}function m(){E((t=>{t.destroy()})),o(h)}function $(){m(),p()}function w(e,n,o){const i=ue(t,n,o,e);i.mount(),h.push(i)}function S(t){return t?x((t=>!t.isClone)):h}function E(t,e){S(e).forEach(t)}function x(t){return h.filter("function"==typeof t?t:e=>r(t)?b(e.slide,t):f(u(t),e.index))}return{mount:function(){p(),i(gt,$),i([it,gt],(()=>{h.sort(((t,e)=>t.index-e.index))}))},destroy:m,update:function(){E((t=>{t.update()}))},register:w,get:S,getIn:function(t){const{Controller:o}=e,i=o.toIndex(t),s=o.hasFocus()?1:n.perPage;return x((t=>J(t.index,i,i+s-1)))},getAt:function(t){return x(t)[0]},add:function(t,e){d(t,(t=>{if(r(t)&&(t=N(t)),l(t)){const o=a[e];o?_(t,o):y(g,t),v(t,n.classes.slide),function(t,e){const n=M(t,"img");let{length:o}=n;o?n.forEach((t=>{c(t,"load error",(()=>{--o||e()}))})):e()}(t,s.bind(null,pt))}})),s(gt)},remove:function(t){D(x(t).map((t=>t.slide))),s(gt)},forEach:E,filter:x,style:function(t,e,n){E((o=>{o.style(t,e,n)}))},getLength:function(t){return t?a.length:h.length},isEnough:function(){return h.length>n.perPage}}},Layout:function(t,e,n){const{on:o,bind:s,emit:r}=St(t),{Slides:c}=e,{resolve:a}=e.Direction,{root:l,track:u,list:d}=e.Elements,{getAt:f}=c;let g,h;function p(){h=null,g=n.direction===kt,A(l,"maxWidth",R(n.width)),A(u,a("paddingLeft"),v(!1)),A(u,a("paddingRight"),v(!0)),m()}function m(){const t=z(l);h&&h.width===t.width&&h.height===t.height||(A(u,"height",function(){let t="";g&&(t=y(),O(t,"height or heightRatio is missing."),t=`calc(${t} - ${v(!1)} - ${v(!0)})`);return t}()),c.style(a("marginRight"),R(n.gap)),c.style("width",(n.autoWidth?"":R(n.fixedWidth)||(g?"":_()))||null),c.style("height",R(n.fixedHeight)||(g?n.autoHeight?"":_():y())||null,!0),h=t,r(mt))}function v(t){const{padding:e}=n,o=a(t?"right":"left");return e&&R(e[o]||(i(e)?0:e))||"0px"}function y(){return R(n.height||z(d).width*n.heightRatio)}function _(){const t=R(n.gap);return`calc((100%${t&&` + ${t}`})/${n.perPage||1}${t&&` - ${t}`})`}function b(t,e){const n=f(t);if(n){const t=z(n.slide)[a("right")],o=z(d)[a("left")];return V(t-o)+(e?0:$())}return 0}function $(){const t=f(0);return t&&parseFloat(A(t.slide,a("marginRight")))||0}return{mount:function(){p(),s(window,"resize load",xt(r.bind(this,pt))),o([ht,gt],p),o(pt,m)},listSize:function(){return z(d)[a("width")]},slideSize:function(t,e){const n=f(t||0);return n?z(n.slide)[a("width")]+(e?0:$()):0},sliderSize:function(){return b(t.length-1,!0)-b(-1,!0)},totalSize:b,getPadding:function(t){return parseFloat(A(u,a("padding"+(t?"Right":"Left"))))||0}}},Clones:function(t,e,n){const{on:i,emit:s}=St(t),{Elements:c,Slides:a}=e,{resolve:l}=e.Direction,u=[];let d;function f(){(d=b())&&(!function(e){const o=a.get().slice(),{length:i}=o;if(i){for(;o.length<e;)g(o,o);g(o.slice(-e),o.slice(0,e)).forEach(((s,r)=>{const l=r<e,d=function(e,o){const i=e.cloneNode(!0);return v(i,n.classes.clone),i.id=`${t.root.id}-clone${et(o+1)}`,i}(s.slide,r);l?_(d,o[0].slide):y(c.list,d),g(u,d),a.register(d,r-e+(l?0:i),s.index)}))}}(d),s(pt))}function h(){D(u),o(u)}function p(){h(),f()}function m(){d<b()&&s(gt)}function b(){let{clones:e}=n;if(t.is(ae)){if(!e){const o=function(t,e){if(r(e)){const n=P("div",{style:`width: ${e}; position: absolute;`},t);e=z(n).width,D(n)}return e}(c.list,n[l("fixedWidth")]);e=(o&&G(z(c.track)[l("width")]/o)||n[l("autoWidth")]&&t.length||n.perPage)*(n.drag?(n.flickMaxPages||1)+1:2)}}else e=0;return e}return{mount:function(){f(),i(gt,p),i([ht,pt],m)},destroy:h}},Move:function(t,e,n){const{on:o,emit:i}=St(t),{slideSize:s,getPadding:r,totalSize:a,listSize:l,sliderSize:u}=e.Layout,{resolve:d,orient:f}=e.Direction,{list:g,track:h}=e.Elements;let p;function m(){S()||(e.Scroll.cancel(),v(t.index),i(vt))}function v(t){y(b(t,!0))}function y(e,n){if(!t.is(le)){const o=n?e:function(e){if(t.is(ae)){const t=f(e-$()),n=E(!1,e)&&t<0,o=E(!0,e)&&t>0;(n||o)&&(e=_(e,o))}return e}(e);g.style.transform=`translate${d("X")}(${o}px)`,e!==o&&i(at)}}function _(t,e){const n=t-w(e),o=u();return t-=f(o*(G(V(n)/o)||1))*(e?1:-1)}function b(e,o){const i=f(a(e-1)-function(t){const{focus:e}=n;return"center"===e?(l()-s(t,!0))/2:+e*s(t)||0}(e));return o?function(e){n.trimSpace&&t.is(ce)&&(e=Q(e,0,f(u()-l())));return e}(i):i}function $(){const t=d("left");return z(g)[t]-z(h)[t]+f(r(!1))}function w(t){return b(t?e.Controller.getEnd():0,!!n.trimSpace)}function S(){return t.state.is(4)&&n.waitForTransition}function E(t,e){e=c(e)?$():e;const n=!0!==t&&f(e)<f(w(!1)),o=!1!==t&&f(e)>f(w(!0));return n||o}return{mount:function(){p=e.Transition,o([it,mt,ht,gt],m)},destroy:function(){L(g,"style")},move:function(o,s,r,c){if(!S()){const{set:a}=t.state,l=$();o!==s&&(p.cancel(),y(_(l,o>s),!0)),a(4),i(rt,s,r,o),p.start(s,(()=>{a(3),i(ct,s,r,o),"move"===n.trimSpace&&o!==r&&l===$()?e.Controller.go(o>r?">":"<",!1,c):c&&c()}))}},jump:v,translate:y,shift:_,cancel:function(){y($()),p.cancel()},toIndex:function(t){const n=e.Slides.get();let o=0,i=1/0;for(let e=0;e<n.length;e++){const s=n[e].index,r=V(b(s,!0)-t);if(!(r<=i))break;i=r,o=s}return o},toPosition:b,getPosition:$,getLimit:w,isBusy:S,exceededLimit:E}},Controller:function(t,e,n){const{on:o}=St(t),{Move:i}=e,{getPosition:s,getLimit:a}=i,{isEnough:l,getLength:u}=e.Slides,d=t.is(ae),f=t.is(ce);let g,h,p,m=n.start||0,v=m;function y(){g=u(!0),h=n.perMove,p=n.perPage,m=Q(m,0,g-1)}function _(t,n,o,s,r){const c=n?t:C(t);e.Scroll.scroll(n||o?i.toPosition(c,!0):t,s,(()=>{P(i.toIndex(i.getPosition())),r&&r()}))}function b(t){return w(!1,t)}function $(t){return w(!0,t)}function w(t,e){const n=h||(A()?1:p),o=S(m+n*(t?-1:1),m);return-1!==o||!f||(i=s(),r=a(!t),c=1,V(i-r)<c)?e?o:x(o):t?0:E();var i,r,c}function S(t,e,o){if(l()){const i=E();t<0||t>i?t=J(0,t,e,!0)||J(i,e,t,!0)?k(L(t)):d?h||A()?t:t<0?-(g%p||p):g:n.rewind?t<0?i:0:-1:o||t===e||(t=h?t:k(L(e)+(t<e?-1:1)))}else t=-1;return t}function E(){let t=g-p;return(A()||d&&h)&&(t=g-1),Y(t,0)}function x(t){return d?l()?t%g+(t<0?g:0):-1:t}function k(t){return Q(A()?t:p*t,0,E())}function L(t){return A()||(t=J(t,g-p,g-1)?g-1:t,t=U(t/p)),t}function C(t){const e=i.toIndex(t);return f?Q(e,0,E()):e}function P(t){t!==m&&(v=m,m=t)}function A(){return!c(n.focus)||n.isNavigation}return{mount:function(){y(),o([ht,gt],y,9)},go:function(t,e,o){const s=function(t){let e=m;if(r(t)){const[,n,o]=t.match(/([+\-<>])(\d+)?/)||[];"+"===n||"-"===n?e=S(m+ +`${n}${+o||1}`,m,!0):">"===n?e=o?k(+o):b(!0):"<"===n&&(e=$(!0))}else e=d?t:Q(t,0,E());return e}(t);if(n.useScroll)_(s,!0,!0,n.speed,o);else{const t=x(s);t>-1&&!i.isBusy()&&(e||t!==m)&&(P(t),i.move(s,t,v,o))}},scroll:_,getNext:b,getPrev:$,getAdjacent:w,getEnd:E,setIndex:P,getIndex:function(t){return t?v:m},toIndex:k,toPage:L,toDest:C,hasFocus:A}},Arrows:function(t,e,n){const{on:o,bind:i,emit:s}=St(t),{classes:r,i18n:c}=n,{Elements:a,Controller:l}=e;let u,d=a.arrows,f=a.prev,g=a.next;const h={};function p(){if(n.arrows&&(f&&g||(d=P("div",r.arrows),f=m(!0),g=m(!1),u=!0,y(d,[f,g]),_(d,S("slider"===n.arrows&&a.slider||t.root)))),f&&g)if(h.prev)B(d,!1===n.arrows?"none":"");else{const{id:t}=a.track;C(f,te,t),C(g,te,t),h.prev=f,h.next=g,function(){const{go:t}=l;o([it,ct,ht,gt,_t],v),i(g,"click",(()=>{t(">",!0)})),i(f,"click",(()=>{t("<",!0)}))}(),s("arrows:mounted",f,g)}}function m(t){return N(`<button class="${r.arrow} ${t?r.prev:r.next}" type="button"><svg xmlns="${de}" viewBox="0 0 40 40" width="40" height="40"><path d="${n.arrowPath||fe}" />`)}function v(){const e=t.index,n=l.getPrev(),o=l.getNext(),i=n>-1&&e<n?c.last:c.prev,r=o>-1&&e>o?c.first:c.next;f.disabled=n<0,g.disabled=o<0,C(f,ne,i),C(g,ne,r),s("arrows:updated",f,g,n,o)}return{arrows:h,mount:function(){p(),o(ht,p)},destroy:function(){u?D(d):(L(f,re),L(g,re))}}},Autoplay:function(t,e,n){const{on:o,bind:i,emit:s}=St(t),r=Et(n.interval,t.go.bind(t,">"),(function(t){const{bar:e}=a;e&&A(e,"width",100*t+"%"),s("autoplay:playing",t)})),{isPaused:c}=r,{Elements:a}=e;let l,u,d;function f(t){const e=t?"pause":"play",o=a[e];o&&(C(o,te,a.track.id),C(o,ne,n.i18n[e]),i(o,"click",t?h:g))}function g(){c()&&e.Slides.isEnough()&&(r.start(!n.resetProgress),u=l=d=!1,s("autoplay:play"))}function h(t=!0){c()||(r.pause(),s("autoplay:pause")),d=t}function p(){d||(l||u?h(!1):g())}function m(){const o=e.Slides.getAt(t.index);r.set(o&&+I(o.slide,ge)||n.interval)}return{mount:function(){const{autoplay:t}=n;t&&(f(!0),f(!1),function(){const{root:t}=a;n.pauseOnHover&&i(t,"mouseenter mouseleave",(t=>{l="mouseenter"===t.type,p()}));n.pauseOnFocus&&i(t,"focusin focusout",(t=>{u="focusin"===t.type,p()}));o([rt,yt,gt],r.rewind),o(rt,m)}(),"pause"!==t&&g())},destroy:r.cancel,play:g,pause:h,isPaused:c}},Cover:function(t,e,n){const{on:o}=St(t);function i(t){e.Slides.forEach((e=>{const n=S(e.container||e.slide,"img");n&&n.src&&s(t,n,e)}))}function s(t,e,n){n.style("background",t?`center/cover no-repeat url("${e.src}")`:"",!0),B(e,t?"none":"")}return{mount:function(){n.cover&&(o(wt,((t,e)=>{s(!0,t,e)})),o([it,ht,gt],i.bind(null,!0)))},destroy:function(){i(!1)}}},Scroll:function(t,e,n){const{on:o,emit:i}=St(t),{Move:s}=e,{getPosition:r,getLimit:c,exceededLimit:a}=s;let l,u;function d(e,o,h,p){const m=r();let v=1;var y;o=o||(y=V(e-m),Y(y/1.5,800)),u=h,g(),l=Et(o,f,(o=>{const i=r(),l=(m+(e-m)*function(t){const{easingFunc:e}=n;return e?e(t):1-Math.pow(1-t,4)}(o)-r())*v;var u;s.translate(i+l),t.is(ce)&&!p&&a()&&(v*=.6,V(l)<10&&(u=a(!1),d(c(!u),600,null,!0)))}),1),i(yt),l.start()}function f(){const e=r(),n=s.toIndex(e);J(n,0,t.length-1)||s.translate(s.shift(e,n>0),!0),u&&u(),i(_t)}function g(){l&&l.cancel()}function h(){l&&!l.isPaused()&&(g(),f())}return{mount:function(){o(rt,g),o([ht,gt],h)},destroy:g,scroll:d,cancel:h}},Drag:function(t,e,n){const{on:o,emit:s,bind:r,unbind:c}=St(t),{Move:a,Scroll:l,Controller:u}=e,{track:d}=e.Elements,{resolve:f,orient:g}=e.Direction,{getPosition:h,exceededLimit:p}=a;let m,v,y,_,$,w,S,E,x,k=!1;function L(){const{drag:t}=n;F(!t),$="free"===t}function C(t){if(!E){const{noDrag:e}=n,o=N(t);!(!e||!b(t.target,e))||!o&&t.button||(a.isBusy()?q(t,!0):(x=o?d:window,y=null,_=null,S=!1,r(x,pe,P,he),r(x,me,A,he),a.cancel(),l.cancel(),B(t)))}}function P(e){if(_||s("drag"),_=e,e.cancelable){const o=z(e)-z(v);if(w){a.translate(m+function(e){return e/(k&&t.is(ce)?5:1)}(o));const n=D(e)-D(v)>200,i=k!==(k=p());(n||i)&&B(e),s("dragging"),S=!0,q(e)}else{let{dragMinThreshold:t}=n;t=i(t)?t:{mouse:0,touch:+t||10},w=V(o)>(N(e)?t.touch:t.mouse),T()&&q(e)}}}function A(o){c(x,pe,P),c(x,me,A);const{index:i}=t;if(_){if(w||o.cancelable&&T()){const s=function(e){if(t.is(ae)||!k){const t=v===_&&y||v,n=z(_)-z(t),o=D(e)-D(t),i=D(e)-D(_)<200;if(o&&i)return n/o}return 0}(o),r=function(t){return h()+Z(t)*X(V(t)*(n.flickPower||600),$?1/0:e.Layout.listSize()*(n.flickMaxPages||1))}(s);$?u.scroll(r):t.is(le)?u.go(i+g(Z(s))):u.go(u.toDest(r),!0),q(o)}s("dragged")}else $||h()===a.toPosition(i)||u.go(i,!0);w=!1}function B(t){y=v,v=t,m=h()}function I(t){!E&&S&&q(t,!0)}function T(){return V(z(_)-z(v))>V(z(_,!0)-z(v,!0))}function z(t,e){return(N(t)?t.touches[0]:t)[`page${f(e?"Y":"X")}`]}function D(t){return t.timeStamp}function N(t){return"undefined"!=typeof TouchEvent&&t instanceof TouchEvent}function F(t){E=t}return{mount:function(){r(d,pe,H,he),r(d,me,H,he),r(d,"touchstart mousedown",C,he),r(d,"click",I,{capture:!0}),r(d,"dragstart",q),o([it,ht],L)},disable:F,isDragging:function(){return w}}},Keyboard:function(t,e,n){const{on:o,bind:i,unbind:s}=St(t),{root:r}=e.Elements,{resolve:c}=e.Direction;let a,u;function d(){const{keyboard:t="global"}=n;t&&("focused"===t?(a=r,C(r,ie,0)):a=window,i(a,"keydown",m))}function g(){s(a,"keydown"),l(a)&&L(a,ie)}function h(){u=!0,W((()=>{u=!1}))}function p(){g(),d()}function m(e){if(!u){const{key:n}=e,o=f(ve,n)?`Arrow${n}`:n;o===c("ArrowLeft")?t.go("<"):o===c("ArrowRight")&&t.go(">")}}return{mount:function(){d(),o(ht,p),o(rt,h)},destroy:g}},LazyLoad:function(t,e,n){const{on:o,off:i,bind:s,emit:r}=St(t),c="sequential"===n.lazyLoad;let a=[],l=0;function u(){f(),d()}function d(){e.Slides.forEach((t=>{M(t.slide,be).forEach((e=>{const o=I(e,ye),i=I(e,_e);if(o!==e.src||i!==e.srcset){const s=n.classes.spinner,r=e.parentElement,c=S(r,`.${s}`)||P("span",s,r);C(c,Zt,"presentation"),a.push({_img:e,_Slide:t,src:o,srcset:i,_spinner:c}),!e.src&&B(e,"none")}}))})),c&&p()}function f(){l=0,a=[]}function g(){a=a.filter((e=>{const o=n.perPage*((n.preloadPages||1)+1)-1;return!e._Slide.isWithin(t.index,o)||h(e)})),a.length||i(ct)}function h(t){const{_img:e}=t;v(t._Slide.slide,Vt),s(e,"load error",(e=>{!function(t,e){const{_Slide:n}=t;j(n.slide,Vt),e||(D(t._spinner),B(t._img,""),r(wt,t._img,n),r(pt));c&&p()}(t,"error"===e.type)})),["src","srcset"].forEach((n=>{t[n]&&(C(e,n,t[n]),L(e,"src"===n?ye:_e))}))}function p(){l<a.length&&h(a[l++])}return{mount:function(){n.lazyLoad&&(d(),o(gt,u),c||o([it,gt,ct,_t],g))},destroy:f}},Pagination:function(t,e,n){const{on:i,emit:s,bind:r,unbind:c}=St(t),{Slides:a,Elements:l,Controller:u}=e,{hasFocus:d,getIndex:f}=u,g=[];let h;function p(){m(),n.pagination&&a.isEnough()&&(!function(){const{length:e}=t,{classes:o,i18n:i,perPage:s}=n,c="slider"===n.pagination&&l.slider||l.root,u=d()?e:G(e/s);h=P("ul",o.pagination,c);for(let t=0;t<u;t++){const e=P("li",null,h),n=P("button",{class:o.page,type:"button"},e),c=a.getIn(t).map((t=>t.slide.id)),l=!d()&&s>1?i.pageX:i.slideX;r(n,"click",y.bind(null,t)),C(n,te,c.join(" ")),C(n,ne,tt(l,t+1)),g.push({li:e,button:n,page:t})}}(),s("pagination:mounted",{list:h,items:g},_(t.index)),b())}function m(){h&&(D(h),g.forEach((t=>{c(t.button,"click")})),o(g),h=null)}function y(t){u.go(`>${t}`,!0,(()=>{const e=a.getAt(u.toIndex(t));var n;e&&((n=e.slide).setActive&&n.setActive()||n.focus({preventScroll:!0}))}))}function _(t){return g[u.toPage(t)]}function b(){const t=_(f(!0)),e=_(f());t&&(j(t.button,Xt),L(t.button,ee)),e&&(v(e.button,Xt),C(e.button,ee,!0)),s("pagination:updated",{list:h,items:g},t,e)}return{items:g,mount:function(){p(),i([ht,gt],p),i([rt,_t],b)},destroy:m,getAt:_,update:b}},Sync:function(t,e,n){const{list:i}=e.Elements,s=[];function r(){t.splides.forEach((e=>{var n;!e.isParent&&(n=e.splide,[t,n].forEach((e=>{const o=St(e),i=e===t?n:t;o.on(rt,((t,e,n)=>{i.go(i.is(ae)?n:t)})),s.push(o)})))})),n.isNavigation&&function(){const e=St(t),{on:n}=e;n(lt,l),n(ft,u),n([it,ht],a),C(i,Zt,"menu"),s.push(e),e.emit($t,t.splides)}()}function c(){L(i,re),s.forEach((t=>{t.destroy()})),o(s)}function a(){C(i,se,n.direction!==kt?"horizontal":null)}function l(e){t.go(e.index)}function u(t,e){f($e,e.key)&&(l(t),q(e))}return{mount:r,destroy:c,remount:function(){c(),r()}}},Wheel:function(t,e,n){const{bind:o}=St(t);function i(o){if(o.cancelable){const{deltaY:i}=o;if(i){const s=i<0;t.go(s?"<":">"),function(o){return!n.releaseWheel||t.state.is(4)||-1!==e.Controller.getAdjacent(o)}(s)&&q(o)}}}return{mount:function(){n.wheel&&o(e.Elements.track,"wheel",i,he)}}}});const Se={type:"slide",speed:400,waitForTransition:!0,perPage:1,cloneStatus:!0,arrows:!0,pagination:!0,interval:5e3,pauseOnHover:!0,pauseOnFocus:!0,resetProgress:!0,easing:"cubic-bezier(0.25, 1, 0.5, 1)",drag:!0,direction:"ltr",slideFocus:!0,trimSpace:!0,focusableNodes:"a, button, textarea, input, select, iframe",classes:Qt,i18n:{prev:"Previous slide",next:"Next slide",first:"Go to first slide",last:"Go to last slide",slideX:"Go to slide %s",pageX:"Go to page %s",play:"Start autoplay",pause:"Pause autoplay"}};function Ee(t,e,n){const{on:o}=St(t);return{mount:function(){o([it,gt],(()=>{W((()=>{e.Slides.style("transition",`opacity ${n.speed}ms ${n.easing}`)}))}))},start:function(t,n){const{track:o}=e.Elements;A(o,"height",R(z(o).height)),W((()=>{n(),A(o,"height","")}))},cancel:H}}function xe(t,e,n){const{bind:o}=St(t),{Move:i,Controller:s}=e,{list:r}=e.Elements;let c;function a(){l("")}function l(t){A(r,"transition",t)}return{mount:function(){o(r,"transitionend",(t=>{t.target===r&&c&&(a(),c())}))},start:function(e,o){const r=i.toPosition(e,!0),a=i.getPosition(),u=function(e){const{rewindSpeed:o}=n;if(t.is(ce)&&o){const t=s.getIndex(!0),n=s.getEnd();if(0===t&&e>=n||t>=n&&0===e)return o}return n.speed}(e);V(r-a)>=1&&u>=1?(l(`transform ${u}ms ${n.easing}`),i.translate(r,!0),c=o):(i.jump(e),o())},cancel:a}}const ke=class{constructor(t,e){this.event=function(){let t={};function e(e,o){n(e,((e,n)=>{const i=t[e];t[e]=i&&i.filter((t=>t._key?t._key!==o:o||t._namespace!==n))}))}function n(t,e){u(t).join(" ").split(" ").forEach((t=>{const n=t.split(".");e(n[0],n[1])}))}return{on:function(e,o,i,s=10){n(e,((e,n)=>{t[e]=t[e]||[],g(t[e],{_event:e,_callback:o,_namespace:n,_priority:s,_key:i}).sort(((t,e)=>t._priority-e._priority))}))},off:e,offBy:function(n){E(t,((t,o)=>{e(o,n)}))},emit:function(e){(t[e]||[]).forEach((t=>{t._callback.apply(t,p(arguments,1))}))},destroy:function(){t={}}}}(),this.Components={},this.state=function(t){let e=t;return{set:function(t){e=t},is:function(t){return f(u(t),e)}}}(1),this.splides=[],this._options={},this._Extensions={};const n=r(t)?F(document,t):t;O(n,`${n} is invalid.`),this.root=n,k(Se,ke.defaults),k(k(this._options,Se),e||{})}mount(t,e){const{state:n,Components:o}=this;O(n.is([1,5]),"Already mounted!"),n.set(1),this._Components=o,this._Transition=e||this._Transition||(this.is(le)?Ee:xe),this._Extensions=t||this._Extensions;return E(x({},we,this._Extensions,{Transition:this._Transition}),((t,e)=>{const n=t(this,o,this._options);o[e]=n,n.setup&&n.setup()})),E(o,(t=>{t.mount&&t.mount()})),this.emit(it),v(this.root,"is-initialized"),n.set(3),this.emit(st),this}sync(t){return this.splides.push({splide:t}),t.splides.push({splide:this,isParent:!0}),this.state.is(3)&&(this._Components.Sync.remount(),t.Components.Sync.remount()),this}go(t){return this._Components.Controller.go(t),this}on(t,e){return this.event.on(t,e,null,20),this}off(t){return this.event.off(t),this}emit(t){return this.event.emit(t,...p(arguments,1)),this}add(t,e){return this._Components.Slides.add(t,e),this}remove(t){return this._Components.Slides.remove(t),this}is(t){return this._options.type===t}refresh(){return this.emit(gt),this}destroy(t=!0){const{event:e,state:n}=this;return n.is(1)?e.on(st,this.destroy.bind(this,t),this):(E(this._Components,(e=>{e.destroy&&e.destroy(t)}),!0),e.emit(bt),e.destroy(),t&&o(this.splides),n.set(5)),this}get options(){return this._options}set options(t){const{_options:e}=this;k(e,t),this.state.is(1)||this.emit(ht,e)}get length(){return this._Components.Slides.getLength(!0)}get index(){return this._Components.Controller.getIndex()}};let Le=ke;Le.defaults={},Le.STATES=n;var Ce,Pe=(t=>(t.Cozy="cozy",t.Japandi="japandi",t.Modern="modern",t.Fusion="fusion",t.NeoClassic="neoclassic",t))(Pe||{});(Ce=Pe||(Pe={})).fromString=function(t){return"cozy"===t?"cozy":"japandi"===t?"japandi":"neoclassic"===t?"neoclassic":"modern"===t?"modern":"fusion"===t?"fusion":"cozy"},Ce.fromNumber=function(t){return 0===t?"cozy":1===t?"japandi":2===t?"fusion":3===t?"modern":"neoclassic"};class Ae{static formatCurrency(t){return Intl.NumberFormat("uk-UA",{maximumFractionDigits:2}).format(t)}}var Be=(t,e,n)=>new Promise(((o,i)=>{var s=t=>{try{c(n.next(t))}catch(t){i(t)}},r=t=>{try{c(n.throw(t))}catch(t){i(t)}},c=t=>t.done?o(t.value):Promise.resolve(t.value).then(s,r);c((n=n.apply(t,e)).next())}));class Ie{constructor(t){this._storage=t}collectPortugalClientData(t){return Be(this,null,(function*(){return fetch("https://script.google.com/macros/s/AKfycbzyzzY4bi4yQoHdsTeVmm8BxGQ-bGW_-rK_erhrFA0zKak6rQ27p-k9Mx3HWk6vKEIatw/exec",{method:"POST",body:t}).catch((t=>console.error("Error!",t.message)))}))}collectPortugalCalcData(t){return Be(this,null,(function*(){const e=Boolean(this._storage.get("appliances_bool_total")),n=Boolean(this._storage.get("furniture_bool")),o=this._storage.get("space"),i=Boolean(this._storage.get("bath")),s=Boolean(this._storage.get("shower")),r=this._storage.get("amount_of_rooms"),c=this._storage.get("amount_of_bathrooms"),a=Boolean(this._storage.get("demontage")),l=this._storage.get("windows_installation"),u=Boolean(this._storage.get("finishing_materials")),d=Boolean(this._storage.get("cement_screed")),f=Boolean(this._storage.get("builtin_furiture")),g=this._storage.get("heated_flooring"),h=Boolean(this._storage.get("denoising")),p=Boolean(this._storage.get("entrance_doors")),m=this._storage.get("conditioning"),v=this._storage.get("flooring"),y=this._storage.get("transportation_expenses"),_=this._storage.get("appliances"),b=this._storage.get("summedPrice"),$=this._storage.get("costPerMetre"),w=(o<=40?3:o<=80?4:o<=100?5:o<=130?6:o<=150?7:o<=175?8:9)+("modern"==t||"neoclassic"==t?1:0),S=new FormData;return S.append("Style",t),S.append("Total cost VAT",Ae.formatCurrency(b)),S.append("Total cost",Ae.formatCurrency(b/1.23)),S.append("Cost per metre",Ae.formatCurrency($)),S.append("Cost per metre VAT",Ae.formatCurrency(1.23*$)),S.append("Area",o.toString()),S.append("Number of bedrooms",r.toString()),S.append("Number of bathrooms",c.toString()),S.append("Bath",i?"1":"0"),S.append("Shower",s?"1":"0"),S.append("Distance from Lisbon",y.toString()),S.append("Flooring",v),S.append("Finishing materials",u?"1":"0"),S.append("Dismantling works",a?"1":"0"),S.append("Cement screed",d?"1":"0"),S.append("Entrance doors",p?"1":"0"),S.append("Soundproofing",h?"1":"0"),S.append("Built-in furniture",f?"1":"0"),S.append("Underfloor heating",g.toString()),S.append("Air conditioning",m.toString()),S.append("Window installation",l.toString()),S.append("Decorating",n?"1":"0"),S.append("Appliances",e?_:"0"),S.append("Time to completion",w.toString()),fetch("https://script.google.com/macros/s/AKfycbwnwi3SZ8gK3zSYW2DEoc6BtY9HS1stpRSHPW6pATmX2UawetpC-74YPZ5LjjX282Ki/exec",{method:"POST",body:S}).catch((t=>console.error(t)))}))}collectPortugalSpecificationData(t){return Be(this,null,(function*(){const e=this._storage.get("style"),n=Boolean(this._storage.get("appliances_bool_total")),o=Boolean(this._storage.get("furniture_bool")),i=this._storage.get("space"),s=Boolean(this._storage.get("bath")),r=Boolean(this._storage.get("shower")),c=this._storage.get("amount_of_rooms"),a=this._storage.get("amount_of_bathrooms"),l=Boolean(this._storage.get("demontage")),u=this._storage.get("windows_installation"),d=Boolean(this._storage.get("finishing_materials")),f=Boolean(this._storage.get("cement_screed")),g=Boolean(this._storage.get("builtin_furiture")),h=this._storage.get("heated_flooring"),p=Boolean(this._storage.get("denoising")),m=Boolean(this._storage.get("entrance_doors")),v=this._storage.get("conditioning"),y=this._storage.get("flooring"),_=this._storage.get("transportation_expenses"),b=this._storage.get("appliances"),$=this._storage.get("summedPrice"),w=this._storage.get("costPerMetre"),S=(i<=40?3:i<=80?4:i<=100?5:i<=130?6:i<=150?7:i<=175?8:9)+("modern"==e||"neoclassic"==e?1:0);return t.append("Style",e),t.append("Total cost VAT",Ae.formatCurrency($)),t.append("Total cost",Ae.formatCurrency($/1.23)),t.append("Cost per metre",Ae.formatCurrency(w)),t.append("Cost per metre VAT",Ae.formatCurrency(1.23*w)),t.append("Area",i.toString()),t.append("Number of bedrooms",c.toString()),t.append("Number of bathrooms",a.toString()),t.append("Bath",s?"1":"0"),t.append("Shower",r?"1":"0"),t.append("Distance from Lisbon",_.toString()),t.append("Flooring",y),t.append("Finishing materials",d?"1":"0"),t.append("Dismantling works",l?"1":"0"),t.append("Cement screed",f?"1":"0"),t.append("Entrance doors",m?"1":"0"),t.append("Soundproofing",p?"1":"0"),t.append("Built-in furniture",g?"1":"0"),t.append("Underfloor heating",h.toString()),t.append("Air conditioning",v.toString()),t.append("Window installation",u.toString()),t.append("Decorating",o?"1":"0"),t.append("Appliances",n?b:"0"),t.append("Time to completion",S.toString()),fetch("https://script.google.com/macros/s/AKfycbzwN8RKdZRUWDBLNnvUwxxK9FXHUVPeqPpGFJYu9NT9zLsc34JKzIHgHz1CwFbNYGzs/exec",{method:"POST",body:t}).catch((t=>console.error(t)))}))}}var Te=(t=>(t[t.uk=0]="uk",t[t.en=1]="en",t))(Te||{});class ze{constructor(t,e=!1){if(e)switch(t){case 0:this._init();case 1:this._initPortugal();default:this._init()}}get(t){try{return JSON.parse(localStorage.getItem(t))}catch(e){return localStorage.getItem(t)}}set(t,e){localStorage.setItem(t,e.toString())}_init(){this.set("style","cozy"),this.set("bath",!0),this.set("shower",!1),this.set("ceiling","stretch ceiling"),this.set("flooring","laminat"),this.set("hygienic_shower",!1),this.set("second_gypsum_layer",!1),this.set("floor_screed",!1),this.set("heated_flooring",!1),this.set("denoising",!1),this.set("entrance_doors",!1),this.set("conditioning",!1),this.set("amount_of_rooms",2),this.set("amount_of_bathrooms",1),this.set("appliances","gorenje"),this.set("appliances_bool_total",!1),this.set("furniture_bool",!0),this.set("space",50),this.set("color",1)}_initPortugal(){this.set("style","cozy"),this.set("color",1),this.set("space",50),this.set("amount_of_rooms",2),this.set("amount_of_bathrooms",1),this.set("bath",!0),this.set("shower",!1),this.set("flooring","laminat"),this.set("finishing_materials",!1),this.set("demontage",!1),this.set("cement_screed",!1),this.set("heated_flooring",0),this.set("denoising",!1),this.set("entrance_doors",!1),this.set("windows_installation",0),this.set("builtin_furniture",!1),this.set("conditioning",0),this.set("furniture_bool",!1),this.set("appliances_bool_total",!1),this.set("appliances","gorenje"),this.set("transportation_expenses",5)}storageToRequestBody(t){const e={};for(const n in t)"length"!==n&&"costPerMetre"!=n&&"color"!=n&&("true"!==String(t[n])?"false"!==String(t[n])?isFinite(Number(t[n]))?e[n]=Number(t[n]):e[n]=t[n]:e[n]=0:e[n]=1);return JSON.stringify(e)}}$((function(){const t=window.innerWidth||document.documentElement.clientWidth,e=window.innerHeight||document.documentElement.clientHeight,n=document.getElementById("splideBody"),o=document.getElementById("splideNext"),i=document.getElementById("splidePrev"),s=document.getElementById("splideNextText"),r=document.getElementById("splidePrevText"),c=document.getElementById("submitBtn"),a=document.getElementById("node"),l=document.getElementById("name"),u=document.getElementById("phone"),d=document.getElementById("agreementCheckbox"),f=document.getElementById("appliancesBool"),g=document.getElementById("wf-form-consult");document.querySelector('input[name="Phone-Number"]').name="Phone Number";const h={arrows:!1,pagination:!1,speed:550,flickPower:400,breakpoints:{480:{pagination:!0,speed:650}}},p=new ze(Te.uk,!1),m=new Ie(p),v=new Le(".slider-container.splide",h);if(v.mount(),document.querySelectorAll("input").forEach((function(){try{this.name=this.dataset.name}catch(t){}})),$(".slider-wrapper.splide").length){$(".fact-link").on("click",(function(){$(this).is(".active")||($(".fact-container.active").removeClass("active"),$(".fact-container").eq($(this).index()).addClass("active"),$(".fact-link.active").removeClass("active"),$(this).addClass("active"))})),document.querySelectorAll("div.tab-new").forEach((t=>t.addEventListener("click",(function(){if(this.classList.contains("active"))return;const t=parseInt(this.dataset.sliderIndex),e=Pe.fromNumber(t);document.querySelector("div.tab-new.active").classList.remove("active"),this.classList.add("active"),document.querySelector(`div.calculator-tab[data-slider-index="${t}"]`).click(),$(".slider-image-new").removeClass("active"),$(".slider-image-new").each((function(){$(this).index()==t&&$(this).addClass("active")})),$(".calculator-slide.splide__slide .calculator-slide, .calculator-slide .color-var").toggle(!1),$(`.calculator-slide.splide__slide .calculator-slide .color-1, .calculator-slide.${e}, .specification-${e}.color-1`).toggle(!0),$(".calculator-slide.splide__slide .calculator-slide").eq(t).toggle(!0)}))));const e=new Le(".slider-wrapper.splide",h);e.mount(),e.on("move",((e,...c)=>{setTimeout((()=>n.style.height=$(".splide__slide.is-active .active img").css("height")),t>480?550:750);let a="",l="";switch(i.classList.remove("disabled"),o.classList.remove("disabled"),e){case 0:a="",l="Bedroom",i.classList.add("disabled");break;case 1:a="Living room",l="Kitchen";break;case 2:a="Bedroom",l="Shower";break;case 3:a="Kitchen",l="Bathroom";break;case 4:a="Shower",l="",o.classList.add("disabled");break;default:return}r.innerText=a,s.innerText=l})),n.style.height=$(".splide__slide.is-active .active img").css("height"),o.addEventListener("click",(()=>e.go(">"))),i.addEventListener("click",(()=>e.go("<")))}document.querySelectorAll(".calculator-tab").forEach((t=>t.addEventListener("click",(t=>{const e=t.currentTarget,n=parseInt(e.dataset.sliderIndex),o=Pe.fromNumber(n);$(".calculator-slide.splide__slide .calculator-slide, .calculator-slide .color-var").toggle(!1),$(`.calculator-slide.splide__slide .calculator-slide .color-1, .calculator-slide.${o}, .specification-${o}.color-1`).toggle(!0),$(".calculator-slide.splide__slide .calculator-slide").eq(n).toggle(!0),document.querySelector(".calculator-tab.active").classList.remove("active"),e.classList.add("active"),$(".tab-new").eq(n).trigger("click"),x().classList.remove("active"),document.querySelector('.color-tab[data-color-index="1"]').classList.add("active"),p.set("color",1)})))),$(".increment-field .increment").on("click",(function(){$(this).siblings(".increment-input").length<=0&&$(this).siblings(".increment-input").val(0)})),g.addEventListener("submit",(t=>{if(t.preventDefault(),d.checked?$(".warning.agreementcheckbox").toggle(!1):$(".warning.agreementcheckbox").toggle(!0),0==u.value.length?$(".warning.inputs.phone").toggle(!0):$(".warning.inputs.phone").toggle(!1),0==l.value.length?$(".warning.inputs.name").toggle(!0):$(".warning.inputs.name").toggle(!1),$(".warning").is(":visible"))return t.stopImmediatePropagation(),!1;{const t=c.value;c.value="Please wait...";const e=new FormData(g);m.collectPortugalClientData(e).then((()=>c.value=t)).finally((()=>window.location.assign("/kdyakuiemo")))}})),$(".choice").on("click",(function(){$(this).hasClass("choiceActive")||(f.checked&&($(".choiceActive").removeClass("choiceActive"),$(".choice-gradient.gradientrevamped").removeClass("gradientrevamped")),$(this).addClass("choiceActive"),$(this).parent().addClass("gradientrevamped"))})),a.addEventListener("change",(function(){this.checked&&$(".choiceActive").length&&($(".choiceActive").removeClass("choiceActive"),$(".choice-gradient.gradientrevamped").removeClass("gradientrevamped"))})),f.addEventListener("change",(function(){this.checked&&!$(".choiceActive").length&&($(".choice").first().addClass("choiceActive"),$(".choice-gradient").first().addClass("gradientrevamped"))})),$(".hover-text").on("click",(function(){let n=$(this);n.siblings(".hover-modal").css("display","flex"),0==parseInt(n.siblings(".hover-modal").css("opacity"))?(function(n){const o=n.getBoundingClientRect();return o.top>=0&&o.left>=0&&o.bottom<=e&&o.right<=t}(n.siblings(".hover-modal").get(0))||$([document.documentElement,document.body]).animate({scrollTop:n.siblings(".hover-modal").offset().top-96},450),n.siblings(".hover-modal").animate({bottom:42,opacity:1},200,"swing")):n.siblings(".hover-modal").animate({bottom:12,opacity:0},200,(function(){n.siblings(".hover-modal").toggle(!1)}))})),$("div.submit-container .button").on("click",(function(t){t.preventDefault();let e=p.get("style"),n=p.get("color");null!=e&&null!=n||(e=Pe.fromNumber(parseInt(document.querySelector("div.calculator-tab.active").dataset.sliderIndex)).toString(),n=parseInt(document.querySelector("div.color-tab.active").dataset.colorIndex),p.set("style",e),p.set("color",n)),m.collectPortugalCalcData(e),window.open(`/specifications/${e}-${n}`,"_blank")})),$(".closing-btn").on("click",(function(){let t=$(this);t.parent(".hover-modal").animate({bottom:12,opacity:0},200,(function(){t.parent(".hover-modal").toggle(!1)}))})),t<=480&&document.querySelectorAll("img.image-75").forEach((t=>t.removeAttribute("sizes"))),t>=992?($(".preview-image, .blackbg-text").on({mouseenter:()=>$(".video-cursor").css("opacity",1),mouseleave:()=>$(".video-cursor").css("opacity",0)}),$(".project-link-image").on({mouseenter:()=>$(".project-dot").css("opacity",1),mouseleave:()=>$(".project-dot").css("opacity",0)}),$(".arrow-right").on({mouseenter:()=>$(".small-hover.right").css("opacity",1),mouseleave:()=>$(".small-hover.right").css("opacity",0)}),$(".arrow-left").on({mouseenter:()=>$(".small-hover.left").css("opacity",1),mouseleave:()=>$(".small-hover.left").css("opacity",0)}),document.querySelectorAll(".color-tab").forEach((t=>t.addEventListener("click",(t=>{const e=t.currentTarget,n=parseInt(e.dataset.colorIndex);n!=p.get("color")&&(x().classList.remove("active"),e.classList.add("active"),p.set("color",n),$(".color-var").toggle(!1),$(`.calculator-slide .color-${n}`).toggle(!0))})))),document.querySelectorAll(".calculator-slider-option").forEach((t=>t.addEventListener("click",(function(t){const e=t.currentTarget;document.querySelector(".calculator-slider-option.active").classList.remove("active"),this.classList.add("active"),v.go(parseInt(e.dataset.sliderIndex))})))),$(".calculator-arrow").on("click",(function(){$(this).is(".arrow-right")?v.go(">"):v.go("<"),document.querySelector(".calculator-slider-option.active").classList.remove("active"),$(`.calculator-slider-option:eq(${v.index})`).addClass("active")})),$(".calculator form").on("keydown",(t=>{"Enter"==t.key&&t.preventDefault()}))):document.querySelector('div.calculator-tab[data-slider-index="1"]').click();const y=document.querySelector("div.modal-container"),_=document.querySelector("nav.nav-menu.w-nav-menu"),b=document.querySelector("div.dim"),w=document.querySelector("a.mobile-nav-button[data-click-action='navigation-close']"),S=document.querySelector("a.mobile-nav-button[data-click-action='navigation-open']");function E(){y.classList.remove("shown")}function x(){return document.querySelector(`.color-tab[data-color-index="${p.get("color")}"]`)}document.querySelectorAll('.gradientrevamped[data-click-action="consultation"]').forEach((t=>t.addEventListener("click",(()=>{y.classList.add("shown")})))),document.querySelector(".cross-button.modal").addEventListener("click",E),y.addEventListener("click",E),document.querySelector("div.consult-modal").addEventListener("click",(function(t){t.stopPropagation()})),S.addEventListener("click",(function(){_.classList.add("shown"),b.classList.add("shown"),this.classList.remove("shown"),w.classList.add("shown")})),w.addEventListener("click",(function(){_.classList.remove("shown"),b.classList.remove("shown"),this.classList.remove("shown"),S.classList.add("shown")})),b.addEventListener("click",(()=>w.click()))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QWdGQSxTQUFTK29CLElBQ1AsT0FBTzlwQixTQUFTNEIsY0FDZCxnQ0FBZ0MrbUIsRUFBb0J6VixJQUFJLGFBRTVELENBdEdBbFQsU0FDRzhCLGlCQUFpQix1REFDakJ2RixTQUFTMnNCLEdBQ1JBLEVBQVF0aUIsaUJBQWlCLFNBQVMsS0FDaEN3a0IsRUFBZ0IxdEIsVUFBVUYsSUFBSSxRQUFRLE1BSzVDd0MsU0FDRzRCLGNBQWMsdUJBQ2RnRixpQkFBaUIsUUFBUzZrQixHQUU3QkwsRUFBZ0J4a0IsaUJBQWlCLFFBQVM2a0IsR0FPMUN6ckIsU0FDRzRCLGNBQWMscUJBQ2RnRixpQkFBaUIsU0FBUyxTQUFVckYsR0FDbkNBLEVBQUVDLGlCQUNKLElBSUZncUIsRUFBeUI1a0IsaUJBQWlCLFNBQVMsV0FDakR5a0IsRUFBZTN0QixVQUFVRixJQUFJLFNBQzdCOHRCLEVBQUs1dEIsVUFBVUYsSUFBSSxTQUNuQjhLLEtBQUs1SyxVQUFVcUQsT0FBTyxTQUN0QndxQixFQUEwQjd0QixVQUFVRixJQUFJLFFBQzFDLElBRUErdEIsRUFBMEIza0IsaUJBQWlCLFNBQVMsV0FDbER5a0IsRUFBZTN0QixVQUFVcUQsT0FBTyxTQUNoQ3VxQixFQUFLNXRCLFVBQVVxRCxPQUFPLFNBQ3RCdUgsS0FBSzVLLFVBQVVxRCxPQUFPLFNBQ3RCeXFCLEVBQXlCOXRCLFVBQVVGLElBQUksUUFDekMsSUFFQTh0QixFQUFLMWtCLGlCQUFpQixTQUFTLElBQU0ya0IsRUFBMEJsQyxTQTZEakUsRyIsInNvdXJjZXMiOlsid2VicGFjazovL2ZvcnRlcy8uL25vZGVfbW9kdWxlcy9Ac3BsaWRlanMvc3BsaWRlL2Rpc3QvanMvc3BsaWRlLmVzbS5qcyIsIndlYnBhY2s6Ly9mb3J0ZXMvLi9zcmMvbW9kZWxzL1N0eWxlLnRzIiwid2VicGFjazovL2ZvcnRlcy8uL3NyYy91dGlscy9Gb3JtYXR0ZXIudHMiLCJ3ZWJwYWNrOi8vZm9ydGVzLy4vc3JjL3V0aWxzL0RhdGFDb2xsZWN0aW9uSGFuZGxlci50cyIsIndlYnBhY2s6Ly9mb3J0ZXMvLi9zcmMvdXRpbHMvTG9jYWxTdG9yYWdlSGFuZGxlci50cyIsIndlYnBhY2s6Ly9mb3J0ZXMvLi9zcmMvbG9naWNzX3BvcnR1Z2FsXzEudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBTcGxpZGUuanNcbiAqIFZlcnNpb24gIDogMy41LjhcbiAqIExpY2Vuc2UgIDogTUlUXG4gKiBDb3B5cmlnaHQ6IDIwMjEgTmFvdG9zaGkgRnVqaXRhXG4gKi9cbmNvbnN0IFBST0pFQ1RfQ09ERSA9IFwic3BsaWRlXCI7XG5jb25zdCBEQVRBX0FUVFJJQlVURSA9IGBkYXRhLSR7UFJPSkVDVF9DT0RFfWA7XG5cbmNvbnN0IENSRUFURUQgPSAxO1xuY29uc3QgTU9VTlRFRCA9IDI7XG5jb25zdCBJRExFID0gMztcbmNvbnN0IE1PVklORyA9IDQ7XG5jb25zdCBERVNUUk9ZRUQgPSA1O1xuY29uc3QgU1RBVEVTID0ge1xuICBDUkVBVEVELFxuICBNT1VOVEVELFxuICBJRExFLFxuICBNT1ZJTkcsXG4gIERFU1RST1lFRFxufTtcblxuY29uc3QgREVGQVVMVF9FVkVOVF9QUklPUklUWSA9IDEwO1xuY29uc3QgREVGQVVMVF9VU0VSX0VWRU5UX1BSSU9SSVRZID0gMjA7XG5cbmZ1bmN0aW9uIGVtcHR5KGFycmF5KSB7XG4gIGFycmF5Lmxlbmd0aCA9IDA7XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KHN1YmplY3QpIHtcbiAgcmV0dXJuICFpc051bGwoc3ViamVjdCkgJiYgdHlwZW9mIHN1YmplY3QgPT09IFwib2JqZWN0XCI7XG59XG5mdW5jdGlvbiBpc0FycmF5KHN1YmplY3QpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoc3ViamVjdCk7XG59XG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHN1YmplY3QpIHtcbiAgcmV0dXJuIHR5cGVvZiBzdWJqZWN0ID09PSBcImZ1bmN0aW9uXCI7XG59XG5mdW5jdGlvbiBpc1N0cmluZyhzdWJqZWN0KSB7XG4gIHJldHVybiB0eXBlb2Ygc3ViamVjdCA9PT0gXCJzdHJpbmdcIjtcbn1cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKHN1YmplY3QpIHtcbiAgcmV0dXJuIHR5cGVvZiBzdWJqZWN0ID09PSBcInVuZGVmaW5lZFwiO1xufVxuZnVuY3Rpb24gaXNOdWxsKHN1YmplY3QpIHtcbiAgcmV0dXJuIHN1YmplY3QgPT09IG51bGw7XG59XG5mdW5jdGlvbiBpc0hUTUxFbGVtZW50KHN1YmplY3QpIHtcbiAgcmV0dXJuIHN1YmplY3QgaW5zdGFuY2VvZiBIVE1MRWxlbWVudDtcbn1cblxuZnVuY3Rpb24gdG9BcnJheSh2YWx1ZSkge1xuICByZXR1cm4gaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFt2YWx1ZV07XG59XG5cbmZ1bmN0aW9uIGZvckVhY2godmFsdWVzLCBpdGVyYXRlZSkge1xuICB0b0FycmF5KHZhbHVlcykuZm9yRWFjaChpdGVyYXRlZSk7XG59XG5cbmZ1bmN0aW9uIGluY2x1ZGVzKGFycmF5LCB2YWx1ZSkge1xuICByZXR1cm4gYXJyYXkuaW5kZXhPZih2YWx1ZSkgPiAtMTtcbn1cblxuZnVuY3Rpb24gcHVzaChhcnJheSwgaXRlbXMpIHtcbiAgYXJyYXkucHVzaCguLi50b0FycmF5KGl0ZW1zKSk7XG4gIHJldHVybiBhcnJheTtcbn1cblxuY29uc3QgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxuZnVuY3Rpb24gc2xpY2UoYXJyYXlMaWtlLCBzdGFydCwgZW5kKSB7XG4gIHJldHVybiBhcnJheVByb3RvLnNsaWNlLmNhbGwoYXJyYXlMaWtlLCBzdGFydCwgZW5kKTtcbn1cblxuZnVuY3Rpb24gZmluZChhcnJheUxpa2UsIHByZWRpY2F0ZSkge1xuICByZXR1cm4gc2xpY2UoYXJyYXlMaWtlKS5maWx0ZXIocHJlZGljYXRlKVswXTtcbn1cblxuZnVuY3Rpb24gdG9nZ2xlQ2xhc3MoZWxtLCBjbGFzc2VzLCBhZGQpIHtcbiAgaWYgKGVsbSkge1xuICAgIGZvckVhY2goY2xhc3NlcywgKG5hbWUpID0+IHtcbiAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgIGVsbS5jbGFzc0xpc3RbYWRkID8gXCJhZGRcIiA6IFwicmVtb3ZlXCJdKG5hbWUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFkZENsYXNzKGVsbSwgY2xhc3Nlcykge1xuICB0b2dnbGVDbGFzcyhlbG0sIGlzU3RyaW5nKGNsYXNzZXMpID8gY2xhc3Nlcy5zcGxpdChcIiBcIikgOiBjbGFzc2VzLCB0cnVlKTtcbn1cblxuZnVuY3Rpb24gYXBwZW5kKHBhcmVudCwgY2hpbGRyZW4pIHtcbiAgZm9yRWFjaChjaGlsZHJlbiwgcGFyZW50LmFwcGVuZENoaWxkLmJpbmQocGFyZW50KSk7XG59XG5cbmZ1bmN0aW9uIGJlZm9yZShub2RlcywgcmVmKSB7XG4gIGZvckVhY2gobm9kZXMsIChub2RlKSA9PiB7XG4gICAgY29uc3QgcGFyZW50ID0gcmVmLnBhcmVudE5vZGU7XG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShub2RlLCByZWYpO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXMoZWxtLCBzZWxlY3Rvcikge1xuICByZXR1cm4gaXNIVE1MRWxlbWVudChlbG0pICYmIChlbG1bXCJtc01hdGNoZXNTZWxlY3RvclwiXSB8fCBlbG0ubWF0Y2hlcykuY2FsbChlbG0sIHNlbGVjdG9yKTtcbn1cblxuZnVuY3Rpb24gY2hpbGRyZW4ocGFyZW50LCBzZWxlY3Rvcikge1xuICByZXR1cm4gcGFyZW50ID8gc2xpY2UocGFyZW50LmNoaWxkcmVuKS5maWx0ZXIoKGNoaWxkKSA9PiBtYXRjaGVzKGNoaWxkLCBzZWxlY3RvcikpIDogW107XG59XG5cbmZ1bmN0aW9uIGNoaWxkKHBhcmVudCwgc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHNlbGVjdG9yID8gY2hpbGRyZW4ocGFyZW50LCBzZWxlY3RvcilbMF0gOiBwYXJlbnQuZmlyc3RFbGVtZW50Q2hpbGQ7XG59XG5cbmZ1bmN0aW9uIGZvck93bihvYmplY3QsIGl0ZXJhdGVlLCByaWdodCkge1xuICBpZiAob2JqZWN0KSB7XG4gICAgbGV0IGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuICAgIGtleXMgPSByaWdodCA/IGtleXMucmV2ZXJzZSgpIDoga2V5cztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGtleSA9IGtleXNbaV07XG4gICAgICBpZiAoa2V5ICE9PSBcIl9fcHJvdG9fX1wiKSB7XG4gICAgICAgIGlmIChpdGVyYXRlZShvYmplY3Rba2V5XSwga2V5KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gb2JqZWN0O1xufVxuXG5mdW5jdGlvbiBhc3NpZ24ob2JqZWN0KSB7XG4gIHNsaWNlKGFyZ3VtZW50cywgMSkuZm9yRWFjaCgoc291cmNlKSA9PiB7XG4gICAgZm9yT3duKHNvdXJjZSwgKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgIG9iamVjdFtrZXldID0gc291cmNlW2tleV07XG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gb2JqZWN0O1xufVxuXG5mdW5jdGlvbiBtZXJnZShvYmplY3QsIHNvdXJjZSkge1xuICBmb3JPd24oc291cmNlLCAodmFsdWUsIGtleSkgPT4ge1xuICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgb2JqZWN0W2tleV0gPSB2YWx1ZS5zbGljZSgpO1xuICAgIH0gZWxzZSBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICBvYmplY3Rba2V5XSA9IG1lcmdlKGlzT2JqZWN0KG9iamVjdFtrZXldKSA/IG9iamVjdFtrZXldIDoge30sIHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gb2JqZWN0O1xufVxuXG5mdW5jdGlvbiByZW1vdmVBdHRyaWJ1dGUoZWxtLCBhdHRycykge1xuICBpZiAoZWxtKSB7XG4gICAgZm9yRWFjaChhdHRycywgKGF0dHIpID0+IHtcbiAgICAgIGVsbS5yZW1vdmVBdHRyaWJ1dGUoYXR0cik7XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2V0QXR0cmlidXRlKGVsbSwgYXR0cnMsIHZhbHVlKSB7XG4gIGlmIChpc09iamVjdChhdHRycykpIHtcbiAgICBmb3JPd24oYXR0cnMsICh2YWx1ZTIsIG5hbWUpID0+IHtcbiAgICAgIHNldEF0dHJpYnV0ZShlbG0sIG5hbWUsIHZhbHVlMik7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgaXNOdWxsKHZhbHVlKSA/IHJlbW92ZUF0dHJpYnV0ZShlbG0sIGF0dHJzKSA6IGVsbS5zZXRBdHRyaWJ1dGUoYXR0cnMsIFN0cmluZyh2YWx1ZSkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZSh0YWcsIGF0dHJzLCBwYXJlbnQpIHtcbiAgY29uc3QgZWxtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWcpO1xuICBpZiAoYXR0cnMpIHtcbiAgICBpc1N0cmluZyhhdHRycykgPyBhZGRDbGFzcyhlbG0sIGF0dHJzKSA6IHNldEF0dHJpYnV0ZShlbG0sIGF0dHJzKTtcbiAgfVxuICBwYXJlbnQgJiYgYXBwZW5kKHBhcmVudCwgZWxtKTtcbiAgcmV0dXJuIGVsbTtcbn1cblxuZnVuY3Rpb24gc3R5bGUoZWxtLCBwcm9wLCB2YWx1ZSkge1xuICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKSB7XG4gICAgcmV0dXJuIGdldENvbXB1dGVkU3R5bGUoZWxtKVtwcm9wXTtcbiAgfVxuICBpZiAoIWlzTnVsbCh2YWx1ZSkpIHtcbiAgICBjb25zdCB7IHN0eWxlOiBzdHlsZTIgfSA9IGVsbTtcbiAgICB2YWx1ZSA9IGAke3ZhbHVlfWA7XG4gICAgaWYgKHN0eWxlMltwcm9wXSAhPT0gdmFsdWUpIHtcbiAgICAgIHN0eWxlMltwcm9wXSA9IHZhbHVlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBkaXNwbGF5KGVsbSwgZGlzcGxheTIpIHtcbiAgc3R5bGUoZWxtLCBcImRpc3BsYXlcIiwgZGlzcGxheTIpO1xufVxuXG5mdW5jdGlvbiBmb2N1cyhlbG0pIHtcbiAgZWxtW1wic2V0QWN0aXZlXCJdICYmIGVsbVtcInNldEFjdGl2ZVwiXSgpIHx8IGVsbS5mb2N1cyh7IHByZXZlbnRTY3JvbGw6IHRydWUgfSk7XG59XG5cbmZ1bmN0aW9uIGdldEF0dHJpYnV0ZShlbG0sIGF0dHIpIHtcbiAgcmV0dXJuIGVsbS5nZXRBdHRyaWJ1dGUoYXR0cik7XG59XG5cbmZ1bmN0aW9uIGhhc0NsYXNzKGVsbSwgY2xhc3NOYW1lKSB7XG4gIHJldHVybiBlbG0gJiYgZWxtLmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpO1xufVxuXG5mdW5jdGlvbiByZWN0KHRhcmdldCkge1xuICByZXR1cm4gdGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xufVxuXG5mdW5jdGlvbiByZW1vdmUobm9kZXMpIHtcbiAgZm9yRWFjaChub2RlcywgKG5vZGUpID0+IHtcbiAgICBpZiAobm9kZSAmJiBub2RlLnBhcmVudE5vZGUpIHtcbiAgICAgIG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBtZWFzdXJlKHBhcmVudCwgdmFsdWUpIHtcbiAgaWYgKGlzU3RyaW5nKHZhbHVlKSkge1xuICAgIGNvbnN0IGRpdiA9IGNyZWF0ZShcImRpdlwiLCB7IHN0eWxlOiBgd2lkdGg6ICR7dmFsdWV9OyBwb3NpdGlvbjogYWJzb2x1dGU7YCB9LCBwYXJlbnQpO1xuICAgIHZhbHVlID0gcmVjdChkaXYpLndpZHRoO1xuICAgIHJlbW92ZShkaXYpO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gcGFyc2VIdG1sKGh0bWwpIHtcbiAgcmV0dXJuIGNoaWxkKG5ldyBET01QYXJzZXIoKS5wYXJzZUZyb21TdHJpbmcoaHRtbCwgXCJ0ZXh0L2h0bWxcIikuYm9keSk7XG59XG5cbmZ1bmN0aW9uIHByZXZlbnQoZSwgc3RvcFByb3BhZ2F0aW9uKSB7XG4gIGUucHJldmVudERlZmF1bHQoKTtcbiAgaWYgKHN0b3BQcm9wYWdhdGlvbikge1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBxdWVyeShwYXJlbnQsIHNlbGVjdG9yKSB7XG4gIHJldHVybiBwYXJlbnQgJiYgcGFyZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xufVxuXG5mdW5jdGlvbiBxdWVyeUFsbChwYXJlbnQsIHNlbGVjdG9yKSB7XG4gIHJldHVybiBzbGljZShwYXJlbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVDbGFzcyhlbG0sIGNsYXNzZXMpIHtcbiAgdG9nZ2xlQ2xhc3MoZWxtLCBjbGFzc2VzLCBmYWxzZSk7XG59XG5cbmZ1bmN0aW9uIHVuaXQodmFsdWUpIHtcbiAgcmV0dXJuIGlzU3RyaW5nKHZhbHVlKSA/IHZhbHVlIDogdmFsdWUgPyBgJHt2YWx1ZX1weGAgOiBcIlwiO1xufVxuXG5mdW5jdGlvbiBhc3NlcnQoY29uZGl0aW9uLCBtZXNzYWdlID0gXCJcIikge1xuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihgWyR7UFJPSkVDVF9DT0RFfV0gJHttZXNzYWdlfWApO1xuICB9XG59XG5cbmZ1bmN0aW9uIG5leHRUaWNrKGNhbGxiYWNrKSB7XG4gIHNldFRpbWVvdXQoY2FsbGJhY2spO1xufVxuXG5jb25zdCBub29wID0gKCkgPT4ge1xufTtcblxuZnVuY3Rpb24gcmFmKGZ1bmMpIHtcbiAgcmV0dXJuIHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jKTtcbn1cblxuY29uc3QgeyBtaW4sIG1heCwgZmxvb3IsIGNlaWwsIGFicyB9ID0gTWF0aDtcblxuZnVuY3Rpb24gYXBwcm94aW1hdGVseUVxdWFsKHgsIHksIGVwc2lsb24pIHtcbiAgcmV0dXJuIGFicyh4IC0geSkgPCBlcHNpbG9uO1xufVxuXG5mdW5jdGlvbiBiZXR3ZWVuKG51bWJlciwgbWluT3JNYXgsIG1heE9yTWluLCBleGNsdXNpdmUpIHtcbiAgY29uc3QgbWluaW11bSA9IG1pbihtaW5Pck1heCwgbWF4T3JNaW4pO1xuICBjb25zdCBtYXhpbXVtID0gbWF4KG1pbk9yTWF4LCBtYXhPck1pbik7XG4gIHJldHVybiBleGNsdXNpdmUgPyBtaW5pbXVtIDwgbnVtYmVyICYmIG51bWJlciA8IG1heGltdW0gOiBtaW5pbXVtIDw9IG51bWJlciAmJiBudW1iZXIgPD0gbWF4aW11bTtcbn1cblxuZnVuY3Rpb24gY2xhbXAobnVtYmVyLCB4LCB5KSB7XG4gIGNvbnN0IG1pbmltdW0gPSBtaW4oeCwgeSk7XG4gIGNvbnN0IG1heGltdW0gPSBtYXgoeCwgeSk7XG4gIHJldHVybiBtaW4obWF4KG1pbmltdW0sIG51bWJlciksIG1heGltdW0pO1xufVxuXG5mdW5jdGlvbiBzaWduKHgpIHtcbiAgcmV0dXJuICsoeCA+IDApIC0gKyh4IDwgMCk7XG59XG5cbmZ1bmN0aW9uIGNhbWVsVG9LZWJhYihzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC8oW2EtejAtOV0pKFtBLVpdKS9nLCBcIiQxLSQyXCIpLnRvTG93ZXJDYXNlKCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdChzdHJpbmcsIHJlcGxhY2VtZW50cykge1xuICBmb3JFYWNoKHJlcGxhY2VtZW50cywgKHJlcGxhY2VtZW50KSA9PiB7XG4gICAgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UoXCIlc1wiLCBgJHtyZXBsYWNlbWVudH1gKTtcbiAgfSk7XG4gIHJldHVybiBzdHJpbmc7XG59XG5cbmZ1bmN0aW9uIHBhZChudW1iZXIpIHtcbiAgcmV0dXJuIG51bWJlciA8IDEwID8gYDAke251bWJlcn1gIDogYCR7bnVtYmVyfWA7XG59XG5cbmNvbnN0IGlkcyA9IHt9O1xuZnVuY3Rpb24gdW5pcXVlSWQocHJlZml4KSB7XG4gIHJldHVybiBgJHtwcmVmaXh9JHtwYWQoaWRzW3ByZWZpeF0gPSAoaWRzW3ByZWZpeF0gfHwgMCkgKyAxKX1gO1xufVxuXG5mdW5jdGlvbiBFdmVudEJ1cygpIHtcbiAgbGV0IGhhbmRsZXJzID0ge307XG4gIGZ1bmN0aW9uIG9uKGV2ZW50cywgY2FsbGJhY2ssIGtleSwgcHJpb3JpdHkgPSBERUZBVUxUX0VWRU5UX1BSSU9SSVRZKSB7XG4gICAgZm9yRWFjaEV2ZW50KGV2ZW50cywgKGV2ZW50LCBuYW1lc3BhY2UpID0+IHtcbiAgICAgIGhhbmRsZXJzW2V2ZW50XSA9IGhhbmRsZXJzW2V2ZW50XSB8fCBbXTtcbiAgICAgIHB1c2goaGFuZGxlcnNbZXZlbnRdLCB7XG4gICAgICAgIF9ldmVudDogZXZlbnQsXG4gICAgICAgIF9jYWxsYmFjazogY2FsbGJhY2ssXG4gICAgICAgIF9uYW1lc3BhY2U6IG5hbWVzcGFjZSxcbiAgICAgICAgX3ByaW9yaXR5OiBwcmlvcml0eSxcbiAgICAgICAgX2tleToga2V5XG4gICAgICB9KS5zb3J0KChoYW5kbGVyMSwgaGFuZGxlcjIpID0+IGhhbmRsZXIxLl9wcmlvcml0eSAtIGhhbmRsZXIyLl9wcmlvcml0eSk7XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gb2ZmKGV2ZW50cywga2V5KSB7XG4gICAgZm9yRWFjaEV2ZW50KGV2ZW50cywgKGV2ZW50LCBuYW1lc3BhY2UpID0+IHtcbiAgICAgIGNvbnN0IGV2ZW50SGFuZGxlcnMgPSBoYW5kbGVyc1tldmVudF07XG4gICAgICBoYW5kbGVyc1tldmVudF0gPSBldmVudEhhbmRsZXJzICYmIGV2ZW50SGFuZGxlcnMuZmlsdGVyKChoYW5kbGVyKSA9PiB7XG4gICAgICAgIHJldHVybiBoYW5kbGVyLl9rZXkgPyBoYW5kbGVyLl9rZXkgIT09IGtleSA6IGtleSB8fCBoYW5kbGVyLl9uYW1lc3BhY2UgIT09IG5hbWVzcGFjZTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIG9mZkJ5KGtleSkge1xuICAgIGZvck93bihoYW5kbGVycywgKGV2ZW50SGFuZGxlcnMsIGV2ZW50KSA9PiB7XG4gICAgICBvZmYoZXZlbnQsIGtleSk7XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gZW1pdChldmVudCkge1xuICAgIChoYW5kbGVyc1tldmVudF0gfHwgW10pLmZvckVhY2goKGhhbmRsZXIpID0+IHtcbiAgICAgIGhhbmRsZXIuX2NhbGxiYWNrLmFwcGx5KGhhbmRsZXIsIHNsaWNlKGFyZ3VtZW50cywgMSkpO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgaGFuZGxlcnMgPSB7fTtcbiAgfVxuICBmdW5jdGlvbiBmb3JFYWNoRXZlbnQoZXZlbnRzLCBpdGVyYXRlZSkge1xuICAgIHRvQXJyYXkoZXZlbnRzKS5qb2luKFwiIFwiKS5zcGxpdChcIiBcIikuZm9yRWFjaCgoZXZlbnROUykgPT4ge1xuICAgICAgY29uc3QgZnJhZ21lbnRzID0gZXZlbnROUy5zcGxpdChcIi5cIik7XG4gICAgICBpdGVyYXRlZShmcmFnbWVudHNbMF0sIGZyYWdtZW50c1sxXSk7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBvbixcbiAgICBvZmYsXG4gICAgb2ZmQnksXG4gICAgZW1pdCxcbiAgICBkZXN0cm95XG4gIH07XG59XG5cbmNvbnN0IEVWRU5UX01PVU5URUQgPSBcIm1vdW50ZWRcIjtcbmNvbnN0IEVWRU5UX1JFQURZID0gXCJyZWFkeVwiO1xuY29uc3QgRVZFTlRfTU9WRSA9IFwibW92ZVwiO1xuY29uc3QgRVZFTlRfTU9WRUQgPSBcIm1vdmVkXCI7XG5jb25zdCBFVkVOVF9TSElGVEVEID0gXCJzaGlmdGVkXCI7XG5jb25zdCBFVkVOVF9DTElDSyA9IFwiY2xpY2tcIjtcbmNvbnN0IEVWRU5UX0FDVElWRSA9IFwiYWN0aXZlXCI7XG5jb25zdCBFVkVOVF9JTkFDVElWRSA9IFwiaW5hY3RpdmVcIjtcbmNvbnN0IEVWRU5UX1ZJU0lCTEUgPSBcInZpc2libGVcIjtcbmNvbnN0IEVWRU5UX0hJRERFTiA9IFwiaGlkZGVuXCI7XG5jb25zdCBFVkVOVF9TTElERV9LRVlET1dOID0gXCJzbGlkZTprZXlkb3duXCI7XG5jb25zdCBFVkVOVF9SRUZSRVNIID0gXCJyZWZyZXNoXCI7XG5jb25zdCBFVkVOVF9VUERBVEVEID0gXCJ1cGRhdGVkXCI7XG5jb25zdCBFVkVOVF9SRVNJWkUgPSBcInJlc2l6ZVwiO1xuY29uc3QgRVZFTlRfUkVTSVpFRCA9IFwicmVzaXplZFwiO1xuY29uc3QgRVZFTlRfUkVQT1NJVElPTkVEID0gXCJyZXBvc2l0aW9uZWRcIjtcbmNvbnN0IEVWRU5UX0RSQUcgPSBcImRyYWdcIjtcbmNvbnN0IEVWRU5UX0RSQUdHSU5HID0gXCJkcmFnZ2luZ1wiO1xuY29uc3QgRVZFTlRfRFJBR0dFRCA9IFwiZHJhZ2dlZFwiO1xuY29uc3QgRVZFTlRfU0NST0xMID0gXCJzY3JvbGxcIjtcbmNvbnN0IEVWRU5UX1NDUk9MTEVEID0gXCJzY3JvbGxlZFwiO1xuY29uc3QgRVZFTlRfREVTVFJPWSA9IFwiZGVzdHJveVwiO1xuY29uc3QgRVZFTlRfQVJST1dTX01PVU5URUQgPSBcImFycm93czptb3VudGVkXCI7XG5jb25zdCBFVkVOVF9BUlJPV1NfVVBEQVRFRCA9IFwiYXJyb3dzOnVwZGF0ZWRcIjtcbmNvbnN0IEVWRU5UX1BBR0lOQVRJT05fTU9VTlRFRCA9IFwicGFnaW5hdGlvbjptb3VudGVkXCI7XG5jb25zdCBFVkVOVF9QQUdJTkFUSU9OX1VQREFURUQgPSBcInBhZ2luYXRpb246dXBkYXRlZFwiO1xuY29uc3QgRVZFTlRfTkFWSUdBVElPTl9NT1VOVEVEID0gXCJuYXZpZ2F0aW9uOm1vdW50ZWRcIjtcbmNvbnN0IEVWRU5UX0FVVE9QTEFZX1BMQVkgPSBcImF1dG9wbGF5OnBsYXlcIjtcbmNvbnN0IEVWRU5UX0FVVE9QTEFZX1BMQVlJTkcgPSBcImF1dG9wbGF5OnBsYXlpbmdcIjtcbmNvbnN0IEVWRU5UX0FVVE9QTEFZX1BBVVNFID0gXCJhdXRvcGxheTpwYXVzZVwiO1xuY29uc3QgRVZFTlRfTEFaWUxPQURfTE9BREVEID0gXCJsYXp5bG9hZDpsb2FkZWRcIjtcblxuZnVuY3Rpb24gRXZlbnRJbnRlcmZhY2UoU3BsaWRlMikge1xuICBjb25zdCB7IGV2ZW50IH0gPSBTcGxpZGUyO1xuICBjb25zdCBrZXkgPSB7fTtcbiAgbGV0IGxpc3RlbmVycyA9IFtdO1xuICBmdW5jdGlvbiBvbihldmVudHMsIGNhbGxiYWNrLCBwcmlvcml0eSkge1xuICAgIGV2ZW50Lm9uKGV2ZW50cywgY2FsbGJhY2ssIGtleSwgcHJpb3JpdHkpO1xuICB9XG4gIGZ1bmN0aW9uIG9mZihldmVudHMpIHtcbiAgICBldmVudC5vZmYoZXZlbnRzLCBrZXkpO1xuICB9XG4gIGZ1bmN0aW9uIGJpbmQodGFyZ2V0cywgZXZlbnRzLCBjYWxsYmFjaywgb3B0aW9ucykge1xuICAgIGZvckVhY2hFdmVudCh0YXJnZXRzLCBldmVudHMsICh0YXJnZXQsIGV2ZW50MikgPT4ge1xuICAgICAgbGlzdGVuZXJzLnB1c2goW3RhcmdldCwgZXZlbnQyLCBjYWxsYmFjaywgb3B0aW9uc10pO1xuICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQyLCBjYWxsYmFjaywgb3B0aW9ucyk7XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gdW5iaW5kKHRhcmdldHMsIGV2ZW50cywgY2FsbGJhY2spIHtcbiAgICBmb3JFYWNoRXZlbnQodGFyZ2V0cywgZXZlbnRzLCAodGFyZ2V0LCBldmVudDIpID0+IHtcbiAgICAgIGxpc3RlbmVycyA9IGxpc3RlbmVycy5maWx0ZXIoKGxpc3RlbmVyKSA9PiB7XG4gICAgICAgIGlmIChsaXN0ZW5lclswXSA9PT0gdGFyZ2V0ICYmIGxpc3RlbmVyWzFdID09PSBldmVudDIgJiYgKCFjYWxsYmFjayB8fCBsaXN0ZW5lclsyXSA9PT0gY2FsbGJhY2spKSB7XG4gICAgICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQyLCBsaXN0ZW5lclsyXSwgbGlzdGVuZXJbM10pO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGZvckVhY2hFdmVudCh0YXJnZXRzLCBldmVudHMsIGl0ZXJhdGVlKSB7XG4gICAgZm9yRWFjaCh0YXJnZXRzLCAodGFyZ2V0KSA9PiB7XG4gICAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAgIGV2ZW50cy5zcGxpdChcIiBcIikuZm9yRWFjaChpdGVyYXRlZS5iaW5kKG51bGwsIHRhcmdldCkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgbGlzdGVuZXJzID0gbGlzdGVuZXJzLmZpbHRlcigoZGF0YSkgPT4gdW5iaW5kKGRhdGFbMF0sIGRhdGFbMV0pKTtcbiAgICBldmVudC5vZmZCeShrZXkpO1xuICB9XG4gIGV2ZW50Lm9uKEVWRU5UX0RFU1RST1ksIGRlc3Ryb3ksIGtleSk7XG4gIHJldHVybiB7XG4gICAgb24sXG4gICAgb2ZmLFxuICAgIGVtaXQ6IGV2ZW50LmVtaXQsXG4gICAgYmluZCxcbiAgICB1bmJpbmQsXG4gICAgZGVzdHJveVxuICB9O1xufVxuXG5mdW5jdGlvbiBSZXF1ZXN0SW50ZXJ2YWwoaW50ZXJ2YWwsIG9uSW50ZXJ2YWwsIG9uVXBkYXRlLCBsaW1pdCkge1xuICBjb25zdCB7IG5vdyB9ID0gRGF0ZTtcbiAgbGV0IHN0YXJ0VGltZTtcbiAgbGV0IHJhdGUgPSAwO1xuICBsZXQgaWQ7XG4gIGxldCBwYXVzZWQgPSB0cnVlO1xuICBsZXQgY291bnQgPSAwO1xuICBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgaWYgKCFwYXVzZWQpIHtcbiAgICAgIGNvbnN0IGVsYXBzZWQgPSBub3coKSAtIHN0YXJ0VGltZTtcbiAgICAgIGlmIChlbGFwc2VkID49IGludGVydmFsKSB7XG4gICAgICAgIHJhdGUgPSAxO1xuICAgICAgICBzdGFydFRpbWUgPSBub3coKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJhdGUgPSBlbGFwc2VkIC8gaW50ZXJ2YWw7XG4gICAgICB9XG4gICAgICBpZiAob25VcGRhdGUpIHtcbiAgICAgICAgb25VcGRhdGUocmF0ZSk7XG4gICAgICB9XG4gICAgICBpZiAocmF0ZSA9PT0gMSkge1xuICAgICAgICBvbkludGVydmFsKCk7XG4gICAgICAgIGlmIChsaW1pdCAmJiArK2NvdW50ID49IGxpbWl0KSB7XG4gICAgICAgICAgcmV0dXJuIHBhdXNlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJhZih1cGRhdGUpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBzdGFydChyZXN1bWUpIHtcbiAgICAhcmVzdW1lICYmIGNhbmNlbCgpO1xuICAgIHN0YXJ0VGltZSA9IG5vdygpIC0gKHJlc3VtZSA/IHJhdGUgKiBpbnRlcnZhbCA6IDApO1xuICAgIHBhdXNlZCA9IGZhbHNlO1xuICAgIHJhZih1cGRhdGUpO1xuICB9XG4gIGZ1bmN0aW9uIHBhdXNlKCkge1xuICAgIHBhdXNlZCA9IHRydWU7XG4gIH1cbiAgZnVuY3Rpb24gcmV3aW5kKCkge1xuICAgIHN0YXJ0VGltZSA9IG5vdygpO1xuICAgIHJhdGUgPSAwO1xuICAgIGlmIChvblVwZGF0ZSkge1xuICAgICAgb25VcGRhdGUocmF0ZSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICBjYW5jZWxBbmltYXRpb25GcmFtZShpZCk7XG4gICAgcmF0ZSA9IDA7XG4gICAgaWQgPSAwO1xuICAgIHBhdXNlZCA9IHRydWU7XG4gIH1cbiAgZnVuY3Rpb24gc2V0KHRpbWUpIHtcbiAgICBpbnRlcnZhbCA9IHRpbWU7XG4gIH1cbiAgZnVuY3Rpb24gaXNQYXVzZWQoKSB7XG4gICAgcmV0dXJuIHBhdXNlZDtcbiAgfVxuICByZXR1cm4ge1xuICAgIHN0YXJ0LFxuICAgIHJld2luZCxcbiAgICBwYXVzZSxcbiAgICBjYW5jZWwsXG4gICAgc2V0LFxuICAgIGlzUGF1c2VkXG4gIH07XG59XG5cbmZ1bmN0aW9uIFN0YXRlKGluaXRpYWxTdGF0ZSkge1xuICBsZXQgc3RhdGUgPSBpbml0aWFsU3RhdGU7XG4gIGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgIHN0YXRlID0gdmFsdWU7XG4gIH1cbiAgZnVuY3Rpb24gaXMoc3RhdGVzKSB7XG4gICAgcmV0dXJuIGluY2x1ZGVzKHRvQXJyYXkoc3RhdGVzKSwgc3RhdGUpO1xuICB9XG4gIHJldHVybiB7IHNldCwgaXMgfTtcbn1cblxuZnVuY3Rpb24gVGhyb3R0bGUoZnVuYywgZHVyYXRpb24pIHtcbiAgbGV0IGludGVydmFsO1xuICBmdW5jdGlvbiB0aHJvdHRsZWQoKSB7XG4gICAgaWYgKCFpbnRlcnZhbCkge1xuICAgICAgaW50ZXJ2YWwgPSBSZXF1ZXN0SW50ZXJ2YWwoZHVyYXRpb24gfHwgMCwgKCkgPT4ge1xuICAgICAgICBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIGludGVydmFsID0gbnVsbDtcbiAgICAgIH0sIG51bGwsIDEpO1xuICAgICAgaW50ZXJ2YWwuc3RhcnQoKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRocm90dGxlZDtcbn1cblxuZnVuY3Rpb24gT3B0aW9ucyhTcGxpZGUyLCBDb21wb25lbnRzMiwgb3B0aW9ucykge1xuICBjb25zdCB0aHJvdHRsZWRPYnNlcnZlID0gVGhyb3R0bGUob2JzZXJ2ZSk7XG4gIGxldCBpbml0aWFsT3B0aW9ucztcbiAgbGV0IHBvaW50cztcbiAgbGV0IGN1cnJQb2ludDtcbiAgZnVuY3Rpb24gc2V0dXAoKSB7XG4gICAgdHJ5IHtcbiAgICAgIG1lcmdlKG9wdGlvbnMsIEpTT04ucGFyc2UoZ2V0QXR0cmlidXRlKFNwbGlkZTIucm9vdCwgREFUQV9BVFRSSUJVVEUpKSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgYXNzZXJ0KGZhbHNlLCBlLm1lc3NhZ2UpO1xuICAgIH1cbiAgICBpbml0aWFsT3B0aW9ucyA9IG1lcmdlKHt9LCBvcHRpb25zKTtcbiAgICBjb25zdCB7IGJyZWFrcG9pbnRzIH0gPSBvcHRpb25zO1xuICAgIGlmIChicmVha3BvaW50cykge1xuICAgICAgY29uc3QgaXNNaW4gPSBvcHRpb25zLm1lZGlhUXVlcnkgPT09IFwibWluXCI7XG4gICAgICBwb2ludHMgPSBPYmplY3Qua2V5cyhicmVha3BvaW50cykuc29ydCgobiwgbSkgPT4gaXNNaW4gPyArbSAtICtuIDogK24gLSArbSkubWFwKChwb2ludCkgPT4gW1xuICAgICAgICBwb2ludCxcbiAgICAgICAgbWF0Y2hNZWRpYShgKCR7aXNNaW4gPyBcIm1pblwiIDogXCJtYXhcIn0td2lkdGg6JHtwb2ludH1weClgKVxuICAgICAgXSk7XG4gICAgICBvYnNlcnZlKCk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIG1vdW50KCkge1xuICAgIGlmIChwb2ludHMpIHtcbiAgICAgIGFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgdGhyb3R0bGVkT2JzZXJ2ZSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGRlc3Ryb3koY29tcGxldGVseSkge1xuICAgIGlmIChjb21wbGV0ZWx5KSB7XG4gICAgICByZW1vdmVFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIHRocm90dGxlZE9ic2VydmUpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBvYnNlcnZlKCkge1xuICAgIGNvbnN0IGl0ZW0gPSBmaW5kKHBvaW50cywgKGl0ZW0yKSA9PiBpdGVtMlsxXS5tYXRjaGVzKSB8fCBbXTtcbiAgICBpZiAoaXRlbVswXSAhPT0gY3VyclBvaW50KSB7XG4gICAgICBvbk1hdGNoKGN1cnJQb2ludCA9IGl0ZW1bMF0pO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBvbk1hdGNoKHBvaW50KSB7XG4gICAgY29uc3QgbmV3T3B0aW9ucyA9IG9wdGlvbnMuYnJlYWtwb2ludHNbcG9pbnRdIHx8IGluaXRpYWxPcHRpb25zO1xuICAgIGlmIChuZXdPcHRpb25zLmRlc3Ryb3kpIHtcbiAgICAgIFNwbGlkZTIub3B0aW9ucyA9IGluaXRpYWxPcHRpb25zO1xuICAgICAgU3BsaWRlMi5kZXN0cm95KG5ld09wdGlvbnMuZGVzdHJveSA9PT0gXCJjb21wbGV0ZWx5XCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoU3BsaWRlMi5zdGF0ZS5pcyhERVNUUk9ZRUQpKSB7XG4gICAgICAgIGRlc3Ryb3kodHJ1ZSk7XG4gICAgICAgIFNwbGlkZTIubW91bnQoKTtcbiAgICAgIH1cbiAgICAgIFNwbGlkZTIub3B0aW9ucyA9IG5ld09wdGlvbnM7XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgc2V0dXAsXG4gICAgbW91bnQsXG4gICAgZGVzdHJveVxuICB9O1xufVxuXG5jb25zdCBSVEwgPSBcInJ0bFwiO1xuY29uc3QgVFRCID0gXCJ0dGJcIjtcblxuY29uc3QgT1JJRU5UQVRJT05fTUFQID0ge1xuICBtYXJnaW5SaWdodDogW1wibWFyZ2luQm90dG9tXCIsIFwibWFyZ2luTGVmdFwiXSxcbiAgYXV0b1dpZHRoOiBbXCJhdXRvSGVpZ2h0XCJdLFxuICBmaXhlZFdpZHRoOiBbXCJmaXhlZEhlaWdodFwiXSxcbiAgcGFkZGluZ0xlZnQ6IFtcInBhZGRpbmdUb3BcIiwgXCJwYWRkaW5nUmlnaHRcIl0sXG4gIHBhZGRpbmdSaWdodDogW1wicGFkZGluZ0JvdHRvbVwiLCBcInBhZGRpbmdMZWZ0XCJdLFxuICB3aWR0aDogW1wiaGVpZ2h0XCJdLFxuICBsZWZ0OiBbXCJ0b3BcIiwgXCJyaWdodFwiXSxcbiAgcmlnaHQ6IFtcImJvdHRvbVwiLCBcImxlZnRcIl0sXG4gIHg6IFtcInlcIl0sXG4gIFg6IFtcIllcIl0sXG4gIFk6IFtcIlhcIl0sXG4gIEFycm93TGVmdDogW1wiQXJyb3dVcFwiLCBcIkFycm93UmlnaHRcIl0sXG4gIEFycm93UmlnaHQ6IFtcIkFycm93RG93blwiLCBcIkFycm93TGVmdFwiXVxufTtcbmZ1bmN0aW9uIERpcmVjdGlvbihTcGxpZGUyLCBDb21wb25lbnRzMiwgb3B0aW9ucykge1xuICBmdW5jdGlvbiByZXNvbHZlKHByb3AsIGF4aXNPbmx5KSB7XG4gICAgY29uc3QgeyBkaXJlY3Rpb24gfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgaW5kZXggPSBkaXJlY3Rpb24gPT09IFJUTCAmJiAhYXhpc09ubHkgPyAxIDogZGlyZWN0aW9uID09PSBUVEIgPyAwIDogLTE7XG4gICAgcmV0dXJuIE9SSUVOVEFUSU9OX01BUFtwcm9wXVtpbmRleF0gfHwgcHJvcDtcbiAgfVxuICBmdW5jdGlvbiBvcmllbnQodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgKiAob3B0aW9ucy5kaXJlY3Rpb24gPT09IFJUTCA/IDEgOiAtMSk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICByZXNvbHZlLFxuICAgIG9yaWVudFxuICB9O1xufVxuXG5jb25zdCBDTEFTU19ST09UID0gUFJPSkVDVF9DT0RFO1xuY29uc3QgQ0xBU1NfU0xJREVSID0gYCR7UFJPSkVDVF9DT0RFfV9fc2xpZGVyYDtcbmNvbnN0IENMQVNTX1RSQUNLID0gYCR7UFJPSkVDVF9DT0RFfV9fdHJhY2tgO1xuY29uc3QgQ0xBU1NfTElTVCA9IGAke1BST0pFQ1RfQ09ERX1fX2xpc3RgO1xuY29uc3QgQ0xBU1NfU0xJREUgPSBgJHtQUk9KRUNUX0NPREV9X19zbGlkZWA7XG5jb25zdCBDTEFTU19DTE9ORSA9IGAke0NMQVNTX1NMSURFfS0tY2xvbmVgO1xuY29uc3QgQ0xBU1NfQ09OVEFJTkVSID0gYCR7Q0xBU1NfU0xJREV9X19jb250YWluZXJgO1xuY29uc3QgQ0xBU1NfQVJST1dTID0gYCR7UFJPSkVDVF9DT0RFfV9fYXJyb3dzYDtcbmNvbnN0IENMQVNTX0FSUk9XID0gYCR7UFJPSkVDVF9DT0RFfV9fYXJyb3dgO1xuY29uc3QgQ0xBU1NfQVJST1dfUFJFViA9IGAke0NMQVNTX0FSUk9XfS0tcHJldmA7XG5jb25zdCBDTEFTU19BUlJPV19ORVhUID0gYCR7Q0xBU1NfQVJST1d9LS1uZXh0YDtcbmNvbnN0IENMQVNTX1BBR0lOQVRJT04gPSBgJHtQUk9KRUNUX0NPREV9X19wYWdpbmF0aW9uYDtcbmNvbnN0IENMQVNTX1BBR0lOQVRJT05fUEFHRSA9IGAke0NMQVNTX1BBR0lOQVRJT059X19wYWdlYDtcbmNvbnN0IENMQVNTX1BST0dSRVNTID0gYCR7UFJPSkVDVF9DT0RFfV9fcHJvZ3Jlc3NgO1xuY29uc3QgQ0xBU1NfUFJPR1JFU1NfQkFSID0gYCR7Q0xBU1NfUFJPR1JFU1N9X19iYXJgO1xuY29uc3QgQ0xBU1NfQVVUT1BMQVkgPSBgJHtQUk9KRUNUX0NPREV9X19hdXRvcGxheWA7XG5jb25zdCBDTEFTU19QTEFZID0gYCR7UFJPSkVDVF9DT0RFfV9fcGxheWA7XG5jb25zdCBDTEFTU19QQVVTRSA9IGAke1BST0pFQ1RfQ09ERX1fX3BhdXNlYDtcbmNvbnN0IENMQVNTX1NQSU5ORVIgPSBgJHtQUk9KRUNUX0NPREV9X19zcGlubmVyYDtcbmNvbnN0IENMQVNTX0lOSVRJQUxJWkVEID0gXCJpcy1pbml0aWFsaXplZFwiO1xuY29uc3QgQ0xBU1NfQUNUSVZFID0gXCJpcy1hY3RpdmVcIjtcbmNvbnN0IENMQVNTX1BSRVYgPSBcImlzLXByZXZcIjtcbmNvbnN0IENMQVNTX05FWFQgPSBcImlzLW5leHRcIjtcbmNvbnN0IENMQVNTX1ZJU0lCTEUgPSBcImlzLXZpc2libGVcIjtcbmNvbnN0IENMQVNTX0xPQURJTkcgPSBcImlzLWxvYWRpbmdcIjtcbmNvbnN0IFNUQVRVU19DTEFTU0VTID0gW0NMQVNTX0FDVElWRSwgQ0xBU1NfVklTSUJMRSwgQ0xBU1NfUFJFViwgQ0xBU1NfTkVYVCwgQ0xBU1NfTE9BRElOR107XG5jb25zdCBDTEFTU0VTID0ge1xuICBzbGlkZTogQ0xBU1NfU0xJREUsXG4gIGNsb25lOiBDTEFTU19DTE9ORSxcbiAgYXJyb3dzOiBDTEFTU19BUlJPV1MsXG4gIGFycm93OiBDTEFTU19BUlJPVyxcbiAgcHJldjogQ0xBU1NfQVJST1dfUFJFVixcbiAgbmV4dDogQ0xBU1NfQVJST1dfTkVYVCxcbiAgcGFnaW5hdGlvbjogQ0xBU1NfUEFHSU5BVElPTixcbiAgcGFnZTogQ0xBU1NfUEFHSU5BVElPTl9QQUdFLFxuICBzcGlubmVyOiBDTEFTU19TUElOTkVSXG59O1xuXG5mdW5jdGlvbiBFbGVtZW50cyhTcGxpZGUyLCBDb21wb25lbnRzMiwgb3B0aW9ucykge1xuICBjb25zdCB7IG9uIH0gPSBFdmVudEludGVyZmFjZShTcGxpZGUyKTtcbiAgY29uc3QgeyByb290IH0gPSBTcGxpZGUyO1xuICBjb25zdCBlbGVtZW50cyA9IHt9O1xuICBjb25zdCBzbGlkZXMgPSBbXTtcbiAgbGV0IGNsYXNzZXM7XG4gIGxldCBzbGlkZXI7XG4gIGxldCB0cmFjaztcbiAgbGV0IGxpc3Q7XG4gIGZ1bmN0aW9uIHNldHVwKCkge1xuICAgIGNvbGxlY3QoKTtcbiAgICBpZGVudGlmeSgpO1xuICAgIGFkZENsYXNzKHJvb3QsIGNsYXNzZXMgPSBnZXRDbGFzc2VzKCkpO1xuICB9XG4gIGZ1bmN0aW9uIG1vdW50KCkge1xuICAgIG9uKEVWRU5UX1JFRlJFU0gsIHJlZnJlc2gsIERFRkFVTFRfRVZFTlRfUFJJT1JJVFkgLSAyKTtcbiAgICBvbihFVkVOVF9VUERBVEVELCB1cGRhdGUpO1xuICB9XG4gIGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgW3Jvb3QsIHRyYWNrLCBsaXN0XS5mb3JFYWNoKChlbG0pID0+IHtcbiAgICAgIHJlbW92ZUF0dHJpYnV0ZShlbG0sIFwic3R5bGVcIik7XG4gICAgfSk7XG4gICAgZW1wdHkoc2xpZGVzKTtcbiAgICByZW1vdmVDbGFzcyhyb290LCBjbGFzc2VzKTtcbiAgfVxuICBmdW5jdGlvbiByZWZyZXNoKCkge1xuICAgIGRlc3Ryb3koKTtcbiAgICBzZXR1cCgpO1xuICB9XG4gIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICByZW1vdmVDbGFzcyhyb290LCBjbGFzc2VzKTtcbiAgICBhZGRDbGFzcyhyb290LCBjbGFzc2VzID0gZ2V0Q2xhc3NlcygpKTtcbiAgfVxuICBmdW5jdGlvbiBjb2xsZWN0KCkge1xuICAgIHNsaWRlciA9IGNoaWxkKHJvb3QsIGAuJHtDTEFTU19TTElERVJ9YCk7XG4gICAgdHJhY2sgPSBxdWVyeShyb290LCBgLiR7Q0xBU1NfVFJBQ0t9YCk7XG4gICAgbGlzdCA9IGNoaWxkKHRyYWNrLCBgLiR7Q0xBU1NfTElTVH1gKTtcbiAgICBhc3NlcnQodHJhY2sgJiYgbGlzdCwgXCJBIHRyYWNrL2xpc3QgZWxlbWVudCBpcyBtaXNzaW5nLlwiKTtcbiAgICBwdXNoKHNsaWRlcywgY2hpbGRyZW4obGlzdCwgYC4ke0NMQVNTX1NMSURFfTpub3QoLiR7Q0xBU1NfQ0xPTkV9KWApKTtcbiAgICBjb25zdCBhdXRvcGxheSA9IGZpbmQoYC4ke0NMQVNTX0FVVE9QTEFZfWApO1xuICAgIGNvbnN0IGFycm93cyA9IGZpbmQoYC4ke0NMQVNTX0FSUk9XU31gKTtcbiAgICBhc3NpZ24oZWxlbWVudHMsIHtcbiAgICAgIHJvb3QsXG4gICAgICBzbGlkZXIsXG4gICAgICB0cmFjayxcbiAgICAgIGxpc3QsXG4gICAgICBzbGlkZXMsXG4gICAgICBhcnJvd3MsXG4gICAgICBhdXRvcGxheSxcbiAgICAgIHByZXY6IHF1ZXJ5KGFycm93cywgYC4ke0NMQVNTX0FSUk9XX1BSRVZ9YCksXG4gICAgICBuZXh0OiBxdWVyeShhcnJvd3MsIGAuJHtDTEFTU19BUlJPV19ORVhUfWApLFxuICAgICAgYmFyOiBxdWVyeShmaW5kKGAuJHtDTEFTU19QUk9HUkVTU31gKSwgYC4ke0NMQVNTX1BST0dSRVNTX0JBUn1gKSxcbiAgICAgIHBsYXk6IHF1ZXJ5KGF1dG9wbGF5LCBgLiR7Q0xBU1NfUExBWX1gKSxcbiAgICAgIHBhdXNlOiBxdWVyeShhdXRvcGxheSwgYC4ke0NMQVNTX1BBVVNFfWApXG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gaWRlbnRpZnkoKSB7XG4gICAgY29uc3QgaWQgPSByb290LmlkIHx8IHVuaXF1ZUlkKFBST0pFQ1RfQ09ERSk7XG4gICAgcm9vdC5pZCA9IGlkO1xuICAgIHRyYWNrLmlkID0gdHJhY2suaWQgfHwgYCR7aWR9LXRyYWNrYDtcbiAgICBsaXN0LmlkID0gbGlzdC5pZCB8fCBgJHtpZH0tbGlzdGA7XG4gIH1cbiAgZnVuY3Rpb24gZmluZChzZWxlY3Rvcikge1xuICAgIHJldHVybiBjaGlsZChyb290LCBzZWxlY3RvcikgfHwgY2hpbGQoc2xpZGVyLCBzZWxlY3Rvcik7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0Q2xhc3NlcygpIHtcbiAgICByZXR1cm4gW1xuICAgICAgYCR7Q0xBU1NfUk9PVH0tLSR7b3B0aW9ucy50eXBlfWAsXG4gICAgICBgJHtDTEFTU19ST09UfS0tJHtvcHRpb25zLmRpcmVjdGlvbn1gLFxuICAgICAgb3B0aW9ucy5kcmFnICYmIGAke0NMQVNTX1JPT1R9LS1kcmFnZ2FibGVgLFxuICAgICAgb3B0aW9ucy5pc05hdmlnYXRpb24gJiYgYCR7Q0xBU1NfUk9PVH0tLW5hdmAsXG4gICAgICBDTEFTU19BQ1RJVkVcbiAgICBdO1xuICB9XG4gIHJldHVybiBhc3NpZ24oZWxlbWVudHMsIHtcbiAgICBzZXR1cCxcbiAgICBtb3VudCxcbiAgICBkZXN0cm95XG4gIH0pO1xufVxuXG5jb25zdCBST0xFID0gXCJyb2xlXCI7XG5jb25zdCBBUklBX0NPTlRST0xTID0gXCJhcmlhLWNvbnRyb2xzXCI7XG5jb25zdCBBUklBX0NVUlJFTlQgPSBcImFyaWEtY3VycmVudFwiO1xuY29uc3QgQVJJQV9MQUJFTCA9IFwiYXJpYS1sYWJlbFwiO1xuY29uc3QgQVJJQV9ISURERU4gPSBcImFyaWEtaGlkZGVuXCI7XG5jb25zdCBUQUJfSU5ERVggPSBcInRhYmluZGV4XCI7XG5jb25zdCBESVNBQkxFRCA9IFwiZGlzYWJsZWRcIjtcbmNvbnN0IEFSSUFfT1JJRU5UQVRJT04gPSBcImFyaWEtb3JpZW50YXRpb25cIjtcbmNvbnN0IEFMTF9BVFRSSUJVVEVTID0gW1xuICBST0xFLFxuICBBUklBX0NPTlRST0xTLFxuICBBUklBX0NVUlJFTlQsXG4gIEFSSUFfTEFCRUwsXG4gIEFSSUFfSElEREVOLFxuICBBUklBX09SSUVOVEFUSU9OLFxuICBUQUJfSU5ERVgsXG4gIERJU0FCTEVEXG5dO1xuXG5jb25zdCBTTElERSA9IFwic2xpZGVcIjtcbmNvbnN0IExPT1AgPSBcImxvb3BcIjtcbmNvbnN0IEZBREUgPSBcImZhZGVcIjtcblxuZnVuY3Rpb24gU2xpZGUkMShTcGxpZGUyLCBpbmRleCwgc2xpZGVJbmRleCwgc2xpZGUpIHtcbiAgY29uc3QgeyBvbiwgZW1pdCwgYmluZCwgZGVzdHJveTogZGVzdHJveUV2ZW50cyB9ID0gRXZlbnRJbnRlcmZhY2UoU3BsaWRlMik7XG4gIGNvbnN0IHsgQ29tcG9uZW50cywgcm9vdCwgb3B0aW9ucyB9ID0gU3BsaWRlMjtcbiAgY29uc3QgeyBpc05hdmlnYXRpb24sIHVwZGF0ZU9uTW92ZSB9ID0gb3B0aW9ucztcbiAgY29uc3QgeyByZXNvbHZlIH0gPSBDb21wb25lbnRzLkRpcmVjdGlvbjtcbiAgY29uc3Qgc3R5bGVzID0gZ2V0QXR0cmlidXRlKHNsaWRlLCBcInN0eWxlXCIpO1xuICBjb25zdCBpc0Nsb25lID0gc2xpZGVJbmRleCA+IC0xO1xuICBjb25zdCBjb250YWluZXIgPSBjaGlsZChzbGlkZSwgYC4ke0NMQVNTX0NPTlRBSU5FUn1gKTtcbiAgY29uc3QgZm9jdXNhYmxlTm9kZXMgPSBvcHRpb25zLmZvY3VzYWJsZU5vZGVzICYmIHF1ZXJ5QWxsKHNsaWRlLCBvcHRpb25zLmZvY3VzYWJsZU5vZGVzKTtcbiAgbGV0IGRlc3Ryb3llZDtcbiAgZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgaWYgKCFpc0Nsb25lKSB7XG4gICAgICBzbGlkZS5pZCA9IGAke3Jvb3QuaWR9LXNsaWRlJHtwYWQoaW5kZXggKyAxKX1gO1xuICAgIH1cbiAgICBiaW5kKHNsaWRlLCBcImNsaWNrIGtleWRvd25cIiwgKGUpID0+IHtcbiAgICAgIGVtaXQoZS50eXBlID09PSBcImNsaWNrXCIgPyBFVkVOVF9DTElDSyA6IEVWRU5UX1NMSURFX0tFWURPV04sIHNlbGYsIGUpO1xuICAgIH0pO1xuICAgIG9uKFtFVkVOVF9SRUZSRVNILCBFVkVOVF9SRVBPU0lUSU9ORUQsIEVWRU5UX1NISUZURUQsIEVWRU5UX01PVkVELCBFVkVOVF9TQ1JPTExFRF0sIHVwZGF0ZSk7XG4gICAgb24oRVZFTlRfTkFWSUdBVElPTl9NT1VOVEVELCBpbml0TmF2aWdhdGlvbik7XG4gICAgaWYgKHVwZGF0ZU9uTW92ZSkge1xuICAgICAgb24oRVZFTlRfTU9WRSwgb25Nb3ZlKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICBkZXN0cm95ZWQgPSB0cnVlO1xuICAgIGRlc3Ryb3lFdmVudHMoKTtcbiAgICByZW1vdmVDbGFzcyhzbGlkZSwgU1RBVFVTX0NMQVNTRVMpO1xuICAgIHJlbW92ZUF0dHJpYnV0ZShzbGlkZSwgQUxMX0FUVFJJQlVURVMpO1xuICAgIHNldEF0dHJpYnV0ZShzbGlkZSwgXCJzdHlsZVwiLCBzdHlsZXMpO1xuICB9XG4gIGZ1bmN0aW9uIGluaXROYXZpZ2F0aW9uKCkge1xuICAgIGNvbnN0IGlkeCA9IGlzQ2xvbmUgPyBzbGlkZUluZGV4IDogaW5kZXg7XG4gICAgY29uc3QgbGFiZWwgPSBmb3JtYXQob3B0aW9ucy5pMThuLnNsaWRlWCwgaWR4ICsgMSk7XG4gICAgY29uc3QgY29udHJvbHMgPSBTcGxpZGUyLnNwbGlkZXMubWFwKCh0YXJnZXQpID0+IHRhcmdldC5zcGxpZGUucm9vdC5pZCkuam9pbihcIiBcIik7XG4gICAgc2V0QXR0cmlidXRlKHNsaWRlLCBBUklBX0xBQkVMLCBsYWJlbCk7XG4gICAgc2V0QXR0cmlidXRlKHNsaWRlLCBBUklBX0NPTlRST0xTLCBjb250cm9scyk7XG4gICAgc2V0QXR0cmlidXRlKHNsaWRlLCBST0xFLCBcIm1lbnVpdGVtXCIpO1xuICAgIHVwZGF0ZUFjdGl2aXR5KGlzQWN0aXZlKCkpO1xuICB9XG4gIGZ1bmN0aW9uIG9uTW92ZSgpIHtcbiAgICBpZiAoIWRlc3Ryb3llZCkge1xuICAgICAgdXBkYXRlKCk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICBpZiAoIWRlc3Ryb3llZCkge1xuICAgICAgY29uc3QgeyBpbmRleDogY3VyckluZGV4IH0gPSBTcGxpZGUyO1xuICAgICAgdXBkYXRlQWN0aXZpdHkoaXNBY3RpdmUoKSk7XG4gICAgICB1cGRhdGVWaXNpYmlsaXR5KGlzVmlzaWJsZSgpKTtcbiAgICAgIHRvZ2dsZUNsYXNzKHNsaWRlLCBDTEFTU19QUkVWLCBpbmRleCA9PT0gY3VyckluZGV4IC0gMSk7XG4gICAgICB0b2dnbGVDbGFzcyhzbGlkZSwgQ0xBU1NfTkVYVCwgaW5kZXggPT09IGN1cnJJbmRleCArIDEpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiB1cGRhdGVBY3Rpdml0eShhY3RpdmUpIHtcbiAgICBpZiAoYWN0aXZlICE9PSBoYXNDbGFzcyhzbGlkZSwgQ0xBU1NfQUNUSVZFKSkge1xuICAgICAgdG9nZ2xlQ2xhc3Moc2xpZGUsIENMQVNTX0FDVElWRSwgYWN0aXZlKTtcbiAgICAgIGlmIChpc05hdmlnYXRpb24pIHtcbiAgICAgICAgc2V0QXR0cmlidXRlKHNsaWRlLCBBUklBX0NVUlJFTlQsIGFjdGl2ZSB8fCBudWxsKTtcbiAgICAgIH1cbiAgICAgIGVtaXQoYWN0aXZlID8gRVZFTlRfQUNUSVZFIDogRVZFTlRfSU5BQ1RJVkUsIHNlbGYpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiB1cGRhdGVWaXNpYmlsaXR5KHZpc2libGUpIHtcbiAgICBjb25zdCBhcmlhSGlkZGVuID0gIXZpc2libGUgJiYgIWlzQWN0aXZlKCk7XG4gICAgc2V0QXR0cmlidXRlKHNsaWRlLCBBUklBX0hJRERFTiwgYXJpYUhpZGRlbiB8fCBudWxsKTtcbiAgICBzZXRBdHRyaWJ1dGUoc2xpZGUsIFRBQl9JTkRFWCwgIWFyaWFIaWRkZW4gJiYgb3B0aW9ucy5zbGlkZUZvY3VzID8gMCA6IG51bGwpO1xuICAgIGlmIChmb2N1c2FibGVOb2Rlcykge1xuICAgICAgZm9jdXNhYmxlTm9kZXMuZm9yRWFjaCgobm9kZSkgPT4ge1xuICAgICAgICBzZXRBdHRyaWJ1dGUobm9kZSwgVEFCX0lOREVYLCBhcmlhSGlkZGVuID8gLTEgOiBudWxsKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAodmlzaWJsZSAhPT0gaGFzQ2xhc3Moc2xpZGUsIENMQVNTX1ZJU0lCTEUpKSB7XG4gICAgICB0b2dnbGVDbGFzcyhzbGlkZSwgQ0xBU1NfVklTSUJMRSwgdmlzaWJsZSk7XG4gICAgICBlbWl0KHZpc2libGUgPyBFVkVOVF9WSVNJQkxFIDogRVZFTlRfSElEREVOLCBzZWxmKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gc3R5bGUkMShwcm9wLCB2YWx1ZSwgdXNlQ29udGFpbmVyKSB7XG4gICAgc3R5bGUodXNlQ29udGFpbmVyICYmIGNvbnRhaW5lciB8fCBzbGlkZSwgcHJvcCwgdmFsdWUpO1xuICB9XG4gIGZ1bmN0aW9uIGlzQWN0aXZlKCkge1xuICAgIGNvbnN0IHsgaW5kZXg6IGN1cnIgfSA9IFNwbGlkZTI7XG4gICAgcmV0dXJuIGN1cnIgPT09IGluZGV4IHx8IG9wdGlvbnMuY2xvbmVTdGF0dXMgJiYgY3VyciA9PT0gc2xpZGVJbmRleDtcbiAgfVxuICBmdW5jdGlvbiBpc1Zpc2libGUoKSB7XG4gICAgaWYgKFNwbGlkZTIuaXMoRkFERSkpIHtcbiAgICAgIHJldHVybiBpc0FjdGl2ZSgpO1xuICAgIH1cbiAgICBjb25zdCB0cmFja1JlY3QgPSByZWN0KENvbXBvbmVudHMuRWxlbWVudHMudHJhY2spO1xuICAgIGNvbnN0IHNsaWRlUmVjdCA9IHJlY3Qoc2xpZGUpO1xuICAgIGNvbnN0IGxlZnQgPSByZXNvbHZlKFwibGVmdFwiKTtcbiAgICBjb25zdCByaWdodCA9IHJlc29sdmUoXCJyaWdodFwiKTtcbiAgICByZXR1cm4gZmxvb3IodHJhY2tSZWN0W2xlZnRdKSA8PSBjZWlsKHNsaWRlUmVjdFtsZWZ0XSkgJiYgZmxvb3Ioc2xpZGVSZWN0W3JpZ2h0XSkgPD0gY2VpbCh0cmFja1JlY3RbcmlnaHRdKTtcbiAgfVxuICBmdW5jdGlvbiBpc1dpdGhpbihmcm9tLCBkaXN0YW5jZSkge1xuICAgIGxldCBkaWZmID0gYWJzKGZyb20gLSBpbmRleCk7XG4gICAgaWYgKCFpc0Nsb25lICYmIChvcHRpb25zLnJld2luZCB8fCBTcGxpZGUyLmlzKExPT1ApKSkge1xuICAgICAgZGlmZiA9IG1pbihkaWZmLCBTcGxpZGUyLmxlbmd0aCAtIGRpZmYpO1xuICAgIH1cbiAgICByZXR1cm4gZGlmZiA8PSBkaXN0YW5jZTtcbiAgfVxuICBjb25zdCBzZWxmID0ge1xuICAgIGluZGV4LFxuICAgIHNsaWRlSW5kZXgsXG4gICAgc2xpZGUsXG4gICAgY29udGFpbmVyLFxuICAgIGlzQ2xvbmUsXG4gICAgbW91bnQsXG4gICAgZGVzdHJveSxcbiAgICB1cGRhdGUsXG4gICAgc3R5bGU6IHN0eWxlJDEsXG4gICAgaXNXaXRoaW5cbiAgfTtcbiAgcmV0dXJuIHNlbGY7XG59XG5cbmZ1bmN0aW9uIFNsaWRlcyhTcGxpZGUyLCBDb21wb25lbnRzMiwgb3B0aW9ucykge1xuICBjb25zdCB7IG9uLCBlbWl0LCBiaW5kIH0gPSBFdmVudEludGVyZmFjZShTcGxpZGUyKTtcbiAgY29uc3QgeyBzbGlkZXMsIGxpc3QgfSA9IENvbXBvbmVudHMyLkVsZW1lbnRzO1xuICBjb25zdCBTbGlkZXMyID0gW107XG4gIGZ1bmN0aW9uIG1vdW50KCkge1xuICAgIGluaXQoKTtcbiAgICBvbihFVkVOVF9SRUZSRVNILCByZWZyZXNoKTtcbiAgICBvbihbRVZFTlRfTU9VTlRFRCwgRVZFTlRfUkVGUkVTSF0sICgpID0+IHtcbiAgICAgIFNsaWRlczIuc29ydCgoU2xpZGUxLCBTbGlkZTIpID0+IFNsaWRlMS5pbmRleCAtIFNsaWRlMi5pbmRleCk7XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICBzbGlkZXMuZm9yRWFjaCgoc2xpZGUsIGluZGV4KSA9PiB7XG4gICAgICByZWdpc3RlcihzbGlkZSwgaW5kZXgsIC0xKTtcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIGZvckVhY2gkMSgoU2xpZGUyKSA9PiB7XG4gICAgICBTbGlkZTIuZGVzdHJveSgpO1xuICAgIH0pO1xuICAgIGVtcHR5KFNsaWRlczIpO1xuICB9XG4gIGZ1bmN0aW9uIHJlZnJlc2goKSB7XG4gICAgZGVzdHJveSgpO1xuICAgIGluaXQoKTtcbiAgfVxuICBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgZm9yRWFjaCQxKChTbGlkZTIpID0+IHtcbiAgICAgIFNsaWRlMi51cGRhdGUoKTtcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiByZWdpc3RlcihzbGlkZSwgaW5kZXgsIHNsaWRlSW5kZXgpIHtcbiAgICBjb25zdCBvYmplY3QgPSBTbGlkZSQxKFNwbGlkZTIsIGluZGV4LCBzbGlkZUluZGV4LCBzbGlkZSk7XG4gICAgb2JqZWN0Lm1vdW50KCk7XG4gICAgU2xpZGVzMi5wdXNoKG9iamVjdCk7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0KGV4Y2x1ZGVDbG9uZXMpIHtcbiAgICByZXR1cm4gZXhjbHVkZUNsb25lcyA/IGZpbHRlcigoU2xpZGUyKSA9PiAhU2xpZGUyLmlzQ2xvbmUpIDogU2xpZGVzMjtcbiAgfVxuICBmdW5jdGlvbiBnZXRJbihwYWdlKSB7XG4gICAgY29uc3QgeyBDb250cm9sbGVyIH0gPSBDb21wb25lbnRzMjtcbiAgICBjb25zdCBpbmRleCA9IENvbnRyb2xsZXIudG9JbmRleChwYWdlKTtcbiAgICBjb25zdCBtYXggPSBDb250cm9sbGVyLmhhc0ZvY3VzKCkgPyAxIDogb3B0aW9ucy5wZXJQYWdlO1xuICAgIHJldHVybiBmaWx0ZXIoKFNsaWRlMikgPT4gYmV0d2VlbihTbGlkZTIuaW5kZXgsIGluZGV4LCBpbmRleCArIG1heCAtIDEpKTtcbiAgfVxuICBmdW5jdGlvbiBnZXRBdChpbmRleCkge1xuICAgIHJldHVybiBmaWx0ZXIoaW5kZXgpWzBdO1xuICB9XG4gIGZ1bmN0aW9uIGFkZChpdGVtcywgaW5kZXgpIHtcbiAgICBmb3JFYWNoKGl0ZW1zLCAoc2xpZGUpID0+IHtcbiAgICAgIGlmIChpc1N0cmluZyhzbGlkZSkpIHtcbiAgICAgICAgc2xpZGUgPSBwYXJzZUh0bWwoc2xpZGUpO1xuICAgICAgfVxuICAgICAgaWYgKGlzSFRNTEVsZW1lbnQoc2xpZGUpKSB7XG4gICAgICAgIGNvbnN0IHJlZiA9IHNsaWRlc1tpbmRleF07XG4gICAgICAgIHJlZiA/IGJlZm9yZShzbGlkZSwgcmVmKSA6IGFwcGVuZChsaXN0LCBzbGlkZSk7XG4gICAgICAgIGFkZENsYXNzKHNsaWRlLCBvcHRpb25zLmNsYXNzZXMuc2xpZGUpO1xuICAgICAgICBvYnNlcnZlSW1hZ2VzKHNsaWRlLCBlbWl0LmJpbmQobnVsbCwgRVZFTlRfUkVTSVpFKSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgZW1pdChFVkVOVF9SRUZSRVNIKTtcbiAgfVxuICBmdW5jdGlvbiByZW1vdmUkMShtYXRjaGVyKSB7XG4gICAgcmVtb3ZlKGZpbHRlcihtYXRjaGVyKS5tYXAoKFNsaWRlMikgPT4gU2xpZGUyLnNsaWRlKSk7XG4gICAgZW1pdChFVkVOVF9SRUZSRVNIKTtcbiAgfVxuICBmdW5jdGlvbiBmb3JFYWNoJDEoaXRlcmF0ZWUsIGV4Y2x1ZGVDbG9uZXMpIHtcbiAgICBnZXQoZXhjbHVkZUNsb25lcykuZm9yRWFjaChpdGVyYXRlZSk7XG4gIH1cbiAgZnVuY3Rpb24gZmlsdGVyKG1hdGNoZXIpIHtcbiAgICByZXR1cm4gU2xpZGVzMi5maWx0ZXIoaXNGdW5jdGlvbihtYXRjaGVyKSA/IG1hdGNoZXIgOiAoU2xpZGUyKSA9PiBpc1N0cmluZyhtYXRjaGVyKSA/IG1hdGNoZXMoU2xpZGUyLnNsaWRlLCBtYXRjaGVyKSA6IGluY2x1ZGVzKHRvQXJyYXkobWF0Y2hlciksIFNsaWRlMi5pbmRleCkpO1xuICB9XG4gIGZ1bmN0aW9uIHN0eWxlKHByb3AsIHZhbHVlLCB1c2VDb250YWluZXIpIHtcbiAgICBmb3JFYWNoJDEoKFNsaWRlMikgPT4ge1xuICAgICAgU2xpZGUyLnN0eWxlKHByb3AsIHZhbHVlLCB1c2VDb250YWluZXIpO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIG9ic2VydmVJbWFnZXMoZWxtLCBjYWxsYmFjaykge1xuICAgIGNvbnN0IGltYWdlcyA9IHF1ZXJ5QWxsKGVsbSwgXCJpbWdcIik7XG4gICAgbGV0IHsgbGVuZ3RoIH0gPSBpbWFnZXM7XG4gICAgaWYgKGxlbmd0aCkge1xuICAgICAgaW1hZ2VzLmZvckVhY2goKGltZykgPT4ge1xuICAgICAgICBiaW5kKGltZywgXCJsb2FkIGVycm9yXCIsICgpID0+IHtcbiAgICAgICAgICBpZiAoIS0tbGVuZ3RoKSB7XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZ2V0TGVuZ3RoKGV4Y2x1ZGVDbG9uZXMpIHtcbiAgICByZXR1cm4gZXhjbHVkZUNsb25lcyA/IHNsaWRlcy5sZW5ndGggOiBTbGlkZXMyLmxlbmd0aDtcbiAgfVxuICBmdW5jdGlvbiBpc0Vub3VnaCgpIHtcbiAgICByZXR1cm4gU2xpZGVzMi5sZW5ndGggPiBvcHRpb25zLnBlclBhZ2U7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBtb3VudCxcbiAgICBkZXN0cm95LFxuICAgIHVwZGF0ZSxcbiAgICByZWdpc3RlcixcbiAgICBnZXQsXG4gICAgZ2V0SW4sXG4gICAgZ2V0QXQsXG4gICAgYWRkLFxuICAgIHJlbW92ZTogcmVtb3ZlJDEsXG4gICAgZm9yRWFjaDogZm9yRWFjaCQxLFxuICAgIGZpbHRlcixcbiAgICBzdHlsZSxcbiAgICBnZXRMZW5ndGgsXG4gICAgaXNFbm91Z2hcbiAgfTtcbn1cblxuZnVuY3Rpb24gTGF5b3V0KFNwbGlkZTIsIENvbXBvbmVudHMyLCBvcHRpb25zKSB7XG4gIGNvbnN0IHsgb24sIGJpbmQsIGVtaXQgfSA9IEV2ZW50SW50ZXJmYWNlKFNwbGlkZTIpO1xuICBjb25zdCB7IFNsaWRlcyB9ID0gQ29tcG9uZW50czI7XG4gIGNvbnN0IHsgcmVzb2x2ZSB9ID0gQ29tcG9uZW50czIuRGlyZWN0aW9uO1xuICBjb25zdCB7IHJvb3QsIHRyYWNrLCBsaXN0IH0gPSBDb21wb25lbnRzMi5FbGVtZW50cztcbiAgY29uc3QgeyBnZXRBdCB9ID0gU2xpZGVzO1xuICBsZXQgdmVydGljYWw7XG4gIGxldCByb290UmVjdDtcbiAgZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgaW5pdCgpO1xuICAgIGJpbmQod2luZG93LCBcInJlc2l6ZSBsb2FkXCIsIFRocm90dGxlKGVtaXQuYmluZCh0aGlzLCBFVkVOVF9SRVNJWkUpKSk7XG4gICAgb24oW0VWRU5UX1VQREFURUQsIEVWRU5UX1JFRlJFU0hdLCBpbml0KTtcbiAgICBvbihFVkVOVF9SRVNJWkUsIHJlc2l6ZSk7XG4gIH1cbiAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICByb290UmVjdCA9IG51bGw7XG4gICAgdmVydGljYWwgPSBvcHRpb25zLmRpcmVjdGlvbiA9PT0gVFRCO1xuICAgIHN0eWxlKHJvb3QsIFwibWF4V2lkdGhcIiwgdW5pdChvcHRpb25zLndpZHRoKSk7XG4gICAgc3R5bGUodHJhY2ssIHJlc29sdmUoXCJwYWRkaW5nTGVmdFwiKSwgY3NzUGFkZGluZyhmYWxzZSkpO1xuICAgIHN0eWxlKHRyYWNrLCByZXNvbHZlKFwicGFkZGluZ1JpZ2h0XCIpLCBjc3NQYWRkaW5nKHRydWUpKTtcbiAgICByZXNpemUoKTtcbiAgfVxuICBmdW5jdGlvbiByZXNpemUoKSB7XG4gICAgY29uc3QgbmV3UmVjdCA9IHJlY3Qocm9vdCk7XG4gICAgaWYgKCFyb290UmVjdCB8fCByb290UmVjdC53aWR0aCAhPT0gbmV3UmVjdC53aWR0aCB8fCByb290UmVjdC5oZWlnaHQgIT09IG5ld1JlY3QuaGVpZ2h0KSB7XG4gICAgICBzdHlsZSh0cmFjaywgXCJoZWlnaHRcIiwgY3NzVHJhY2tIZWlnaHQoKSk7XG4gICAgICBTbGlkZXMuc3R5bGUocmVzb2x2ZShcIm1hcmdpblJpZ2h0XCIpLCB1bml0KG9wdGlvbnMuZ2FwKSk7XG4gICAgICBTbGlkZXMuc3R5bGUoXCJ3aWR0aFwiLCBjc3NTbGlkZVdpZHRoKCkgfHwgbnVsbCk7XG4gICAgICBzZXRTbGlkZXNIZWlnaHQoKTtcbiAgICAgIHJvb3RSZWN0ID0gbmV3UmVjdDtcbiAgICAgIGVtaXQoRVZFTlRfUkVTSVpFRCk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHNldFNsaWRlc0hlaWdodCgpIHtcbiAgICBTbGlkZXMuc3R5bGUoXCJoZWlnaHRcIiwgY3NzU2xpZGVIZWlnaHQoKSB8fCBudWxsLCB0cnVlKTtcbiAgfVxuICBmdW5jdGlvbiBjc3NQYWRkaW5nKHJpZ2h0KSB7XG4gICAgY29uc3QgeyBwYWRkaW5nIH0gPSBvcHRpb25zO1xuICAgIGNvbnN0IHByb3AgPSByZXNvbHZlKHJpZ2h0ID8gXCJyaWdodFwiIDogXCJsZWZ0XCIpO1xuICAgIHJldHVybiBwYWRkaW5nICYmIHVuaXQocGFkZGluZ1twcm9wXSB8fCAoaXNPYmplY3QocGFkZGluZykgPyAwIDogcGFkZGluZykpIHx8IFwiMHB4XCI7XG4gIH1cbiAgZnVuY3Rpb24gY3NzVHJhY2tIZWlnaHQoKSB7XG4gICAgbGV0IGhlaWdodCA9IFwiXCI7XG4gICAgaWYgKHZlcnRpY2FsKSB7XG4gICAgICBoZWlnaHQgPSBjc3NIZWlnaHQoKTtcbiAgICAgIGFzc2VydChoZWlnaHQsIFwiaGVpZ2h0IG9yIGhlaWdodFJhdGlvIGlzIG1pc3NpbmcuXCIpO1xuICAgICAgaGVpZ2h0ID0gYGNhbGMoJHtoZWlnaHR9IC0gJHtjc3NQYWRkaW5nKGZhbHNlKX0gLSAke2Nzc1BhZGRpbmcodHJ1ZSl9KWA7XG4gICAgfVxuICAgIHJldHVybiBoZWlnaHQ7XG4gIH1cbiAgZnVuY3Rpb24gY3NzSGVpZ2h0KCkge1xuICAgIHJldHVybiB1bml0KG9wdGlvbnMuaGVpZ2h0IHx8IHJlY3QobGlzdCkud2lkdGggKiBvcHRpb25zLmhlaWdodFJhdGlvKTtcbiAgfVxuICBmdW5jdGlvbiBjc3NTbGlkZVdpZHRoKCkge1xuICAgIHJldHVybiBvcHRpb25zLmF1dG9XaWR0aCA/IFwiXCIgOiB1bml0KG9wdGlvbnMuZml4ZWRXaWR0aCkgfHwgKHZlcnRpY2FsID8gXCJcIiA6IGNzc1NsaWRlU2l6ZSgpKTtcbiAgfVxuICBmdW5jdGlvbiBjc3NTbGlkZUhlaWdodCgpIHtcbiAgICByZXR1cm4gdW5pdChvcHRpb25zLmZpeGVkSGVpZ2h0KSB8fCAodmVydGljYWwgPyBvcHRpb25zLmF1dG9IZWlnaHQgPyBcIlwiIDogY3NzU2xpZGVTaXplKCkgOiBjc3NIZWlnaHQoKSk7XG4gIH1cbiAgZnVuY3Rpb24gY3NzU2xpZGVTaXplKCkge1xuICAgIGNvbnN0IGdhcCA9IHVuaXQob3B0aW9ucy5nYXApO1xuICAgIHJldHVybiBgY2FsYygoMTAwJSR7Z2FwICYmIGAgKyAke2dhcH1gfSkvJHtvcHRpb25zLnBlclBhZ2UgfHwgMX0ke2dhcCAmJiBgIC0gJHtnYXB9YH0pYDtcbiAgfVxuICBmdW5jdGlvbiBsaXN0U2l6ZSgpIHtcbiAgICByZXR1cm4gcmVjdChsaXN0KVtyZXNvbHZlKFwid2lkdGhcIildO1xuICB9XG4gIGZ1bmN0aW9uIHNsaWRlU2l6ZShpbmRleCwgd2l0aG91dEdhcCkge1xuICAgIGNvbnN0IFNsaWRlID0gZ2V0QXQoaW5kZXggfHwgMCk7XG4gICAgcmV0dXJuIFNsaWRlID8gcmVjdChTbGlkZS5zbGlkZSlbcmVzb2x2ZShcIndpZHRoXCIpXSArICh3aXRob3V0R2FwID8gMCA6IGdldEdhcCgpKSA6IDA7XG4gIH1cbiAgZnVuY3Rpb24gdG90YWxTaXplKGluZGV4LCB3aXRob3V0R2FwKSB7XG4gICAgY29uc3QgU2xpZGUgPSBnZXRBdChpbmRleCk7XG4gICAgaWYgKFNsaWRlKSB7XG4gICAgICBjb25zdCByaWdodCA9IHJlY3QoU2xpZGUuc2xpZGUpW3Jlc29sdmUoXCJyaWdodFwiKV07XG4gICAgICBjb25zdCBsZWZ0ID0gcmVjdChsaXN0KVtyZXNvbHZlKFwibGVmdFwiKV07XG4gICAgICByZXR1cm4gYWJzKHJpZ2h0IC0gbGVmdCkgKyAod2l0aG91dEdhcCA/IDAgOiBnZXRHYXAoKSk7XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9XG4gIGZ1bmN0aW9uIHNsaWRlclNpemUoKSB7XG4gICAgcmV0dXJuIHRvdGFsU2l6ZShTcGxpZGUyLmxlbmd0aCAtIDEsIHRydWUpIC0gdG90YWxTaXplKC0xLCB0cnVlKTtcbiAgfVxuICBmdW5jdGlvbiBnZXRHYXAoKSB7XG4gICAgY29uc3QgU2xpZGUgPSBnZXRBdCgwKTtcbiAgICByZXR1cm4gU2xpZGUgJiYgcGFyc2VGbG9hdChzdHlsZShTbGlkZS5zbGlkZSwgcmVzb2x2ZShcIm1hcmdpblJpZ2h0XCIpKSkgfHwgMDtcbiAgfVxuICBmdW5jdGlvbiBnZXRQYWRkaW5nKHJpZ2h0KSB7XG4gICAgcmV0dXJuIHBhcnNlRmxvYXQoc3R5bGUodHJhY2ssIHJlc29sdmUoYHBhZGRpbmcke3JpZ2h0ID8gXCJSaWdodFwiIDogXCJMZWZ0XCJ9YCkpKSB8fCAwO1xuICB9XG4gIHJldHVybiB7XG4gICAgbW91bnQsXG4gICAgbGlzdFNpemUsXG4gICAgc2xpZGVTaXplLFxuICAgIHNsaWRlclNpemUsXG4gICAgdG90YWxTaXplLFxuICAgIGdldFBhZGRpbmdcbiAgfTtcbn1cblxuZnVuY3Rpb24gQ2xvbmVzKFNwbGlkZTIsIENvbXBvbmVudHMyLCBvcHRpb25zKSB7XG4gIGNvbnN0IHsgb24sIGVtaXQgfSA9IEV2ZW50SW50ZXJmYWNlKFNwbGlkZTIpO1xuICBjb25zdCB7IEVsZW1lbnRzLCBTbGlkZXMgfSA9IENvbXBvbmVudHMyO1xuICBjb25zdCB7IHJlc29sdmUgfSA9IENvbXBvbmVudHMyLkRpcmVjdGlvbjtcbiAgY29uc3QgY2xvbmVzID0gW107XG4gIGxldCBjbG9uZUNvdW50O1xuICBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICBpbml0KCk7XG4gICAgb24oRVZFTlRfUkVGUkVTSCwgcmVmcmVzaCk7XG4gICAgb24oW0VWRU5UX1VQREFURUQsIEVWRU5UX1JFU0laRV0sIG9ic2VydmUpO1xuICB9XG4gIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgaWYgKGNsb25lQ291bnQgPSBjb21wdXRlQ2xvbmVDb3VudCgpKSB7XG4gICAgICBnZW5lcmF0ZShjbG9uZUNvdW50KTtcbiAgICAgIGVtaXQoRVZFTlRfUkVTSVpFKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICByZW1vdmUoY2xvbmVzKTtcbiAgICBlbXB0eShjbG9uZXMpO1xuICB9XG4gIGZ1bmN0aW9uIHJlZnJlc2goKSB7XG4gICAgZGVzdHJveSgpO1xuICAgIGluaXQoKTtcbiAgfVxuICBmdW5jdGlvbiBvYnNlcnZlKCkge1xuICAgIGlmIChjbG9uZUNvdW50IDwgY29tcHV0ZUNsb25lQ291bnQoKSkge1xuICAgICAgZW1pdChFVkVOVF9SRUZSRVNIKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZ2VuZXJhdGUoY291bnQpIHtcbiAgICBjb25zdCBzbGlkZXMgPSBTbGlkZXMuZ2V0KCkuc2xpY2UoKTtcbiAgICBjb25zdCB7IGxlbmd0aCB9ID0gc2xpZGVzO1xuICAgIGlmIChsZW5ndGgpIHtcbiAgICAgIHdoaWxlIChzbGlkZXMubGVuZ3RoIDwgY291bnQpIHtcbiAgICAgICAgcHVzaChzbGlkZXMsIHNsaWRlcyk7XG4gICAgICB9XG4gICAgICBwdXNoKHNsaWRlcy5zbGljZSgtY291bnQpLCBzbGlkZXMuc2xpY2UoMCwgY291bnQpKS5mb3JFYWNoKChTbGlkZSwgaW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgaXNIZWFkID0gaW5kZXggPCBjb3VudDtcbiAgICAgICAgY29uc3QgY2xvbmUgPSBjbG9uZURlZXAoU2xpZGUuc2xpZGUsIGluZGV4KTtcbiAgICAgICAgaXNIZWFkID8gYmVmb3JlKGNsb25lLCBzbGlkZXNbMF0uc2xpZGUpIDogYXBwZW5kKEVsZW1lbnRzLmxpc3QsIGNsb25lKTtcbiAgICAgICAgcHVzaChjbG9uZXMsIGNsb25lKTtcbiAgICAgICAgU2xpZGVzLnJlZ2lzdGVyKGNsb25lLCBpbmRleCAtIGNvdW50ICsgKGlzSGVhZCA/IDAgOiBsZW5ndGgpLCBTbGlkZS5pbmRleCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gY2xvbmVEZWVwKGVsbSwgaW5kZXgpIHtcbiAgICBjb25zdCBjbG9uZSA9IGVsbS5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgYWRkQ2xhc3MoY2xvbmUsIG9wdGlvbnMuY2xhc3Nlcy5jbG9uZSk7XG4gICAgY2xvbmUuaWQgPSBgJHtTcGxpZGUyLnJvb3QuaWR9LWNsb25lJHtwYWQoaW5kZXggKyAxKX1gO1xuICAgIHJldHVybiBjbG9uZTtcbiAgfVxuICBmdW5jdGlvbiBjb21wdXRlQ2xvbmVDb3VudCgpIHtcbiAgICBsZXQgeyBjbG9uZXM6IGNsb25lczIgfSA9IG9wdGlvbnM7XG4gICAgaWYgKCFTcGxpZGUyLmlzKExPT1ApKSB7XG4gICAgICBjbG9uZXMyID0gMDtcbiAgICB9IGVsc2UgaWYgKCFjbG9uZXMyKSB7XG4gICAgICBjb25zdCBmaXhlZFNpemUgPSBtZWFzdXJlKEVsZW1lbnRzLmxpc3QsIG9wdGlvbnNbcmVzb2x2ZShcImZpeGVkV2lkdGhcIildKTtcbiAgICAgIGNvbnN0IGZpeGVkQ291bnQgPSBmaXhlZFNpemUgJiYgY2VpbChyZWN0KEVsZW1lbnRzLnRyYWNrKVtyZXNvbHZlKFwid2lkdGhcIildIC8gZml4ZWRTaXplKTtcbiAgICAgIGNvbnN0IGJhc2VDb3VudCA9IGZpeGVkQ291bnQgfHwgb3B0aW9uc1tyZXNvbHZlKFwiYXV0b1dpZHRoXCIpXSAmJiBTcGxpZGUyLmxlbmd0aCB8fCBvcHRpb25zLnBlclBhZ2U7XG4gICAgICBjbG9uZXMyID0gYmFzZUNvdW50ICogKG9wdGlvbnMuZHJhZyA/IChvcHRpb25zLmZsaWNrTWF4UGFnZXMgfHwgMSkgKyAxIDogMik7XG4gICAgfVxuICAgIHJldHVybiBjbG9uZXMyO1xuICB9XG4gIHJldHVybiB7XG4gICAgbW91bnQsXG4gICAgZGVzdHJveVxuICB9O1xufVxuXG5mdW5jdGlvbiBNb3ZlKFNwbGlkZTIsIENvbXBvbmVudHMyLCBvcHRpb25zKSB7XG4gIGNvbnN0IHsgb24sIGVtaXQgfSA9IEV2ZW50SW50ZXJmYWNlKFNwbGlkZTIpO1xuICBjb25zdCB7IHNsaWRlU2l6ZSwgZ2V0UGFkZGluZywgdG90YWxTaXplLCBsaXN0U2l6ZSwgc2xpZGVyU2l6ZSB9ID0gQ29tcG9uZW50czIuTGF5b3V0O1xuICBjb25zdCB7IHJlc29sdmUsIG9yaWVudCB9ID0gQ29tcG9uZW50czIuRGlyZWN0aW9uO1xuICBjb25zdCB7IGxpc3QsIHRyYWNrIH0gPSBDb21wb25lbnRzMi5FbGVtZW50cztcbiAgbGV0IFRyYW5zaXRpb247XG4gIGZ1bmN0aW9uIG1vdW50KCkge1xuICAgIFRyYW5zaXRpb24gPSBDb21wb25lbnRzMi5UcmFuc2l0aW9uO1xuICAgIG9uKFtFVkVOVF9NT1VOVEVELCBFVkVOVF9SRVNJWkVELCBFVkVOVF9VUERBVEVELCBFVkVOVF9SRUZSRVNIXSwgcmVwb3NpdGlvbik7XG4gIH1cbiAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICByZW1vdmVBdHRyaWJ1dGUobGlzdCwgXCJzdHlsZVwiKTtcbiAgfVxuICBmdW5jdGlvbiByZXBvc2l0aW9uKCkge1xuICAgIGlmICghaXNCdXN5KCkpIHtcbiAgICAgIENvbXBvbmVudHMyLlNjcm9sbC5jYW5jZWwoKTtcbiAgICAgIGp1bXAoU3BsaWRlMi5pbmRleCk7XG4gICAgICBlbWl0KEVWRU5UX1JFUE9TSVRJT05FRCk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIG1vdmUoZGVzdCwgaW5kZXgsIHByZXYsIGNhbGxiYWNrKSB7XG4gICAgaWYgKCFpc0J1c3koKSkge1xuICAgICAgY29uc3QgeyBzZXQgfSA9IFNwbGlkZTIuc3RhdGU7XG4gICAgICBjb25zdCBwb3NpdGlvbiA9IGdldFBvc2l0aW9uKCk7XG4gICAgICBpZiAoZGVzdCAhPT0gaW5kZXgpIHtcbiAgICAgICAgVHJhbnNpdGlvbi5jYW5jZWwoKTtcbiAgICAgICAgdHJhbnNsYXRlKHNoaWZ0KHBvc2l0aW9uLCBkZXN0ID4gaW5kZXgpLCB0cnVlKTtcbiAgICAgIH1cbiAgICAgIHNldChNT1ZJTkcpO1xuICAgICAgZW1pdChFVkVOVF9NT1ZFLCBpbmRleCwgcHJldiwgZGVzdCk7XG4gICAgICBUcmFuc2l0aW9uLnN0YXJ0KGluZGV4LCAoKSA9PiB7XG4gICAgICAgIHNldChJRExFKTtcbiAgICAgICAgZW1pdChFVkVOVF9NT1ZFRCwgaW5kZXgsIHByZXYsIGRlc3QpO1xuICAgICAgICBpZiAob3B0aW9ucy50cmltU3BhY2UgPT09IFwibW92ZVwiICYmIGRlc3QgIT09IHByZXYgJiYgcG9zaXRpb24gPT09IGdldFBvc2l0aW9uKCkpIHtcbiAgICAgICAgICBDb21wb25lbnRzMi5Db250cm9sbGVyLmdvKGRlc3QgPiBwcmV2ID8gXCI+XCIgOiBcIjxcIiwgZmFsc2UsIGNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24ganVtcChpbmRleCkge1xuICAgIHRyYW5zbGF0ZSh0b1Bvc2l0aW9uKGluZGV4LCB0cnVlKSk7XG4gIH1cbiAgZnVuY3Rpb24gdHJhbnNsYXRlKHBvc2l0aW9uLCBwcmV2ZW50TG9vcCkge1xuICAgIGlmICghU3BsaWRlMi5pcyhGQURFKSkge1xuICAgICAgY29uc3QgZGVzdGluYXRpb24gPSBwcmV2ZW50TG9vcCA/IHBvc2l0aW9uIDogbG9vcChwb3NpdGlvbik7XG4gICAgICBsaXN0LnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUke3Jlc29sdmUoXCJYXCIpfSgke2Rlc3RpbmF0aW9ufXB4KWA7XG4gICAgICBwb3NpdGlvbiAhPT0gZGVzdGluYXRpb24gJiYgZW1pdChFVkVOVF9TSElGVEVEKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gbG9vcChwb3NpdGlvbikge1xuICAgIGlmIChTcGxpZGUyLmlzKExPT1ApKSB7XG4gICAgICBjb25zdCBkaWZmID0gb3JpZW50KHBvc2l0aW9uIC0gZ2V0UG9zaXRpb24oKSk7XG4gICAgICBjb25zdCBleGNlZWRlZE1pbiA9IGV4Y2VlZGVkTGltaXQoZmFsc2UsIHBvc2l0aW9uKSAmJiBkaWZmIDwgMDtcbiAgICAgIGNvbnN0IGV4Y2VlZGVkTWF4ID0gZXhjZWVkZWRMaW1pdCh0cnVlLCBwb3NpdGlvbikgJiYgZGlmZiA+IDA7XG4gICAgICBpZiAoZXhjZWVkZWRNaW4gfHwgZXhjZWVkZWRNYXgpIHtcbiAgICAgICAgcG9zaXRpb24gPSBzaGlmdChwb3NpdGlvbiwgZXhjZWVkZWRNYXgpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcG9zaXRpb247XG4gIH1cbiAgZnVuY3Rpb24gc2hpZnQocG9zaXRpb24sIGJhY2t3YXJkcykge1xuICAgIGNvbnN0IGV4Y2VzcyA9IHBvc2l0aW9uIC0gZ2V0TGltaXQoYmFja3dhcmRzKTtcbiAgICBjb25zdCBzaXplID0gc2xpZGVyU2l6ZSgpO1xuICAgIHBvc2l0aW9uIC09IG9yaWVudChzaXplICogKGNlaWwoYWJzKGV4Y2VzcykgLyBzaXplKSB8fCAxKSkgKiAoYmFja3dhcmRzID8gMSA6IC0xKTtcbiAgICByZXR1cm4gcG9zaXRpb247XG4gIH1cbiAgZnVuY3Rpb24gY2FuY2VsKCkge1xuICAgIHRyYW5zbGF0ZShnZXRQb3NpdGlvbigpKTtcbiAgICBUcmFuc2l0aW9uLmNhbmNlbCgpO1xuICB9XG4gIGZ1bmN0aW9uIHRvSW5kZXgocG9zaXRpb24pIHtcbiAgICBjb25zdCBTbGlkZXMgPSBDb21wb25lbnRzMi5TbGlkZXMuZ2V0KCk7XG4gICAgbGV0IGluZGV4ID0gMDtcbiAgICBsZXQgbWluRGlzdGFuY2UgPSBJbmZpbml0eTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IFNsaWRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3Qgc2xpZGVJbmRleCA9IFNsaWRlc1tpXS5pbmRleDtcbiAgICAgIGNvbnN0IGRpc3RhbmNlID0gYWJzKHRvUG9zaXRpb24oc2xpZGVJbmRleCwgdHJ1ZSkgLSBwb3NpdGlvbik7XG4gICAgICBpZiAoZGlzdGFuY2UgPD0gbWluRGlzdGFuY2UpIHtcbiAgICAgICAgbWluRGlzdGFuY2UgPSBkaXN0YW5jZTtcbiAgICAgICAgaW5kZXggPSBzbGlkZUluZGV4O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuICBmdW5jdGlvbiB0b1Bvc2l0aW9uKGluZGV4LCB0cmltbWluZykge1xuICAgIGNvbnN0IHBvc2l0aW9uID0gb3JpZW50KHRvdGFsU2l6ZShpbmRleCAtIDEpIC0gb2Zmc2V0KGluZGV4KSk7XG4gICAgcmV0dXJuIHRyaW1taW5nID8gdHJpbShwb3NpdGlvbikgOiBwb3NpdGlvbjtcbiAgfVxuICBmdW5jdGlvbiBnZXRQb3NpdGlvbigpIHtcbiAgICBjb25zdCBsZWZ0ID0gcmVzb2x2ZShcImxlZnRcIik7XG4gICAgcmV0dXJuIHJlY3QobGlzdClbbGVmdF0gLSByZWN0KHRyYWNrKVtsZWZ0XSArIG9yaWVudChnZXRQYWRkaW5nKGZhbHNlKSk7XG4gIH1cbiAgZnVuY3Rpb24gdHJpbShwb3NpdGlvbikge1xuICAgIGlmIChvcHRpb25zLnRyaW1TcGFjZSAmJiBTcGxpZGUyLmlzKFNMSURFKSkge1xuICAgICAgcG9zaXRpb24gPSBjbGFtcChwb3NpdGlvbiwgMCwgb3JpZW50KHNsaWRlclNpemUoKSAtIGxpc3RTaXplKCkpKTtcbiAgICB9XG4gICAgcmV0dXJuIHBvc2l0aW9uO1xuICB9XG4gIGZ1bmN0aW9uIG9mZnNldChpbmRleCkge1xuICAgIGNvbnN0IHsgZm9jdXMgfSA9IG9wdGlvbnM7XG4gICAgcmV0dXJuIGZvY3VzID09PSBcImNlbnRlclwiID8gKGxpc3RTaXplKCkgLSBzbGlkZVNpemUoaW5kZXgsIHRydWUpKSAvIDIgOiArZm9jdXMgKiBzbGlkZVNpemUoaW5kZXgpIHx8IDA7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0TGltaXQobWF4KSB7XG4gICAgcmV0dXJuIHRvUG9zaXRpb24obWF4ID8gQ29tcG9uZW50czIuQ29udHJvbGxlci5nZXRFbmQoKSA6IDAsICEhb3B0aW9ucy50cmltU3BhY2UpO1xuICB9XG4gIGZ1bmN0aW9uIGlzQnVzeSgpIHtcbiAgICByZXR1cm4gU3BsaWRlMi5zdGF0ZS5pcyhNT1ZJTkcpICYmIG9wdGlvbnMud2FpdEZvclRyYW5zaXRpb247XG4gIH1cbiAgZnVuY3Rpb24gZXhjZWVkZWRMaW1pdChtYXgsIHBvc2l0aW9uKSB7XG4gICAgcG9zaXRpb24gPSBpc1VuZGVmaW5lZChwb3NpdGlvbikgPyBnZXRQb3NpdGlvbigpIDogcG9zaXRpb247XG4gICAgY29uc3QgZXhjZWVkZWRNaW4gPSBtYXggIT09IHRydWUgJiYgb3JpZW50KHBvc2l0aW9uKSA8IG9yaWVudChnZXRMaW1pdChmYWxzZSkpO1xuICAgIGNvbnN0IGV4Y2VlZGVkTWF4ID0gbWF4ICE9PSBmYWxzZSAmJiBvcmllbnQocG9zaXRpb24pID4gb3JpZW50KGdldExpbWl0KHRydWUpKTtcbiAgICByZXR1cm4gZXhjZWVkZWRNaW4gfHwgZXhjZWVkZWRNYXg7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBtb3VudCxcbiAgICBkZXN0cm95LFxuICAgIG1vdmUsXG4gICAganVtcCxcbiAgICB0cmFuc2xhdGUsXG4gICAgc2hpZnQsXG4gICAgY2FuY2VsLFxuICAgIHRvSW5kZXgsXG4gICAgdG9Qb3NpdGlvbixcbiAgICBnZXRQb3NpdGlvbixcbiAgICBnZXRMaW1pdCxcbiAgICBpc0J1c3ksXG4gICAgZXhjZWVkZWRMaW1pdFxuICB9O1xufVxuXG5mdW5jdGlvbiBDb250cm9sbGVyKFNwbGlkZTIsIENvbXBvbmVudHMyLCBvcHRpb25zKSB7XG4gIGNvbnN0IHsgb24gfSA9IEV2ZW50SW50ZXJmYWNlKFNwbGlkZTIpO1xuICBjb25zdCB7IE1vdmUgfSA9IENvbXBvbmVudHMyO1xuICBjb25zdCB7IGdldFBvc2l0aW9uLCBnZXRMaW1pdCB9ID0gTW92ZTtcbiAgY29uc3QgeyBpc0Vub3VnaCwgZ2V0TGVuZ3RoIH0gPSBDb21wb25lbnRzMi5TbGlkZXM7XG4gIGNvbnN0IGlzTG9vcCA9IFNwbGlkZTIuaXMoTE9PUCk7XG4gIGNvbnN0IGlzU2xpZGUgPSBTcGxpZGUyLmlzKFNMSURFKTtcbiAgbGV0IGN1cnJJbmRleCA9IG9wdGlvbnMuc3RhcnQgfHwgMDtcbiAgbGV0IHByZXZJbmRleCA9IGN1cnJJbmRleDtcbiAgbGV0IHNsaWRlQ291bnQ7XG4gIGxldCBwZXJNb3ZlO1xuICBsZXQgcGVyUGFnZTtcbiAgZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgaW5pdCgpO1xuICAgIG9uKFtFVkVOVF9VUERBVEVELCBFVkVOVF9SRUZSRVNIXSwgaW5pdCwgREVGQVVMVF9FVkVOVF9QUklPUklUWSAtIDEpO1xuICB9XG4gIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgc2xpZGVDb3VudCA9IGdldExlbmd0aCh0cnVlKTtcbiAgICBwZXJNb3ZlID0gb3B0aW9ucy5wZXJNb3ZlO1xuICAgIHBlclBhZ2UgPSBvcHRpb25zLnBlclBhZ2U7XG4gICAgY3VyckluZGV4ID0gY2xhbXAoY3VyckluZGV4LCAwLCBzbGlkZUNvdW50IC0gMSk7XG4gIH1cbiAgZnVuY3Rpb24gZ28oY29udHJvbCwgYWxsb3dTYW1lSW5kZXgsIGNhbGxiYWNrKSB7XG4gICAgY29uc3QgZGVzdCA9IHBhcnNlKGNvbnRyb2wpO1xuICAgIGlmIChvcHRpb25zLnVzZVNjcm9sbCkge1xuICAgICAgc2Nyb2xsKGRlc3QsIHRydWUsIHRydWUsIG9wdGlvbnMuc3BlZWQsIGNhbGxiYWNrKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgaW5kZXggPSBsb29wKGRlc3QpO1xuICAgICAgaWYgKGluZGV4ID4gLTEgJiYgIU1vdmUuaXNCdXN5KCkgJiYgKGFsbG93U2FtZUluZGV4IHx8IGluZGV4ICE9PSBjdXJySW5kZXgpKSB7XG4gICAgICAgIHNldEluZGV4KGluZGV4KTtcbiAgICAgICAgTW92ZS5tb3ZlKGRlc3QsIGluZGV4LCBwcmV2SW5kZXgsIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gc2Nyb2xsKGRlc3RpbmF0aW9uLCB1c2VJbmRleCwgc25hcCwgZHVyYXRpb24sIGNhbGxiYWNrKSB7XG4gICAgY29uc3QgZGVzdCA9IHVzZUluZGV4ID8gZGVzdGluYXRpb24gOiB0b0Rlc3QoZGVzdGluYXRpb24pO1xuICAgIENvbXBvbmVudHMyLlNjcm9sbC5zY3JvbGwodXNlSW5kZXggfHwgc25hcCA/IE1vdmUudG9Qb3NpdGlvbihkZXN0LCB0cnVlKSA6IGRlc3RpbmF0aW9uLCBkdXJhdGlvbiwgKCkgPT4ge1xuICAgICAgc2V0SW5kZXgoTW92ZS50b0luZGV4KE1vdmUuZ2V0UG9zaXRpb24oKSkpO1xuICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soKTtcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBwYXJzZShjb250cm9sKSB7XG4gICAgbGV0IGluZGV4ID0gY3VyckluZGV4O1xuICAgIGlmIChpc1N0cmluZyhjb250cm9sKSkge1xuICAgICAgY29uc3QgWywgaW5kaWNhdG9yLCBudW1iZXJdID0gY29udHJvbC5tYXRjaCgvKFsrXFwtPD5dKShcXGQrKT8vKSB8fCBbXTtcbiAgICAgIGlmIChpbmRpY2F0b3IgPT09IFwiK1wiIHx8IGluZGljYXRvciA9PT0gXCItXCIpIHtcbiAgICAgICAgaW5kZXggPSBjb21wdXRlRGVzdEluZGV4KGN1cnJJbmRleCArICtgJHtpbmRpY2F0b3J9JHsrbnVtYmVyIHx8IDF9YCwgY3VyckluZGV4LCB0cnVlKTtcbiAgICAgIH0gZWxzZSBpZiAoaW5kaWNhdG9yID09PSBcIj5cIikge1xuICAgICAgICBpbmRleCA9IG51bWJlciA/IHRvSW5kZXgoK251bWJlcikgOiBnZXROZXh0KHRydWUpO1xuICAgICAgfSBlbHNlIGlmIChpbmRpY2F0b3IgPT09IFwiPFwiKSB7XG4gICAgICAgIGluZGV4ID0gZ2V0UHJldih0cnVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaW5kZXggPSBpc0xvb3AgPyBjb250cm9sIDogY2xhbXAoY29udHJvbCwgMCwgZ2V0RW5kKCkpO1xuICAgIH1cbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0TmV4dChkZXN0aW5hdGlvbikge1xuICAgIHJldHVybiBnZXRBZGphY2VudChmYWxzZSwgZGVzdGluYXRpb24pO1xuICB9XG4gIGZ1bmN0aW9uIGdldFByZXYoZGVzdGluYXRpb24pIHtcbiAgICByZXR1cm4gZ2V0QWRqYWNlbnQodHJ1ZSwgZGVzdGluYXRpb24pO1xuICB9XG4gIGZ1bmN0aW9uIGdldEFkamFjZW50KHByZXYsIGRlc3RpbmF0aW9uKSB7XG4gICAgY29uc3QgbnVtYmVyID0gcGVyTW92ZSB8fCAoaGFzRm9jdXMoKSA/IDEgOiBwZXJQYWdlKTtcbiAgICBjb25zdCBkZXN0ID0gY29tcHV0ZURlc3RJbmRleChjdXJySW5kZXggKyBudW1iZXIgKiAocHJldiA/IC0xIDogMSksIGN1cnJJbmRleCk7XG4gICAgaWYgKGRlc3QgPT09IC0xICYmIGlzU2xpZGUpIHtcbiAgICAgIGlmICghYXBwcm94aW1hdGVseUVxdWFsKGdldFBvc2l0aW9uKCksIGdldExpbWl0KCFwcmV2KSwgMSkpIHtcbiAgICAgICAgcmV0dXJuIHByZXYgPyAwIDogZ2V0RW5kKCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkZXN0aW5hdGlvbiA/IGRlc3QgOiBsb29wKGRlc3QpO1xuICB9XG4gIGZ1bmN0aW9uIGNvbXB1dGVEZXN0SW5kZXgoZGVzdCwgZnJvbSwgaW5jcmVtZW50YWwpIHtcbiAgICBpZiAoaXNFbm91Z2goKSkge1xuICAgICAgY29uc3QgZW5kID0gZ2V0RW5kKCk7XG4gICAgICBpZiAoZGVzdCA8IDAgfHwgZGVzdCA+IGVuZCkge1xuICAgICAgICBpZiAoYmV0d2VlbigwLCBkZXN0LCBmcm9tLCB0cnVlKSB8fCBiZXR3ZWVuKGVuZCwgZnJvbSwgZGVzdCwgdHJ1ZSkpIHtcbiAgICAgICAgICBkZXN0ID0gdG9JbmRleCh0b1BhZ2UoZGVzdCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChpc0xvb3ApIHtcbiAgICAgICAgICAgIGRlc3QgPSBwZXJNb3ZlIHx8IGhhc0ZvY3VzKCkgPyBkZXN0IDogZGVzdCA8IDAgPyAtKHNsaWRlQ291bnQgJSBwZXJQYWdlIHx8IHBlclBhZ2UpIDogc2xpZGVDb3VudDtcbiAgICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMucmV3aW5kKSB7XG4gICAgICAgICAgICBkZXN0ID0gZGVzdCA8IDAgPyBlbmQgOiAwO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkZXN0ID0gLTE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIWluY3JlbWVudGFsICYmIGRlc3QgIT09IGZyb20pIHtcbiAgICAgICAgICBkZXN0ID0gcGVyTW92ZSA/IGRlc3QgOiB0b0luZGV4KHRvUGFnZShmcm9tKSArIChkZXN0IDwgZnJvbSA/IC0xIDogMSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlc3QgPSAtMTtcbiAgICB9XG4gICAgcmV0dXJuIGRlc3Q7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0RW5kKCkge1xuICAgIGxldCBlbmQgPSBzbGlkZUNvdW50IC0gcGVyUGFnZTtcbiAgICBpZiAoaGFzRm9jdXMoKSB8fCBpc0xvb3AgJiYgcGVyTW92ZSkge1xuICAgICAgZW5kID0gc2xpZGVDb3VudCAtIDE7XG4gICAgfVxuICAgIHJldHVybiBtYXgoZW5kLCAwKTtcbiAgfVxuICBmdW5jdGlvbiBsb29wKGluZGV4KSB7XG4gICAgaWYgKGlzTG9vcCkge1xuICAgICAgcmV0dXJuIGlzRW5vdWdoKCkgPyBpbmRleCAlIHNsaWRlQ291bnQgKyAoaW5kZXggPCAwID8gc2xpZGVDb3VudCA6IDApIDogLTE7XG4gICAgfVxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuICBmdW5jdGlvbiB0b0luZGV4KHBhZ2UpIHtcbiAgICByZXR1cm4gY2xhbXAoaGFzRm9jdXMoKSA/IHBhZ2UgOiBwZXJQYWdlICogcGFnZSwgMCwgZ2V0RW5kKCkpO1xuICB9XG4gIGZ1bmN0aW9uIHRvUGFnZShpbmRleCkge1xuICAgIGlmICghaGFzRm9jdXMoKSkge1xuICAgICAgaW5kZXggPSBiZXR3ZWVuKGluZGV4LCBzbGlkZUNvdW50IC0gcGVyUGFnZSwgc2xpZGVDb3VudCAtIDEpID8gc2xpZGVDb3VudCAtIDEgOiBpbmRleDtcbiAgICAgIGluZGV4ID0gZmxvb3IoaW5kZXggLyBwZXJQYWdlKTtcbiAgICB9XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG4gIGZ1bmN0aW9uIHRvRGVzdChkZXN0aW5hdGlvbikge1xuICAgIGNvbnN0IGNsb3Nlc3QgPSBNb3ZlLnRvSW5kZXgoZGVzdGluYXRpb24pO1xuICAgIHJldHVybiBpc1NsaWRlID8gY2xhbXAoY2xvc2VzdCwgMCwgZ2V0RW5kKCkpIDogY2xvc2VzdDtcbiAgfVxuICBmdW5jdGlvbiBzZXRJbmRleChpbmRleCkge1xuICAgIGlmIChpbmRleCAhPT0gY3VyckluZGV4KSB7XG4gICAgICBwcmV2SW5kZXggPSBjdXJySW5kZXg7XG4gICAgICBjdXJySW5kZXggPSBpbmRleDtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZ2V0SW5kZXgocHJldikge1xuICAgIHJldHVybiBwcmV2ID8gcHJldkluZGV4IDogY3VyckluZGV4O1xuICB9XG4gIGZ1bmN0aW9uIGhhc0ZvY3VzKCkge1xuICAgIHJldHVybiAhaXNVbmRlZmluZWQob3B0aW9ucy5mb2N1cykgfHwgb3B0aW9ucy5pc05hdmlnYXRpb247XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBtb3VudCxcbiAgICBnbyxcbiAgICBzY3JvbGwsXG4gICAgZ2V0TmV4dCxcbiAgICBnZXRQcmV2LFxuICAgIGdldEFkamFjZW50LFxuICAgIGdldEVuZCxcbiAgICBzZXRJbmRleCxcbiAgICBnZXRJbmRleCxcbiAgICB0b0luZGV4LFxuICAgIHRvUGFnZSxcbiAgICB0b0Rlc3QsXG4gICAgaGFzRm9jdXNcbiAgfTtcbn1cblxuY29uc3QgWE1MX05BTUVfU1BBQ0UgPSBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7XG5jb25zdCBQQVRIID0gXCJtMTUuNSAwLjkzMi00LjMgNC4zOCAxNC41IDE0LjYtMTQuNSAxNC41IDQuMyA0LjQgMTQuNi0xNC42IDQuNC00LjMtNC40LTQuNC0xNC42LTE0LjZ6XCI7XG5jb25zdCBTSVpFID0gNDA7XG5cbmZ1bmN0aW9uIEFycm93cyhTcGxpZGUyLCBDb21wb25lbnRzMiwgb3B0aW9ucykge1xuICBjb25zdCB7IG9uLCBiaW5kLCBlbWl0IH0gPSBFdmVudEludGVyZmFjZShTcGxpZGUyKTtcbiAgY29uc3QgeyBjbGFzc2VzLCBpMThuIH0gPSBvcHRpb25zO1xuICBjb25zdCB7IEVsZW1lbnRzLCBDb250cm9sbGVyIH0gPSBDb21wb25lbnRzMjtcbiAgbGV0IHdyYXBwZXIgPSBFbGVtZW50cy5hcnJvd3M7XG4gIGxldCBwcmV2ID0gRWxlbWVudHMucHJldjtcbiAgbGV0IG5leHQgPSBFbGVtZW50cy5uZXh0O1xuICBsZXQgY3JlYXRlZDtcbiAgY29uc3QgYXJyb3dzID0ge307XG4gIGZ1bmN0aW9uIG1vdW50KCkge1xuICAgIGluaXQoKTtcbiAgICBvbihFVkVOVF9VUERBVEVELCBpbml0KTtcbiAgfVxuICBmdW5jdGlvbiBpbml0KCkge1xuICAgIGlmIChvcHRpb25zLmFycm93cykge1xuICAgICAgaWYgKCFwcmV2IHx8ICFuZXh0KSB7XG4gICAgICAgIGNyZWF0ZUFycm93cygpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocHJldiAmJiBuZXh0KSB7XG4gICAgICBpZiAoIWFycm93cy5wcmV2KSB7XG4gICAgICAgIGNvbnN0IHsgaWQgfSA9IEVsZW1lbnRzLnRyYWNrO1xuICAgICAgICBzZXRBdHRyaWJ1dGUocHJldiwgQVJJQV9DT05UUk9MUywgaWQpO1xuICAgICAgICBzZXRBdHRyaWJ1dGUobmV4dCwgQVJJQV9DT05UUk9MUywgaWQpO1xuICAgICAgICBhcnJvd3MucHJldiA9IHByZXY7XG4gICAgICAgIGFycm93cy5uZXh0ID0gbmV4dDtcbiAgICAgICAgbGlzdGVuKCk7XG4gICAgICAgIGVtaXQoRVZFTlRfQVJST1dTX01PVU5URUQsIHByZXYsIG5leHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGlzcGxheSh3cmFwcGVyLCBvcHRpb25zLmFycm93cyA9PT0gZmFsc2UgPyBcIm5vbmVcIiA6IFwiXCIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIGlmIChjcmVhdGVkKSB7XG4gICAgICByZW1vdmUod3JhcHBlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZUF0dHJpYnV0ZShwcmV2LCBBTExfQVRUUklCVVRFUyk7XG4gICAgICByZW1vdmVBdHRyaWJ1dGUobmV4dCwgQUxMX0FUVFJJQlVURVMpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBsaXN0ZW4oKSB7XG4gICAgY29uc3QgeyBnbyB9ID0gQ29udHJvbGxlcjtcbiAgICBvbihbRVZFTlRfTU9VTlRFRCwgRVZFTlRfTU9WRUQsIEVWRU5UX1VQREFURUQsIEVWRU5UX1JFRlJFU0gsIEVWRU5UX1NDUk9MTEVEXSwgdXBkYXRlKTtcbiAgICBiaW5kKG5leHQsIFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgZ28oXCI+XCIsIHRydWUpO1xuICAgIH0pO1xuICAgIGJpbmQocHJldiwgXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICBnbyhcIjxcIiwgdHJ1ZSk7XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gY3JlYXRlQXJyb3dzKCkge1xuICAgIHdyYXBwZXIgPSBjcmVhdGUoXCJkaXZcIiwgY2xhc3Nlcy5hcnJvd3MpO1xuICAgIHByZXYgPSBjcmVhdGVBcnJvdyh0cnVlKTtcbiAgICBuZXh0ID0gY3JlYXRlQXJyb3coZmFsc2UpO1xuICAgIGNyZWF0ZWQgPSB0cnVlO1xuICAgIGFwcGVuZCh3cmFwcGVyLCBbcHJldiwgbmV4dF0pO1xuICAgIGJlZm9yZSh3cmFwcGVyLCBjaGlsZChvcHRpb25zLmFycm93cyA9PT0gXCJzbGlkZXJcIiAmJiBFbGVtZW50cy5zbGlkZXIgfHwgU3BsaWRlMi5yb290KSk7XG4gIH1cbiAgZnVuY3Rpb24gY3JlYXRlQXJyb3cocHJldjIpIHtcbiAgICBjb25zdCBhcnJvdyA9IGA8YnV0dG9uIGNsYXNzPVwiJHtjbGFzc2VzLmFycm93fSAke3ByZXYyID8gY2xhc3Nlcy5wcmV2IDogY2xhc3Nlcy5uZXh0fVwiIHR5cGU9XCJidXR0b25cIj48c3ZnIHhtbG5zPVwiJHtYTUxfTkFNRV9TUEFDRX1cIiB2aWV3Qm94PVwiMCAwICR7U0laRX0gJHtTSVpFfVwiIHdpZHRoPVwiJHtTSVpFfVwiIGhlaWdodD1cIiR7U0laRX1cIj48cGF0aCBkPVwiJHtvcHRpb25zLmFycm93UGF0aCB8fCBQQVRIfVwiIC8+YDtcbiAgICByZXR1cm4gcGFyc2VIdG1sKGFycm93KTtcbiAgfVxuICBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgY29uc3QgaW5kZXggPSBTcGxpZGUyLmluZGV4O1xuICAgIGNvbnN0IHByZXZJbmRleCA9IENvbnRyb2xsZXIuZ2V0UHJldigpO1xuICAgIGNvbnN0IG5leHRJbmRleCA9IENvbnRyb2xsZXIuZ2V0TmV4dCgpO1xuICAgIGNvbnN0IHByZXZMYWJlbCA9IHByZXZJbmRleCA+IC0xICYmIGluZGV4IDwgcHJldkluZGV4ID8gaTE4bi5sYXN0IDogaTE4bi5wcmV2O1xuICAgIGNvbnN0IG5leHRMYWJlbCA9IG5leHRJbmRleCA+IC0xICYmIGluZGV4ID4gbmV4dEluZGV4ID8gaTE4bi5maXJzdCA6IGkxOG4ubmV4dDtcbiAgICBwcmV2LmRpc2FibGVkID0gcHJldkluZGV4IDwgMDtcbiAgICBuZXh0LmRpc2FibGVkID0gbmV4dEluZGV4IDwgMDtcbiAgICBzZXRBdHRyaWJ1dGUocHJldiwgQVJJQV9MQUJFTCwgcHJldkxhYmVsKTtcbiAgICBzZXRBdHRyaWJ1dGUobmV4dCwgQVJJQV9MQUJFTCwgbmV4dExhYmVsKTtcbiAgICBlbWl0KEVWRU5UX0FSUk9XU19VUERBVEVELCBwcmV2LCBuZXh0LCBwcmV2SW5kZXgsIG5leHRJbmRleCk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBhcnJvd3MsXG4gICAgbW91bnQsXG4gICAgZGVzdHJveVxuICB9O1xufVxuXG5jb25zdCBJTlRFUlZBTF9EQVRBX0FUVFJJQlVURSA9IGAke0RBVEFfQVRUUklCVVRFfS1pbnRlcnZhbGA7XG5cbmZ1bmN0aW9uIEF1dG9wbGF5KFNwbGlkZTIsIENvbXBvbmVudHMyLCBvcHRpb25zKSB7XG4gIGNvbnN0IHsgb24sIGJpbmQsIGVtaXQgfSA9IEV2ZW50SW50ZXJmYWNlKFNwbGlkZTIpO1xuICBjb25zdCBpbnRlcnZhbCA9IFJlcXVlc3RJbnRlcnZhbChvcHRpb25zLmludGVydmFsLCBTcGxpZGUyLmdvLmJpbmQoU3BsaWRlMiwgXCI+XCIpLCB1cGRhdGUpO1xuICBjb25zdCB7IGlzUGF1c2VkIH0gPSBpbnRlcnZhbDtcbiAgY29uc3QgeyBFbGVtZW50cyB9ID0gQ29tcG9uZW50czI7XG4gIGxldCBob3ZlcmVkO1xuICBsZXQgZm9jdXNlZDtcbiAgbGV0IHBhdXNlZDtcbiAgZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgY29uc3QgeyBhdXRvcGxheSB9ID0gb3B0aW9ucztcbiAgICBpZiAoYXV0b3BsYXkpIHtcbiAgICAgIGluaXRCdXR0b24odHJ1ZSk7XG4gICAgICBpbml0QnV0dG9uKGZhbHNlKTtcbiAgICAgIGxpc3RlbigpO1xuICAgICAgaWYgKGF1dG9wbGF5ICE9PSBcInBhdXNlXCIpIHtcbiAgICAgICAgcGxheSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBpbml0QnV0dG9uKGZvclBhdXNlKSB7XG4gICAgY29uc3QgcHJvcCA9IGZvclBhdXNlID8gXCJwYXVzZVwiIDogXCJwbGF5XCI7XG4gICAgY29uc3QgYnV0dG9uID0gRWxlbWVudHNbcHJvcF07XG4gICAgaWYgKGJ1dHRvbikge1xuICAgICAgc2V0QXR0cmlidXRlKGJ1dHRvbiwgQVJJQV9DT05UUk9MUywgRWxlbWVudHMudHJhY2suaWQpO1xuICAgICAgc2V0QXR0cmlidXRlKGJ1dHRvbiwgQVJJQV9MQUJFTCwgb3B0aW9ucy5pMThuW3Byb3BdKTtcbiAgICAgIGJpbmQoYnV0dG9uLCBcImNsaWNrXCIsIGZvclBhdXNlID8gcGF1c2UgOiBwbGF5KTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gbGlzdGVuKCkge1xuICAgIGNvbnN0IHsgcm9vdCB9ID0gRWxlbWVudHM7XG4gICAgaWYgKG9wdGlvbnMucGF1c2VPbkhvdmVyKSB7XG4gICAgICBiaW5kKHJvb3QsIFwibW91c2VlbnRlciBtb3VzZWxlYXZlXCIsIChlKSA9PiB7XG4gICAgICAgIGhvdmVyZWQgPSBlLnR5cGUgPT09IFwibW91c2VlbnRlclwiO1xuICAgICAgICBhdXRvVG9nZ2xlKCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMucGF1c2VPbkZvY3VzKSB7XG4gICAgICBiaW5kKHJvb3QsIFwiZm9jdXNpbiBmb2N1c291dFwiLCAoZSkgPT4ge1xuICAgICAgICBmb2N1c2VkID0gZS50eXBlID09PSBcImZvY3VzaW5cIjtcbiAgICAgICAgYXV0b1RvZ2dsZSgpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIG9uKFtFVkVOVF9NT1ZFLCBFVkVOVF9TQ1JPTEwsIEVWRU5UX1JFRlJFU0hdLCBpbnRlcnZhbC5yZXdpbmQpO1xuICAgIG9uKEVWRU5UX01PVkUsIHVwZGF0ZUludGVydmFsKTtcbiAgfVxuICBmdW5jdGlvbiBwbGF5KCkge1xuICAgIGlmIChpc1BhdXNlZCgpICYmIENvbXBvbmVudHMyLlNsaWRlcy5pc0Vub3VnaCgpKSB7XG4gICAgICBpbnRlcnZhbC5zdGFydCghb3B0aW9ucy5yZXNldFByb2dyZXNzKTtcbiAgICAgIGZvY3VzZWQgPSBob3ZlcmVkID0gcGF1c2VkID0gZmFsc2U7XG4gICAgICBlbWl0KEVWRU5UX0FVVE9QTEFZX1BMQVkpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBwYXVzZShtYW51YWwgPSB0cnVlKSB7XG4gICAgaWYgKCFpc1BhdXNlZCgpKSB7XG4gICAgICBpbnRlcnZhbC5wYXVzZSgpO1xuICAgICAgZW1pdChFVkVOVF9BVVRPUExBWV9QQVVTRSk7XG4gICAgfVxuICAgIHBhdXNlZCA9IG1hbnVhbDtcbiAgfVxuICBmdW5jdGlvbiBhdXRvVG9nZ2xlKCkge1xuICAgIGlmICghcGF1c2VkKSB7XG4gICAgICBpZiAoIWhvdmVyZWQgJiYgIWZvY3VzZWQpIHtcbiAgICAgICAgcGxheSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGF1c2UoZmFsc2UpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBmdW5jdGlvbiB1cGRhdGUocmF0ZSkge1xuICAgIGNvbnN0IHsgYmFyIH0gPSBFbGVtZW50cztcbiAgICBiYXIgJiYgc3R5bGUoYmFyLCBcIndpZHRoXCIsIGAke3JhdGUgKiAxMDB9JWApO1xuICAgIGVtaXQoRVZFTlRfQVVUT1BMQVlfUExBWUlORywgcmF0ZSk7XG4gIH1cbiAgZnVuY3Rpb24gdXBkYXRlSW50ZXJ2YWwoKSB7XG4gICAgY29uc3QgU2xpZGUgPSBDb21wb25lbnRzMi5TbGlkZXMuZ2V0QXQoU3BsaWRlMi5pbmRleCk7XG4gICAgaW50ZXJ2YWwuc2V0KFNsaWRlICYmICtnZXRBdHRyaWJ1dGUoU2xpZGUuc2xpZGUsIElOVEVSVkFMX0RBVEFfQVRUUklCVVRFKSB8fCBvcHRpb25zLmludGVydmFsKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIG1vdW50LFxuICAgIGRlc3Ryb3k6IGludGVydmFsLmNhbmNlbCxcbiAgICBwbGF5LFxuICAgIHBhdXNlLFxuICAgIGlzUGF1c2VkXG4gIH07XG59XG5cbmZ1bmN0aW9uIENvdmVyKFNwbGlkZTIsIENvbXBvbmVudHMyLCBvcHRpb25zKSB7XG4gIGNvbnN0IHsgb24gfSA9IEV2ZW50SW50ZXJmYWNlKFNwbGlkZTIpO1xuICBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICBpZiAob3B0aW9ucy5jb3Zlcikge1xuICAgICAgb24oRVZFTlRfTEFaWUxPQURfTE9BREVELCAoaW1nLCBTbGlkZSkgPT4ge1xuICAgICAgICB0b2dnbGUodHJ1ZSwgaW1nLCBTbGlkZSk7XG4gICAgICB9KTtcbiAgICAgIG9uKFtFVkVOVF9NT1VOVEVELCBFVkVOVF9VUERBVEVELCBFVkVOVF9SRUZSRVNIXSwgYXBwbHkuYmluZChudWxsLCB0cnVlKSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgYXBwbHkoZmFsc2UpO1xuICB9XG4gIGZ1bmN0aW9uIGFwcGx5KGNvdmVyKSB7XG4gICAgQ29tcG9uZW50czIuU2xpZGVzLmZvckVhY2goKFNsaWRlKSA9PiB7XG4gICAgICBjb25zdCBpbWcgPSBjaGlsZChTbGlkZS5jb250YWluZXIgfHwgU2xpZGUuc2xpZGUsIFwiaW1nXCIpO1xuICAgICAgaWYgKGltZyAmJiBpbWcuc3JjKSB7XG4gICAgICAgIHRvZ2dsZShjb3ZlciwgaW1nLCBTbGlkZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gdG9nZ2xlKGNvdmVyLCBpbWcsIFNsaWRlKSB7XG4gICAgU2xpZGUuc3R5bGUoXCJiYWNrZ3JvdW5kXCIsIGNvdmVyID8gYGNlbnRlci9jb3ZlciBuby1yZXBlYXQgdXJsKFwiJHtpbWcuc3JjfVwiKWAgOiBcIlwiLCB0cnVlKTtcbiAgICBkaXNwbGF5KGltZywgY292ZXIgPyBcIm5vbmVcIiA6IFwiXCIpO1xuICB9XG4gIHJldHVybiB7XG4gICAgbW91bnQsXG4gICAgZGVzdHJveVxuICB9O1xufVxuXG5jb25zdCBCT1VOQ0VfRElGRl9USFJFU0hPTEQgPSAxMDtcbmNvbnN0IEJPVU5DRV9EVVJBVElPTiA9IDYwMDtcbmNvbnN0IEZSSUNUSU9OX0ZBQ1RPUiA9IDAuNjtcbmNvbnN0IEJBU0VfVkVMT0NJVFkgPSAxLjU7XG5jb25zdCBNSU5fRFVSQVRJT04gPSA4MDA7XG5cbmZ1bmN0aW9uIFNjcm9sbChTcGxpZGUyLCBDb21wb25lbnRzMiwgb3B0aW9ucykge1xuICBjb25zdCB7IG9uLCBlbWl0IH0gPSBFdmVudEludGVyZmFjZShTcGxpZGUyKTtcbiAgY29uc3QgeyBNb3ZlIH0gPSBDb21wb25lbnRzMjtcbiAgY29uc3QgeyBnZXRQb3NpdGlvbiwgZ2V0TGltaXQsIGV4Y2VlZGVkTGltaXQgfSA9IE1vdmU7XG4gIGxldCBpbnRlcnZhbDtcbiAgbGV0IHNjcm9sbENhbGxiYWNrO1xuICBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICBvbihFVkVOVF9NT1ZFLCBjbGVhcik7XG4gICAgb24oW0VWRU5UX1VQREFURUQsIEVWRU5UX1JFRlJFU0hdLCBjYW5jZWwpO1xuICB9XG4gIGZ1bmN0aW9uIHNjcm9sbChkZXN0aW5hdGlvbiwgZHVyYXRpb24sIGNhbGxiYWNrLCBzdXBwcmVzc0NvbnN0cmFpbnQpIHtcbiAgICBjb25zdCBzdGFydCA9IGdldFBvc2l0aW9uKCk7XG4gICAgbGV0IGZyaWN0aW9uID0gMTtcbiAgICBkdXJhdGlvbiA9IGR1cmF0aW9uIHx8IGNvbXB1dGVEdXJhdGlvbihhYnMoZGVzdGluYXRpb24gLSBzdGFydCkpO1xuICAgIHNjcm9sbENhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgY2xlYXIoKTtcbiAgICBpbnRlcnZhbCA9IFJlcXVlc3RJbnRlcnZhbChkdXJhdGlvbiwgb25TY3JvbGxlZCwgKHJhdGUpID0+IHtcbiAgICAgIGNvbnN0IHBvc2l0aW9uID0gZ2V0UG9zaXRpb24oKTtcbiAgICAgIGNvbnN0IHRhcmdldCA9IHN0YXJ0ICsgKGRlc3RpbmF0aW9uIC0gc3RhcnQpICogZWFzaW5nKHJhdGUpO1xuICAgICAgY29uc3QgZGlmZiA9ICh0YXJnZXQgLSBnZXRQb3NpdGlvbigpKSAqIGZyaWN0aW9uO1xuICAgICAgTW92ZS50cmFuc2xhdGUocG9zaXRpb24gKyBkaWZmKTtcbiAgICAgIGlmIChTcGxpZGUyLmlzKFNMSURFKSAmJiAhc3VwcHJlc3NDb25zdHJhaW50ICYmIGV4Y2VlZGVkTGltaXQoKSkge1xuICAgICAgICBmcmljdGlvbiAqPSBGUklDVElPTl9GQUNUT1I7XG4gICAgICAgIGlmIChhYnMoZGlmZikgPCBCT1VOQ0VfRElGRl9USFJFU0hPTEQpIHtcbiAgICAgICAgICBib3VuY2UoZXhjZWVkZWRMaW1pdChmYWxzZSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgMSk7XG4gICAgZW1pdChFVkVOVF9TQ1JPTEwpO1xuICAgIGludGVydmFsLnN0YXJ0KCk7XG4gIH1cbiAgZnVuY3Rpb24gYm91bmNlKGJhY2t3YXJkcykge1xuICAgIHNjcm9sbChnZXRMaW1pdCghYmFja3dhcmRzKSwgQk9VTkNFX0RVUkFUSU9OLCBudWxsLCB0cnVlKTtcbiAgfVxuICBmdW5jdGlvbiBvblNjcm9sbGVkKCkge1xuICAgIGNvbnN0IHBvc2l0aW9uID0gZ2V0UG9zaXRpb24oKTtcbiAgICBjb25zdCBpbmRleCA9IE1vdmUudG9JbmRleChwb3NpdGlvbik7XG4gICAgaWYgKCFiZXR3ZWVuKGluZGV4LCAwLCBTcGxpZGUyLmxlbmd0aCAtIDEpKSB7XG4gICAgICBNb3ZlLnRyYW5zbGF0ZShNb3ZlLnNoaWZ0KHBvc2l0aW9uLCBpbmRleCA+IDApLCB0cnVlKTtcbiAgICB9XG4gICAgc2Nyb2xsQ2FsbGJhY2sgJiYgc2Nyb2xsQ2FsbGJhY2soKTtcbiAgICBlbWl0KEVWRU5UX1NDUk9MTEVEKTtcbiAgfVxuICBmdW5jdGlvbiBjb21wdXRlRHVyYXRpb24oZGlzdGFuY2UpIHtcbiAgICByZXR1cm4gbWF4KGRpc3RhbmNlIC8gQkFTRV9WRUxPQ0lUWSwgTUlOX0RVUkFUSU9OKTtcbiAgfVxuICBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICBpZiAoaW50ZXJ2YWwpIHtcbiAgICAgIGludGVydmFsLmNhbmNlbCgpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBjYW5jZWwoKSB7XG4gICAgaWYgKGludGVydmFsICYmICFpbnRlcnZhbC5pc1BhdXNlZCgpKSB7XG4gICAgICBjbGVhcigpO1xuICAgICAgb25TY3JvbGxlZCgpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBlYXNpbmcodCkge1xuICAgIGNvbnN0IHsgZWFzaW5nRnVuYyB9ID0gb3B0aW9ucztcbiAgICByZXR1cm4gZWFzaW5nRnVuYyA/IGVhc2luZ0Z1bmModCkgOiAxIC0gTWF0aC5wb3coMSAtIHQsIDQpO1xuICB9XG4gIHJldHVybiB7XG4gICAgbW91bnQsXG4gICAgZGVzdHJveTogY2xlYXIsXG4gICAgc2Nyb2xsLFxuICAgIGNhbmNlbFxuICB9O1xufVxuXG5jb25zdCBTQ1JPTExfTElTVEVORVJfT1BUSU9OUyA9IHsgcGFzc2l2ZTogZmFsc2UsIGNhcHR1cmU6IHRydWUgfTtcblxuY29uc3QgRlJJQ1RJT04gPSA1O1xuY29uc3QgTE9HX0lOVEVSVkFMID0gMjAwO1xuY29uc3QgUE9JTlRFUl9ET1dOX0VWRU5UUyA9IFwidG91Y2hzdGFydCBtb3VzZWRvd25cIjtcbmNvbnN0IFBPSU5URVJfTU9WRV9FVkVOVFMgPSBcInRvdWNobW92ZSBtb3VzZW1vdmVcIjtcbmNvbnN0IFBPSU5URVJfVVBfRVZFTlRTID0gXCJ0b3VjaGVuZCB0b3VjaGNhbmNlbCBtb3VzZXVwXCI7XG5cbmZ1bmN0aW9uIERyYWcoU3BsaWRlMiwgQ29tcG9uZW50czIsIG9wdGlvbnMpIHtcbiAgY29uc3QgeyBvbiwgZW1pdCwgYmluZCwgdW5iaW5kIH0gPSBFdmVudEludGVyZmFjZShTcGxpZGUyKTtcbiAgY29uc3QgeyBNb3ZlLCBTY3JvbGwsIENvbnRyb2xsZXIgfSA9IENvbXBvbmVudHMyO1xuICBjb25zdCB7IHRyYWNrIH0gPSBDb21wb25lbnRzMi5FbGVtZW50cztcbiAgY29uc3QgeyByZXNvbHZlLCBvcmllbnQgfSA9IENvbXBvbmVudHMyLkRpcmVjdGlvbjtcbiAgY29uc3QgeyBnZXRQb3NpdGlvbiwgZXhjZWVkZWRMaW1pdCB9ID0gTW92ZTtcbiAgbGV0IGJhc2VQb3NpdGlvbjtcbiAgbGV0IGJhc2VFdmVudDtcbiAgbGV0IHByZXZCYXNlRXZlbnQ7XG4gIGxldCBsYXN0RXZlbnQ7XG4gIGxldCBpc0ZyZWU7XG4gIGxldCBkcmFnZ2luZztcbiAgbGV0IGhhc0V4Y2VlZGVkID0gZmFsc2U7XG4gIGxldCBjbGlja1ByZXZlbnRlZDtcbiAgbGV0IGRpc2FibGVkO1xuICBsZXQgdGFyZ2V0O1xuICBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICBiaW5kKHRyYWNrLCBQT0lOVEVSX01PVkVfRVZFTlRTLCBub29wLCBTQ1JPTExfTElTVEVORVJfT1BUSU9OUyk7XG4gICAgYmluZCh0cmFjaywgUE9JTlRFUl9VUF9FVkVOVFMsIG5vb3AsIFNDUk9MTF9MSVNURU5FUl9PUFRJT05TKTtcbiAgICBiaW5kKHRyYWNrLCBQT0lOVEVSX0RPV05fRVZFTlRTLCBvblBvaW50ZXJEb3duLCBTQ1JPTExfTElTVEVORVJfT1BUSU9OUyk7XG4gICAgYmluZCh0cmFjaywgXCJjbGlja1wiLCBvbkNsaWNrLCB7IGNhcHR1cmU6IHRydWUgfSk7XG4gICAgYmluZCh0cmFjaywgXCJkcmFnc3RhcnRcIiwgcHJldmVudCk7XG4gICAgb24oW0VWRU5UX01PVU5URUQsIEVWRU5UX1VQREFURURdLCBpbml0KTtcbiAgfVxuICBmdW5jdGlvbiBpbml0KCkge1xuICAgIGNvbnN0IHsgZHJhZyB9ID0gb3B0aW9ucztcbiAgICBkaXNhYmxlKCFkcmFnKTtcbiAgICBpc0ZyZWUgPSBkcmFnID09PSBcImZyZWVcIjtcbiAgfVxuICBmdW5jdGlvbiBvblBvaW50ZXJEb3duKGUpIHtcbiAgICBpZiAoIWRpc2FibGVkKSB7XG4gICAgICBjb25zdCB7IG5vRHJhZyB9ID0gb3B0aW9ucztcbiAgICAgIGNvbnN0IGlzVG91Y2ggPSBpc1RvdWNoRXZlbnQoZSk7XG4gICAgICBjb25zdCBpc0RyYWdnYWJsZSA9ICFub0RyYWcgfHwgIW1hdGNoZXMoZS50YXJnZXQsIG5vRHJhZyk7XG4gICAgICBpZiAoaXNEcmFnZ2FibGUgJiYgKGlzVG91Y2ggfHwgIWUuYnV0dG9uKSkge1xuICAgICAgICBpZiAoIU1vdmUuaXNCdXN5KCkpIHtcbiAgICAgICAgICB0YXJnZXQgPSBpc1RvdWNoID8gdHJhY2sgOiB3aW5kb3c7XG4gICAgICAgICAgcHJldkJhc2VFdmVudCA9IG51bGw7XG4gICAgICAgICAgbGFzdEV2ZW50ID0gbnVsbDtcbiAgICAgICAgICBjbGlja1ByZXZlbnRlZCA9IGZhbHNlO1xuICAgICAgICAgIGJpbmQodGFyZ2V0LCBQT0lOVEVSX01PVkVfRVZFTlRTLCBvblBvaW50ZXJNb3ZlLCBTQ1JPTExfTElTVEVORVJfT1BUSU9OUyk7XG4gICAgICAgICAgYmluZCh0YXJnZXQsIFBPSU5URVJfVVBfRVZFTlRTLCBvblBvaW50ZXJVcCwgU0NST0xMX0xJU1RFTkVSX09QVElPTlMpO1xuICAgICAgICAgIE1vdmUuY2FuY2VsKCk7XG4gICAgICAgICAgU2Nyb2xsLmNhbmNlbCgpO1xuICAgICAgICAgIHNhdmUoZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJldmVudChlLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBvblBvaW50ZXJNb3ZlKGUpIHtcbiAgICBpZiAoIWxhc3RFdmVudCkge1xuICAgICAgZW1pdChFVkVOVF9EUkFHKTtcbiAgICB9XG4gICAgbGFzdEV2ZW50ID0gZTtcbiAgICBpZiAoZS5jYW5jZWxhYmxlKSB7XG4gICAgICBjb25zdCBkaWZmID0gY29vcmRPZihlKSAtIGNvb3JkT2YoYmFzZUV2ZW50KTtcbiAgICAgIGlmIChkcmFnZ2luZykge1xuICAgICAgICBNb3ZlLnRyYW5zbGF0ZShiYXNlUG9zaXRpb24gKyBjb25zdHJhaW4oZGlmZikpO1xuICAgICAgICBjb25zdCBleHBpcmVkID0gdGltZU9mKGUpIC0gdGltZU9mKGJhc2VFdmVudCkgPiBMT0dfSU5URVJWQUw7XG4gICAgICAgIGNvbnN0IGV4Y2VlZGVkID0gaGFzRXhjZWVkZWQgIT09IChoYXNFeGNlZWRlZCA9IGV4Y2VlZGVkTGltaXQoKSk7XG4gICAgICAgIGlmIChleHBpcmVkIHx8IGV4Y2VlZGVkKSB7XG4gICAgICAgICAgc2F2ZShlKTtcbiAgICAgICAgfVxuICAgICAgICBlbWl0KEVWRU5UX0RSQUdHSU5HKTtcbiAgICAgICAgY2xpY2tQcmV2ZW50ZWQgPSB0cnVlO1xuICAgICAgICBwcmV2ZW50KGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHsgZHJhZ01pblRocmVzaG9sZDogdGhyZXNob2xkcyB9ID0gb3B0aW9ucztcbiAgICAgICAgdGhyZXNob2xkcyA9IGlzT2JqZWN0KHRocmVzaG9sZHMpID8gdGhyZXNob2xkcyA6IHsgbW91c2U6IDAsIHRvdWNoOiArdGhyZXNob2xkcyB8fCAxMCB9O1xuICAgICAgICBkcmFnZ2luZyA9IGFicyhkaWZmKSA+IChpc1RvdWNoRXZlbnQoZSkgPyB0aHJlc2hvbGRzLnRvdWNoIDogdGhyZXNob2xkcy5tb3VzZSk7XG4gICAgICAgIGlmIChpc1NsaWRlckRpcmVjdGlvbigpKSB7XG4gICAgICAgICAgcHJldmVudChlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBvblBvaW50ZXJVcChlKSB7XG4gICAgdW5iaW5kKHRhcmdldCwgUE9JTlRFUl9NT1ZFX0VWRU5UUywgb25Qb2ludGVyTW92ZSk7XG4gICAgdW5iaW5kKHRhcmdldCwgUE9JTlRFUl9VUF9FVkVOVFMsIG9uUG9pbnRlclVwKTtcbiAgICBjb25zdCB7IGluZGV4IH0gPSBTcGxpZGUyO1xuICAgIGlmIChsYXN0RXZlbnQpIHtcbiAgICAgIGlmIChkcmFnZ2luZyB8fCBlLmNhbmNlbGFibGUgJiYgaXNTbGlkZXJEaXJlY3Rpb24oKSkge1xuICAgICAgICBjb25zdCB2ZWxvY2l0eSA9IGNvbXB1dGVWZWxvY2l0eShlKTtcbiAgICAgICAgY29uc3QgZGVzdGluYXRpb24gPSBjb21wdXRlRGVzdGluYXRpb24odmVsb2NpdHkpO1xuICAgICAgICBpZiAoaXNGcmVlKSB7XG4gICAgICAgICAgQ29udHJvbGxlci5zY3JvbGwoZGVzdGluYXRpb24pO1xuICAgICAgICB9IGVsc2UgaWYgKFNwbGlkZTIuaXMoRkFERSkpIHtcbiAgICAgICAgICBDb250cm9sbGVyLmdvKGluZGV4ICsgb3JpZW50KHNpZ24odmVsb2NpdHkpKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgQ29udHJvbGxlci5nbyhDb250cm9sbGVyLnRvRGVzdChkZXN0aW5hdGlvbiksIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIHByZXZlbnQoZSk7XG4gICAgICB9XG4gICAgICBlbWl0KEVWRU5UX0RSQUdHRUQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIWlzRnJlZSAmJiBnZXRQb3NpdGlvbigpICE9PSBNb3ZlLnRvUG9zaXRpb24oaW5kZXgpKSB7XG4gICAgICAgIENvbnRyb2xsZXIuZ28oaW5kZXgsIHRydWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBkcmFnZ2luZyA9IGZhbHNlO1xuICB9XG4gIGZ1bmN0aW9uIHNhdmUoZSkge1xuICAgIHByZXZCYXNlRXZlbnQgPSBiYXNlRXZlbnQ7XG4gICAgYmFzZUV2ZW50ID0gZTtcbiAgICBiYXNlUG9zaXRpb24gPSBnZXRQb3NpdGlvbigpO1xuICB9XG4gIGZ1bmN0aW9uIG9uQ2xpY2soZSkge1xuICAgIGlmICghZGlzYWJsZWQgJiYgY2xpY2tQcmV2ZW50ZWQpIHtcbiAgICAgIHByZXZlbnQoZSwgdHJ1ZSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGlzU2xpZGVyRGlyZWN0aW9uKCkge1xuICAgIGNvbnN0IGRpZmZYID0gYWJzKGNvb3JkT2YobGFzdEV2ZW50KSAtIGNvb3JkT2YoYmFzZUV2ZW50KSk7XG4gICAgY29uc3QgZGlmZlkgPSBhYnMoY29vcmRPZihsYXN0RXZlbnQsIHRydWUpIC0gY29vcmRPZihiYXNlRXZlbnQsIHRydWUpKTtcbiAgICByZXR1cm4gZGlmZlggPiBkaWZmWTtcbiAgfVxuICBmdW5jdGlvbiBjb21wdXRlVmVsb2NpdHkoZSkge1xuICAgIGlmIChTcGxpZGUyLmlzKExPT1ApIHx8ICFoYXNFeGNlZWRlZCkge1xuICAgICAgY29uc3QgYmFzZSA9IGJhc2VFdmVudCA9PT0gbGFzdEV2ZW50ICYmIHByZXZCYXNlRXZlbnQgfHwgYmFzZUV2ZW50O1xuICAgICAgY29uc3QgZGlmZkNvb3JkID0gY29vcmRPZihsYXN0RXZlbnQpIC0gY29vcmRPZihiYXNlKTtcbiAgICAgIGNvbnN0IGRpZmZUaW1lID0gdGltZU9mKGUpIC0gdGltZU9mKGJhc2UpO1xuICAgICAgY29uc3QgaXNGbGljayA9IHRpbWVPZihlKSAtIHRpbWVPZihsYXN0RXZlbnQpIDwgTE9HX0lOVEVSVkFMO1xuICAgICAgaWYgKGRpZmZUaW1lICYmIGlzRmxpY2spIHtcbiAgICAgICAgcmV0dXJuIGRpZmZDb29yZCAvIGRpZmZUaW1lO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfVxuICBmdW5jdGlvbiBjb21wdXRlRGVzdGluYXRpb24odmVsb2NpdHkpIHtcbiAgICByZXR1cm4gZ2V0UG9zaXRpb24oKSArIHNpZ24odmVsb2NpdHkpICogbWluKGFicyh2ZWxvY2l0eSkgKiAob3B0aW9ucy5mbGlja1Bvd2VyIHx8IDYwMCksIGlzRnJlZSA/IEluZmluaXR5IDogQ29tcG9uZW50czIuTGF5b3V0Lmxpc3RTaXplKCkgKiAob3B0aW9ucy5mbGlja01heFBhZ2VzIHx8IDEpKTtcbiAgfVxuICBmdW5jdGlvbiBjb29yZE9mKGUsIG9ydGhvZ29uYWwpIHtcbiAgICByZXR1cm4gKGlzVG91Y2hFdmVudChlKSA/IGUudG91Y2hlc1swXSA6IGUpW2BwYWdlJHtyZXNvbHZlKG9ydGhvZ29uYWwgPyBcIllcIiA6IFwiWFwiKX1gXTtcbiAgfVxuICBmdW5jdGlvbiB0aW1lT2YoZSkge1xuICAgIHJldHVybiBlLnRpbWVTdGFtcDtcbiAgfVxuICBmdW5jdGlvbiBjb25zdHJhaW4oZGlmZikge1xuICAgIHJldHVybiBkaWZmIC8gKGhhc0V4Y2VlZGVkICYmIFNwbGlkZTIuaXMoU0xJREUpID8gRlJJQ1RJT04gOiAxKTtcbiAgfVxuICBmdW5jdGlvbiBpc1RvdWNoRXZlbnQoZSkge1xuICAgIHJldHVybiB0eXBlb2YgVG91Y2hFdmVudCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBlIGluc3RhbmNlb2YgVG91Y2hFdmVudDtcbiAgfVxuICBmdW5jdGlvbiBpc0RyYWdnaW5nKCkge1xuICAgIHJldHVybiBkcmFnZ2luZztcbiAgfVxuICBmdW5jdGlvbiBkaXNhYmxlKHZhbHVlKSB7XG4gICAgZGlzYWJsZWQgPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4ge1xuICAgIG1vdW50LFxuICAgIGRpc2FibGUsXG4gICAgaXNEcmFnZ2luZ1xuICB9O1xufVxuXG5jb25zdCBJRV9BUlJPV19LRVlTID0gW1wiTGVmdFwiLCBcIlJpZ2h0XCIsIFwiVXBcIiwgXCJEb3duXCJdO1xuZnVuY3Rpb24gS2V5Ym9hcmQoU3BsaWRlMiwgQ29tcG9uZW50czIsIG9wdGlvbnMpIHtcbiAgY29uc3QgeyBvbiwgYmluZCwgdW5iaW5kIH0gPSBFdmVudEludGVyZmFjZShTcGxpZGUyKTtcbiAgY29uc3QgeyByb290IH0gPSBDb21wb25lbnRzMi5FbGVtZW50cztcbiAgY29uc3QgeyByZXNvbHZlIH0gPSBDb21wb25lbnRzMi5EaXJlY3Rpb247XG4gIGxldCB0YXJnZXQ7XG4gIGxldCBkaXNhYmxlZDtcbiAgZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgaW5pdCgpO1xuICAgIG9uKEVWRU5UX1VQREFURUQsIG9uVXBkYXRlZCk7XG4gICAgb24oRVZFTlRfTU9WRSwgb25Nb3ZlKTtcbiAgfVxuICBmdW5jdGlvbiBpbml0KCkge1xuICAgIGNvbnN0IHsga2V5Ym9hcmQgPSBcImdsb2JhbFwiIH0gPSBvcHRpb25zO1xuICAgIGlmIChrZXlib2FyZCkge1xuICAgICAgaWYgKGtleWJvYXJkID09PSBcImZvY3VzZWRcIikge1xuICAgICAgICB0YXJnZXQgPSByb290O1xuICAgICAgICBzZXRBdHRyaWJ1dGUocm9vdCwgVEFCX0lOREVYLCAwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhcmdldCA9IHdpbmRvdztcbiAgICAgIH1cbiAgICAgIGJpbmQodGFyZ2V0LCBcImtleWRvd25cIiwgb25LZXlkb3duKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICB1bmJpbmQodGFyZ2V0LCBcImtleWRvd25cIik7XG4gICAgaWYgKGlzSFRNTEVsZW1lbnQodGFyZ2V0KSkge1xuICAgICAgcmVtb3ZlQXR0cmlidXRlKHRhcmdldCwgVEFCX0lOREVYKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gb25Nb3ZlKCkge1xuICAgIGRpc2FibGVkID0gdHJ1ZTtcbiAgICBuZXh0VGljaygoKSA9PiB7XG4gICAgICBkaXNhYmxlZCA9IGZhbHNlO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIG9uVXBkYXRlZCgpIHtcbiAgICBkZXN0cm95KCk7XG4gICAgaW5pdCgpO1xuICB9XG4gIGZ1bmN0aW9uIG9uS2V5ZG93bihlKSB7XG4gICAgaWYgKCFkaXNhYmxlZCkge1xuICAgICAgY29uc3QgeyBrZXkgfSA9IGU7XG4gICAgICBjb25zdCBub3JtYWxpemVkS2V5ID0gaW5jbHVkZXMoSUVfQVJST1dfS0VZUywga2V5KSA/IGBBcnJvdyR7a2V5fWAgOiBrZXk7XG4gICAgICBpZiAobm9ybWFsaXplZEtleSA9PT0gcmVzb2x2ZShcIkFycm93TGVmdFwiKSkge1xuICAgICAgICBTcGxpZGUyLmdvKFwiPFwiKTtcbiAgICAgIH0gZWxzZSBpZiAobm9ybWFsaXplZEtleSA9PT0gcmVzb2x2ZShcIkFycm93UmlnaHRcIikpIHtcbiAgICAgICAgU3BsaWRlMi5nbyhcIj5cIik7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgbW91bnQsXG4gICAgZGVzdHJveVxuICB9O1xufVxuXG5jb25zdCBTUkNfREFUQV9BVFRSSUJVVEUgPSBgJHtEQVRBX0FUVFJJQlVURX0tbGF6eWA7XG5jb25zdCBTUkNTRVRfREFUQV9BVFRSSUJVVEUgPSBgJHtTUkNfREFUQV9BVFRSSUJVVEV9LXNyY3NldGA7XG5jb25zdCBJTUFHRV9TRUxFQ1RPUiA9IGBbJHtTUkNfREFUQV9BVFRSSUJVVEV9XSwgWyR7U1JDU0VUX0RBVEFfQVRUUklCVVRFfV1gO1xuXG5mdW5jdGlvbiBMYXp5TG9hZChTcGxpZGUyLCBDb21wb25lbnRzMiwgb3B0aW9ucykge1xuICBjb25zdCB7IG9uLCBvZmYsIGJpbmQsIGVtaXQgfSA9IEV2ZW50SW50ZXJmYWNlKFNwbGlkZTIpO1xuICBjb25zdCBpc1NlcXVlbnRpYWwgPSBvcHRpb25zLmxhenlMb2FkID09PSBcInNlcXVlbnRpYWxcIjtcbiAgbGV0IGltYWdlcyA9IFtdO1xuICBsZXQgaW5kZXggPSAwO1xuICBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICBpZiAob3B0aW9ucy5sYXp5TG9hZCkge1xuICAgICAgaW5pdCgpO1xuICAgICAgb24oRVZFTlRfUkVGUkVTSCwgcmVmcmVzaCk7XG4gICAgICBpZiAoIWlzU2VxdWVudGlhbCkge1xuICAgICAgICBvbihbRVZFTlRfTU9VTlRFRCwgRVZFTlRfUkVGUkVTSCwgRVZFTlRfTU9WRUQsIEVWRU5UX1NDUk9MTEVEXSwgb2JzZXJ2ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHJlZnJlc2goKSB7XG4gICAgZGVzdHJveSgpO1xuICAgIGluaXQoKTtcbiAgfVxuICBmdW5jdGlvbiBpbml0KCkge1xuICAgIENvbXBvbmVudHMyLlNsaWRlcy5mb3JFYWNoKChfU2xpZGUpID0+IHtcbiAgICAgIHF1ZXJ5QWxsKF9TbGlkZS5zbGlkZSwgSU1BR0VfU0VMRUNUT1IpLmZvckVhY2goKF9pbWcpID0+IHtcbiAgICAgICAgY29uc3Qgc3JjID0gZ2V0QXR0cmlidXRlKF9pbWcsIFNSQ19EQVRBX0FUVFJJQlVURSk7XG4gICAgICAgIGNvbnN0IHNyY3NldCA9IGdldEF0dHJpYnV0ZShfaW1nLCBTUkNTRVRfREFUQV9BVFRSSUJVVEUpO1xuICAgICAgICBpZiAoc3JjICE9PSBfaW1nLnNyYyB8fCBzcmNzZXQgIT09IF9pbWcuc3Jjc2V0KSB7XG4gICAgICAgICAgY29uc3QgY2xhc3NOYW1lID0gb3B0aW9ucy5jbGFzc2VzLnNwaW5uZXI7XG4gICAgICAgICAgY29uc3QgcGFyZW50ID0gX2ltZy5wYXJlbnRFbGVtZW50O1xuICAgICAgICAgIGNvbnN0IF9zcGlubmVyID0gY2hpbGQocGFyZW50LCBgLiR7Y2xhc3NOYW1lfWApIHx8IGNyZWF0ZShcInNwYW5cIiwgY2xhc3NOYW1lLCBwYXJlbnQpO1xuICAgICAgICAgIHNldEF0dHJpYnV0ZShfc3Bpbm5lciwgUk9MRSwgXCJwcmVzZW50YXRpb25cIik7XG4gICAgICAgICAgaW1hZ2VzLnB1c2goeyBfaW1nLCBfU2xpZGUsIHNyYywgc3Jjc2V0LCBfc3Bpbm5lciB9KTtcbiAgICAgICAgICAhX2ltZy5zcmMgJiYgZGlzcGxheShfaW1nLCBcIm5vbmVcIik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlmIChpc1NlcXVlbnRpYWwpIHtcbiAgICAgIGxvYWROZXh0KCk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgaW5kZXggPSAwO1xuICAgIGltYWdlcyA9IFtdO1xuICB9XG4gIGZ1bmN0aW9uIG9ic2VydmUoKSB7XG4gICAgaW1hZ2VzID0gaW1hZ2VzLmZpbHRlcigoZGF0YSkgPT4ge1xuICAgICAgY29uc3QgZGlzdGFuY2UgPSBvcHRpb25zLnBlclBhZ2UgKiAoKG9wdGlvbnMucHJlbG9hZFBhZ2VzIHx8IDEpICsgMSkgLSAxO1xuICAgICAgaWYgKGRhdGEuX1NsaWRlLmlzV2l0aGluKFNwbGlkZTIuaW5kZXgsIGRpc3RhbmNlKSkge1xuICAgICAgICByZXR1cm4gbG9hZChkYXRhKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pO1xuICAgIGlmICghaW1hZ2VzLmxlbmd0aCkge1xuICAgICAgb2ZmKEVWRU5UX01PVkVEKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gbG9hZChkYXRhKSB7XG4gICAgY29uc3QgeyBfaW1nIH0gPSBkYXRhO1xuICAgIGFkZENsYXNzKGRhdGEuX1NsaWRlLnNsaWRlLCBDTEFTU19MT0FESU5HKTtcbiAgICBiaW5kKF9pbWcsIFwibG9hZCBlcnJvclwiLCAoZSkgPT4ge1xuICAgICAgb25Mb2FkKGRhdGEsIGUudHlwZSA9PT0gXCJlcnJvclwiKTtcbiAgICB9KTtcbiAgICBbXCJzcmNcIiwgXCJzcmNzZXRcIl0uZm9yRWFjaCgobmFtZSkgPT4ge1xuICAgICAgaWYgKGRhdGFbbmFtZV0pIHtcbiAgICAgICAgc2V0QXR0cmlidXRlKF9pbWcsIG5hbWUsIGRhdGFbbmFtZV0pO1xuICAgICAgICByZW1vdmVBdHRyaWJ1dGUoX2ltZywgbmFtZSA9PT0gXCJzcmNcIiA/IFNSQ19EQVRBX0FUVFJJQlVURSA6IFNSQ1NFVF9EQVRBX0FUVFJJQlVURSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gb25Mb2FkKGRhdGEsIGVycm9yKSB7XG4gICAgY29uc3QgeyBfU2xpZGUgfSA9IGRhdGE7XG4gICAgcmVtb3ZlQ2xhc3MoX1NsaWRlLnNsaWRlLCBDTEFTU19MT0FESU5HKTtcbiAgICBpZiAoIWVycm9yKSB7XG4gICAgICByZW1vdmUoZGF0YS5fc3Bpbm5lcik7XG4gICAgICBkaXNwbGF5KGRhdGEuX2ltZywgXCJcIik7XG4gICAgICBlbWl0KEVWRU5UX0xBWllMT0FEX0xPQURFRCwgZGF0YS5faW1nLCBfU2xpZGUpO1xuICAgICAgZW1pdChFVkVOVF9SRVNJWkUpO1xuICAgIH1cbiAgICBpZiAoaXNTZXF1ZW50aWFsKSB7XG4gICAgICBsb2FkTmV4dCgpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBsb2FkTmV4dCgpIHtcbiAgICBpZiAoaW5kZXggPCBpbWFnZXMubGVuZ3RoKSB7XG4gICAgICBsb2FkKGltYWdlc1tpbmRleCsrXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgbW91bnQsXG4gICAgZGVzdHJveVxuICB9O1xufVxuXG5mdW5jdGlvbiBQYWdpbmF0aW9uKFNwbGlkZTIsIENvbXBvbmVudHMyLCBvcHRpb25zKSB7XG4gIGNvbnN0IHsgb24sIGVtaXQsIGJpbmQsIHVuYmluZCB9ID0gRXZlbnRJbnRlcmZhY2UoU3BsaWRlMik7XG4gIGNvbnN0IHsgU2xpZGVzLCBFbGVtZW50cywgQ29udHJvbGxlciB9ID0gQ29tcG9uZW50czI7XG4gIGNvbnN0IHsgaGFzRm9jdXMsIGdldEluZGV4IH0gPSBDb250cm9sbGVyO1xuICBjb25zdCBpdGVtcyA9IFtdO1xuICBsZXQgbGlzdDtcbiAgZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgaW5pdCgpO1xuICAgIG9uKFtFVkVOVF9VUERBVEVELCBFVkVOVF9SRUZSRVNIXSwgaW5pdCk7XG4gICAgb24oW0VWRU5UX01PVkUsIEVWRU5UX1NDUk9MTEVEXSwgdXBkYXRlKTtcbiAgfVxuICBmdW5jdGlvbiBpbml0KCkge1xuICAgIGRlc3Ryb3koKTtcbiAgICBpZiAob3B0aW9ucy5wYWdpbmF0aW9uICYmIFNsaWRlcy5pc0Vub3VnaCgpKSB7XG4gICAgICBjcmVhdGVQYWdpbmF0aW9uKCk7XG4gICAgICBlbWl0KEVWRU5UX1BBR0lOQVRJT05fTU9VTlRFRCwgeyBsaXN0LCBpdGVtcyB9LCBnZXRBdChTcGxpZGUyLmluZGV4KSk7XG4gICAgICB1cGRhdGUoKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICBpZiAobGlzdCkge1xuICAgICAgcmVtb3ZlKGxpc3QpO1xuICAgICAgaXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICB1bmJpbmQoaXRlbS5idXR0b24sIFwiY2xpY2tcIik7XG4gICAgICB9KTtcbiAgICAgIGVtcHR5KGl0ZW1zKTtcbiAgICAgIGxpc3QgPSBudWxsO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVQYWdpbmF0aW9uKCkge1xuICAgIGNvbnN0IHsgbGVuZ3RoIH0gPSBTcGxpZGUyO1xuICAgIGNvbnN0IHsgY2xhc3NlcywgaTE4biwgcGVyUGFnZSB9ID0gb3B0aW9ucztcbiAgICBjb25zdCBwYXJlbnQgPSBvcHRpb25zLnBhZ2luYXRpb24gPT09IFwic2xpZGVyXCIgJiYgRWxlbWVudHMuc2xpZGVyIHx8IEVsZW1lbnRzLnJvb3Q7XG4gICAgY29uc3QgbWF4ID0gaGFzRm9jdXMoKSA/IGxlbmd0aCA6IGNlaWwobGVuZ3RoIC8gcGVyUGFnZSk7XG4gICAgbGlzdCA9IGNyZWF0ZShcInVsXCIsIGNsYXNzZXMucGFnaW5hdGlvbiwgcGFyZW50KTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1heDsgaSsrKSB7XG4gICAgICBjb25zdCBsaSA9IGNyZWF0ZShcImxpXCIsIG51bGwsIGxpc3QpO1xuICAgICAgY29uc3QgYnV0dG9uID0gY3JlYXRlKFwiYnV0dG9uXCIsIHsgY2xhc3M6IGNsYXNzZXMucGFnZSwgdHlwZTogXCJidXR0b25cIiB9LCBsaSk7XG4gICAgICBjb25zdCBjb250cm9scyA9IFNsaWRlcy5nZXRJbihpKS5tYXAoKFNsaWRlKSA9PiBTbGlkZS5zbGlkZS5pZCk7XG4gICAgICBjb25zdCB0ZXh0ID0gIWhhc0ZvY3VzKCkgJiYgcGVyUGFnZSA+IDEgPyBpMThuLnBhZ2VYIDogaTE4bi5zbGlkZVg7XG4gICAgICBiaW5kKGJ1dHRvbiwgXCJjbGlja1wiLCBvbkNsaWNrLmJpbmQobnVsbCwgaSkpO1xuICAgICAgc2V0QXR0cmlidXRlKGJ1dHRvbiwgQVJJQV9DT05UUk9MUywgY29udHJvbHMuam9pbihcIiBcIikpO1xuICAgICAgc2V0QXR0cmlidXRlKGJ1dHRvbiwgQVJJQV9MQUJFTCwgZm9ybWF0KHRleHQsIGkgKyAxKSk7XG4gICAgICBpdGVtcy5wdXNoKHsgbGksIGJ1dHRvbiwgcGFnZTogaSB9KTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gb25DbGljayhwYWdlKSB7XG4gICAgQ29udHJvbGxlci5nbyhgPiR7cGFnZX1gLCB0cnVlLCAoKSA9PiB7XG4gICAgICBjb25zdCBTbGlkZSA9IFNsaWRlcy5nZXRBdChDb250cm9sbGVyLnRvSW5kZXgocGFnZSkpO1xuICAgICAgU2xpZGUgJiYgZm9jdXMoU2xpZGUuc2xpZGUpO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGdldEF0KGluZGV4KSB7XG4gICAgcmV0dXJuIGl0ZW1zW0NvbnRyb2xsZXIudG9QYWdlKGluZGV4KV07XG4gIH1cbiAgZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgIGNvbnN0IHByZXYgPSBnZXRBdChnZXRJbmRleCh0cnVlKSk7XG4gICAgY29uc3QgY3VyciA9IGdldEF0KGdldEluZGV4KCkpO1xuICAgIGlmIChwcmV2KSB7XG4gICAgICByZW1vdmVDbGFzcyhwcmV2LmJ1dHRvbiwgQ0xBU1NfQUNUSVZFKTtcbiAgICAgIHJlbW92ZUF0dHJpYnV0ZShwcmV2LmJ1dHRvbiwgQVJJQV9DVVJSRU5UKTtcbiAgICB9XG4gICAgaWYgKGN1cnIpIHtcbiAgICAgIGFkZENsYXNzKGN1cnIuYnV0dG9uLCBDTEFTU19BQ1RJVkUpO1xuICAgICAgc2V0QXR0cmlidXRlKGN1cnIuYnV0dG9uLCBBUklBX0NVUlJFTlQsIHRydWUpO1xuICAgIH1cbiAgICBlbWl0KEVWRU5UX1BBR0lOQVRJT05fVVBEQVRFRCwgeyBsaXN0LCBpdGVtcyB9LCBwcmV2LCBjdXJyKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGl0ZW1zLFxuICAgIG1vdW50LFxuICAgIGRlc3Ryb3ksXG4gICAgZ2V0QXQsXG4gICAgdXBkYXRlXG4gIH07XG59XG5cbmNvbnN0IFRSSUdHRVJfS0VZUyA9IFtcIiBcIiwgXCJFbnRlclwiLCBcIlNwYWNlYmFyXCJdO1xuZnVuY3Rpb24gU3luYyhTcGxpZGUyLCBDb21wb25lbnRzMiwgb3B0aW9ucykge1xuICBjb25zdCB7IGxpc3QgfSA9IENvbXBvbmVudHMyLkVsZW1lbnRzO1xuICBjb25zdCBldmVudHMgPSBbXTtcbiAgZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgU3BsaWRlMi5zcGxpZGVzLmZvckVhY2goKHRhcmdldCkgPT4ge1xuICAgICAgIXRhcmdldC5pc1BhcmVudCAmJiBzeW5jKHRhcmdldC5zcGxpZGUpO1xuICAgIH0pO1xuICAgIGlmIChvcHRpb25zLmlzTmF2aWdhdGlvbikge1xuICAgICAgbmF2aWdhdGUoKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICByZW1vdmVBdHRyaWJ1dGUobGlzdCwgQUxMX0FUVFJJQlVURVMpO1xuICAgIGV2ZW50cy5mb3JFYWNoKChldmVudCkgPT4ge1xuICAgICAgZXZlbnQuZGVzdHJveSgpO1xuICAgIH0pO1xuICAgIGVtcHR5KGV2ZW50cyk7XG4gIH1cbiAgZnVuY3Rpb24gcmVtb3VudCgpIHtcbiAgICBkZXN0cm95KCk7XG4gICAgbW91bnQoKTtcbiAgfVxuICBmdW5jdGlvbiBzeW5jKHNwbGlkZSkge1xuICAgIFtTcGxpZGUyLCBzcGxpZGVdLmZvckVhY2goKGluc3RhbmNlKSA9PiB7XG4gICAgICBjb25zdCBldmVudCA9IEV2ZW50SW50ZXJmYWNlKGluc3RhbmNlKTtcbiAgICAgIGNvbnN0IHRhcmdldCA9IGluc3RhbmNlID09PSBTcGxpZGUyID8gc3BsaWRlIDogU3BsaWRlMjtcbiAgICAgIGV2ZW50Lm9uKEVWRU5UX01PVkUsIChpbmRleCwgcHJldiwgZGVzdCkgPT4ge1xuICAgICAgICB0YXJnZXQuZ28odGFyZ2V0LmlzKExPT1ApID8gZGVzdCA6IGluZGV4KTtcbiAgICAgIH0pO1xuICAgICAgZXZlbnRzLnB1c2goZXZlbnQpO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIG5hdmlnYXRlKCkge1xuICAgIGNvbnN0IGV2ZW50ID0gRXZlbnRJbnRlcmZhY2UoU3BsaWRlMik7XG4gICAgY29uc3QgeyBvbiB9ID0gZXZlbnQ7XG4gICAgb24oRVZFTlRfQ0xJQ0ssIG9uQ2xpY2spO1xuICAgIG9uKEVWRU5UX1NMSURFX0tFWURPV04sIG9uS2V5ZG93bik7XG4gICAgb24oW0VWRU5UX01PVU5URUQsIEVWRU5UX1VQREFURURdLCB1cGRhdGUpO1xuICAgIHNldEF0dHJpYnV0ZShsaXN0LCBST0xFLCBcIm1lbnVcIik7XG4gICAgZXZlbnRzLnB1c2goZXZlbnQpO1xuICAgIGV2ZW50LmVtaXQoRVZFTlRfTkFWSUdBVElPTl9NT1VOVEVELCBTcGxpZGUyLnNwbGlkZXMpO1xuICB9XG4gIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICBzZXRBdHRyaWJ1dGUobGlzdCwgQVJJQV9PUklFTlRBVElPTiwgb3B0aW9ucy5kaXJlY3Rpb24gIT09IFRUQiA/IFwiaG9yaXpvbnRhbFwiIDogbnVsbCk7XG4gIH1cbiAgZnVuY3Rpb24gb25DbGljayhTbGlkZSkge1xuICAgIFNwbGlkZTIuZ28oU2xpZGUuaW5kZXgpO1xuICB9XG4gIGZ1bmN0aW9uIG9uS2V5ZG93bihTbGlkZSwgZSkge1xuICAgIGlmIChpbmNsdWRlcyhUUklHR0VSX0tFWVMsIGUua2V5KSkge1xuICAgICAgb25DbGljayhTbGlkZSk7XG4gICAgICBwcmV2ZW50KGUpO1xuICAgIH1cbiAgfVxuICByZXR1cm4ge1xuICAgIG1vdW50LFxuICAgIGRlc3Ryb3ksXG4gICAgcmVtb3VudFxuICB9O1xufVxuXG5mdW5jdGlvbiBXaGVlbChTcGxpZGUyLCBDb21wb25lbnRzMiwgb3B0aW9ucykge1xuICBjb25zdCB7IGJpbmQgfSA9IEV2ZW50SW50ZXJmYWNlKFNwbGlkZTIpO1xuICBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICBpZiAob3B0aW9ucy53aGVlbCkge1xuICAgICAgYmluZChDb21wb25lbnRzMi5FbGVtZW50cy50cmFjaywgXCJ3aGVlbFwiLCBvbldoZWVsLCBTQ1JPTExfTElTVEVORVJfT1BUSU9OUyk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIG9uV2hlZWwoZSkge1xuICAgIGlmIChlLmNhbmNlbGFibGUpIHtcbiAgICAgIGNvbnN0IHsgZGVsdGFZIH0gPSBlO1xuICAgICAgaWYgKGRlbHRhWSkge1xuICAgICAgICBjb25zdCBiYWNrd2FyZHMgPSBkZWx0YVkgPCAwO1xuICAgICAgICBTcGxpZGUyLmdvKGJhY2t3YXJkcyA/IFwiPFwiIDogXCI+XCIpO1xuICAgICAgICBzaG91bGRQcmV2ZW50KGJhY2t3YXJkcykgJiYgcHJldmVudChlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gc2hvdWxkUHJldmVudChiYWNrd2FyZHMpIHtcbiAgICByZXR1cm4gIW9wdGlvbnMucmVsZWFzZVdoZWVsIHx8IFNwbGlkZTIuc3RhdGUuaXMoTU9WSU5HKSB8fCBDb21wb25lbnRzMi5Db250cm9sbGVyLmdldEFkamFjZW50KGJhY2t3YXJkcykgIT09IC0xO1xuICB9XG4gIHJldHVybiB7XG4gICAgbW91bnRcbiAgfTtcbn1cblxudmFyIENvbXBvbmVudENvbnN0cnVjdG9ycyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgX19wcm90b19fOiBudWxsLFxuICBPcHRpb25zOiBPcHRpb25zLFxuICBEaXJlY3Rpb246IERpcmVjdGlvbixcbiAgRWxlbWVudHM6IEVsZW1lbnRzLFxuICBTbGlkZXM6IFNsaWRlcyxcbiAgTGF5b3V0OiBMYXlvdXQsXG4gIENsb25lczogQ2xvbmVzLFxuICBNb3ZlOiBNb3ZlLFxuICBDb250cm9sbGVyOiBDb250cm9sbGVyLFxuICBBcnJvd3M6IEFycm93cyxcbiAgQXV0b3BsYXk6IEF1dG9wbGF5LFxuICBDb3ZlcjogQ292ZXIsXG4gIFNjcm9sbDogU2Nyb2xsLFxuICBEcmFnOiBEcmFnLFxuICBLZXlib2FyZDogS2V5Ym9hcmQsXG4gIExhenlMb2FkOiBMYXp5TG9hZCxcbiAgUGFnaW5hdGlvbjogUGFnaW5hdGlvbixcbiAgU3luYzogU3luYyxcbiAgV2hlZWw6IFdoZWVsXG59KTtcblxuY29uc3QgSTE4TiA9IHtcbiAgcHJldjogXCJQcmV2aW91cyBzbGlkZVwiLFxuICBuZXh0OiBcIk5leHQgc2xpZGVcIixcbiAgZmlyc3Q6IFwiR28gdG8gZmlyc3Qgc2xpZGVcIixcbiAgbGFzdDogXCJHbyB0byBsYXN0IHNsaWRlXCIsXG4gIHNsaWRlWDogXCJHbyB0byBzbGlkZSAlc1wiLFxuICBwYWdlWDogXCJHbyB0byBwYWdlICVzXCIsXG4gIHBsYXk6IFwiU3RhcnQgYXV0b3BsYXlcIixcbiAgcGF1c2U6IFwiUGF1c2UgYXV0b3BsYXlcIlxufTtcblxuY29uc3QgREVGQVVMVFMgPSB7XG4gIHR5cGU6IFwic2xpZGVcIixcbiAgc3BlZWQ6IDQwMCxcbiAgd2FpdEZvclRyYW5zaXRpb246IHRydWUsXG4gIHBlclBhZ2U6IDEsXG4gIGNsb25lU3RhdHVzOiB0cnVlLFxuICBhcnJvd3M6IHRydWUsXG4gIHBhZ2luYXRpb246IHRydWUsXG4gIGludGVydmFsOiA1ZTMsXG4gIHBhdXNlT25Ib3ZlcjogdHJ1ZSxcbiAgcGF1c2VPbkZvY3VzOiB0cnVlLFxuICByZXNldFByb2dyZXNzOiB0cnVlLFxuICBlYXNpbmc6IFwiY3ViaWMtYmV6aWVyKDAuMjUsIDEsIDAuNSwgMSlcIixcbiAgZHJhZzogdHJ1ZSxcbiAgZGlyZWN0aW9uOiBcImx0clwiLFxuICBzbGlkZUZvY3VzOiB0cnVlLFxuICB0cmltU3BhY2U6IHRydWUsXG4gIGZvY3VzYWJsZU5vZGVzOiBcImEsIGJ1dHRvbiwgdGV4dGFyZWEsIGlucHV0LCBzZWxlY3QsIGlmcmFtZVwiLFxuICBjbGFzc2VzOiBDTEFTU0VTLFxuICBpMThuOiBJMThOXG59O1xuXG5mdW5jdGlvbiBGYWRlKFNwbGlkZTIsIENvbXBvbmVudHMyLCBvcHRpb25zKSB7XG4gIGNvbnN0IHsgb24gfSA9IEV2ZW50SW50ZXJmYWNlKFNwbGlkZTIpO1xuICBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICBvbihbRVZFTlRfTU9VTlRFRCwgRVZFTlRfUkVGUkVTSF0sICgpID0+IHtcbiAgICAgIG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgQ29tcG9uZW50czIuU2xpZGVzLnN0eWxlKFwidHJhbnNpdGlvblwiLCBgb3BhY2l0eSAke29wdGlvbnMuc3BlZWR9bXMgJHtvcHRpb25zLmVhc2luZ31gKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIHN0YXJ0KGluZGV4LCBkb25lKSB7XG4gICAgY29uc3QgeyB0cmFjayB9ID0gQ29tcG9uZW50czIuRWxlbWVudHM7XG4gICAgc3R5bGUodHJhY2ssIFwiaGVpZ2h0XCIsIHVuaXQocmVjdCh0cmFjaykuaGVpZ2h0KSk7XG4gICAgbmV4dFRpY2soKCkgPT4ge1xuICAgICAgZG9uZSgpO1xuICAgICAgc3R5bGUodHJhY2ssIFwiaGVpZ2h0XCIsIFwiXCIpO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiB7XG4gICAgbW91bnQsXG4gICAgc3RhcnQsXG4gICAgY2FuY2VsOiBub29wXG4gIH07XG59XG5cbmZ1bmN0aW9uIFNsaWRlKFNwbGlkZTIsIENvbXBvbmVudHMyLCBvcHRpb25zKSB7XG4gIGNvbnN0IHsgYmluZCB9ID0gRXZlbnRJbnRlcmZhY2UoU3BsaWRlMik7XG4gIGNvbnN0IHsgTW92ZSwgQ29udHJvbGxlciB9ID0gQ29tcG9uZW50czI7XG4gIGNvbnN0IHsgbGlzdCB9ID0gQ29tcG9uZW50czIuRWxlbWVudHM7XG4gIGxldCBlbmRDYWxsYmFjaztcbiAgZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgYmluZChsaXN0LCBcInRyYW5zaXRpb25lbmRcIiwgKGUpID0+IHtcbiAgICAgIGlmIChlLnRhcmdldCA9PT0gbGlzdCAmJiBlbmRDYWxsYmFjaykge1xuICAgICAgICBjYW5jZWwoKTtcbiAgICAgICAgZW5kQ2FsbGJhY2soKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBzdGFydChpbmRleCwgZG9uZSkge1xuICAgIGNvbnN0IGRlc3RpbmF0aW9uID0gTW92ZS50b1Bvc2l0aW9uKGluZGV4LCB0cnVlKTtcbiAgICBjb25zdCBwb3NpdGlvbiA9IE1vdmUuZ2V0UG9zaXRpb24oKTtcbiAgICBjb25zdCBzcGVlZCA9IGdldFNwZWVkKGluZGV4KTtcbiAgICBpZiAoYWJzKGRlc3RpbmF0aW9uIC0gcG9zaXRpb24pID49IDEgJiYgc3BlZWQgPj0gMSkge1xuICAgICAgYXBwbHkoYHRyYW5zZm9ybSAke3NwZWVkfW1zICR7b3B0aW9ucy5lYXNpbmd9YCk7XG4gICAgICBNb3ZlLnRyYW5zbGF0ZShkZXN0aW5hdGlvbiwgdHJ1ZSk7XG4gICAgICBlbmRDYWxsYmFjayA9IGRvbmU7XG4gICAgfSBlbHNlIHtcbiAgICAgIE1vdmUuanVtcChpbmRleCk7XG4gICAgICBkb25lKCk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICBhcHBseShcIlwiKTtcbiAgfVxuICBmdW5jdGlvbiBnZXRTcGVlZChpbmRleCkge1xuICAgIGNvbnN0IHsgcmV3aW5kU3BlZWQgfSA9IG9wdGlvbnM7XG4gICAgaWYgKFNwbGlkZTIuaXMoU0xJREUpICYmIHJld2luZFNwZWVkKSB7XG4gICAgICBjb25zdCBwcmV2ID0gQ29udHJvbGxlci5nZXRJbmRleCh0cnVlKTtcbiAgICAgIGNvbnN0IGVuZCA9IENvbnRyb2xsZXIuZ2V0RW5kKCk7XG4gICAgICBpZiAocHJldiA9PT0gMCAmJiBpbmRleCA+PSBlbmQgfHwgcHJldiA+PSBlbmQgJiYgaW5kZXggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHJld2luZFNwZWVkO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3B0aW9ucy5zcGVlZDtcbiAgfVxuICBmdW5jdGlvbiBhcHBseSh0cmFuc2l0aW9uKSB7XG4gICAgc3R5bGUobGlzdCwgXCJ0cmFuc2l0aW9uXCIsIHRyYW5zaXRpb24pO1xuICB9XG4gIHJldHVybiB7XG4gICAgbW91bnQsXG4gICAgc3RhcnQsXG4gICAgY2FuY2VsXG4gIH07XG59XG5cbmNvbnN0IF9TcGxpZGUgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKHRhcmdldCwgb3B0aW9ucykge1xuICAgIHRoaXMuZXZlbnQgPSBFdmVudEJ1cygpO1xuICAgIHRoaXMuQ29tcG9uZW50cyA9IHt9O1xuICAgIHRoaXMuc3RhdGUgPSBTdGF0ZShDUkVBVEVEKTtcbiAgICB0aGlzLnNwbGlkZXMgPSBbXTtcbiAgICB0aGlzLl9vcHRpb25zID0ge307XG4gICAgdGhpcy5fRXh0ZW5zaW9ucyA9IHt9O1xuICAgIGNvbnN0IHJvb3QgPSBpc1N0cmluZyh0YXJnZXQpID8gcXVlcnkoZG9jdW1lbnQsIHRhcmdldCkgOiB0YXJnZXQ7XG4gICAgYXNzZXJ0KHJvb3QsIGAke3Jvb3R9IGlzIGludmFsaWQuYCk7XG4gICAgdGhpcy5yb290ID0gcm9vdDtcbiAgICBtZXJnZShERUZBVUxUUywgX1NwbGlkZS5kZWZhdWx0cyk7XG4gICAgbWVyZ2UobWVyZ2UodGhpcy5fb3B0aW9ucywgREVGQVVMVFMpLCBvcHRpb25zIHx8IHt9KTtcbiAgfVxuICBtb3VudChFeHRlbnNpb25zLCBUcmFuc2l0aW9uKSB7XG4gICAgY29uc3QgeyBzdGF0ZSwgQ29tcG9uZW50czogQ29tcG9uZW50czIgfSA9IHRoaXM7XG4gICAgYXNzZXJ0KHN0YXRlLmlzKFtDUkVBVEVELCBERVNUUk9ZRURdKSwgXCJBbHJlYWR5IG1vdW50ZWQhXCIpO1xuICAgIHN0YXRlLnNldChDUkVBVEVEKTtcbiAgICB0aGlzLl9Db21wb25lbnRzID0gQ29tcG9uZW50czI7XG4gICAgdGhpcy5fVHJhbnNpdGlvbiA9IFRyYW5zaXRpb24gfHwgdGhpcy5fVHJhbnNpdGlvbiB8fCAodGhpcy5pcyhGQURFKSA/IEZhZGUgOiBTbGlkZSk7XG4gICAgdGhpcy5fRXh0ZW5zaW9ucyA9IEV4dGVuc2lvbnMgfHwgdGhpcy5fRXh0ZW5zaW9ucztcbiAgICBjb25zdCBDb25zdHJ1Y3RvcnMgPSBhc3NpZ24oe30sIENvbXBvbmVudENvbnN0cnVjdG9ycywgdGhpcy5fRXh0ZW5zaW9ucywgeyBUcmFuc2l0aW9uOiB0aGlzLl9UcmFuc2l0aW9uIH0pO1xuICAgIGZvck93bihDb25zdHJ1Y3RvcnMsIChDb21wb25lbnQsIGtleSkgPT4ge1xuICAgICAgY29uc3QgY29tcG9uZW50ID0gQ29tcG9uZW50KHRoaXMsIENvbXBvbmVudHMyLCB0aGlzLl9vcHRpb25zKTtcbiAgICAgIENvbXBvbmVudHMyW2tleV0gPSBjb21wb25lbnQ7XG4gICAgICBjb21wb25lbnQuc2V0dXAgJiYgY29tcG9uZW50LnNldHVwKCk7XG4gICAgfSk7XG4gICAgZm9yT3duKENvbXBvbmVudHMyLCAoY29tcG9uZW50KSA9PiB7XG4gICAgICBjb21wb25lbnQubW91bnQgJiYgY29tcG9uZW50Lm1vdW50KCk7XG4gICAgfSk7XG4gICAgdGhpcy5lbWl0KEVWRU5UX01PVU5URUQpO1xuICAgIGFkZENsYXNzKHRoaXMucm9vdCwgQ0xBU1NfSU5JVElBTElaRUQpO1xuICAgIHN0YXRlLnNldChJRExFKTtcbiAgICB0aGlzLmVtaXQoRVZFTlRfUkVBRFkpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHN5bmMoc3BsaWRlKSB7XG4gICAgdGhpcy5zcGxpZGVzLnB1c2goeyBzcGxpZGUgfSk7XG4gICAgc3BsaWRlLnNwbGlkZXMucHVzaCh7IHNwbGlkZTogdGhpcywgaXNQYXJlbnQ6IHRydWUgfSk7XG4gICAgaWYgKHRoaXMuc3RhdGUuaXMoSURMRSkpIHtcbiAgICAgIHRoaXMuX0NvbXBvbmVudHMuU3luYy5yZW1vdW50KCk7XG4gICAgICBzcGxpZGUuQ29tcG9uZW50cy5TeW5jLnJlbW91bnQoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgZ28oY29udHJvbCkge1xuICAgIHRoaXMuX0NvbXBvbmVudHMuQ29udHJvbGxlci5nbyhjb250cm9sKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBvbihldmVudHMsIGNhbGxiYWNrKSB7XG4gICAgdGhpcy5ldmVudC5vbihldmVudHMsIGNhbGxiYWNrLCBudWxsLCBERUZBVUxUX1VTRVJfRVZFTlRfUFJJT1JJVFkpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIG9mZihldmVudHMpIHtcbiAgICB0aGlzLmV2ZW50Lm9mZihldmVudHMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGVtaXQoZXZlbnQpIHtcbiAgICB0aGlzLmV2ZW50LmVtaXQoZXZlbnQsIC4uLnNsaWNlKGFyZ3VtZW50cywgMSkpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGFkZChzbGlkZXMsIGluZGV4KSB7XG4gICAgdGhpcy5fQ29tcG9uZW50cy5TbGlkZXMuYWRkKHNsaWRlcywgaW5kZXgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHJlbW92ZShtYXRjaGVyKSB7XG4gICAgdGhpcy5fQ29tcG9uZW50cy5TbGlkZXMucmVtb3ZlKG1hdGNoZXIpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGlzKHR5cGUpIHtcbiAgICByZXR1cm4gdGhpcy5fb3B0aW9ucy50eXBlID09PSB0eXBlO1xuICB9XG4gIHJlZnJlc2goKSB7XG4gICAgdGhpcy5lbWl0KEVWRU5UX1JFRlJFU0gpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGRlc3Ryb3koY29tcGxldGVseSA9IHRydWUpIHtcbiAgICBjb25zdCB7IGV2ZW50LCBzdGF0ZSB9ID0gdGhpcztcbiAgICBpZiAoc3RhdGUuaXMoQ1JFQVRFRCkpIHtcbiAgICAgIGV2ZW50Lm9uKEVWRU5UX1JFQURZLCB0aGlzLmRlc3Ryb3kuYmluZCh0aGlzLCBjb21wbGV0ZWx5KSwgdGhpcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvck93bih0aGlzLl9Db21wb25lbnRzLCAoY29tcG9uZW50KSA9PiB7XG4gICAgICAgIGNvbXBvbmVudC5kZXN0cm95ICYmIGNvbXBvbmVudC5kZXN0cm95KGNvbXBsZXRlbHkpO1xuICAgICAgfSwgdHJ1ZSk7XG4gICAgICBldmVudC5lbWl0KEVWRU5UX0RFU1RST1kpO1xuICAgICAgZXZlbnQuZGVzdHJveSgpO1xuICAgICAgY29tcGxldGVseSAmJiBlbXB0eSh0aGlzLnNwbGlkZXMpO1xuICAgICAgc3RhdGUuc2V0KERFU1RST1lFRCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGdldCBvcHRpb25zKCkge1xuICAgIHJldHVybiB0aGlzLl9vcHRpb25zO1xuICB9XG4gIHNldCBvcHRpb25zKG9wdGlvbnMpIHtcbiAgICBjb25zdCB7IF9vcHRpb25zIH0gPSB0aGlzO1xuICAgIG1lcmdlKF9vcHRpb25zLCBvcHRpb25zKTtcbiAgICBpZiAoIXRoaXMuc3RhdGUuaXMoQ1JFQVRFRCkpIHtcbiAgICAgIHRoaXMuZW1pdChFVkVOVF9VUERBVEVELCBfb3B0aW9ucyk7XG4gICAgfVxuICB9XG4gIGdldCBsZW5ndGgoKSB7XG4gICAgcmV0dXJuIHRoaXMuX0NvbXBvbmVudHMuU2xpZGVzLmdldExlbmd0aCh0cnVlKTtcbiAgfVxuICBnZXQgaW5kZXgoKSB7XG4gICAgcmV0dXJuIHRoaXMuX0NvbXBvbmVudHMuQ29udHJvbGxlci5nZXRJbmRleCgpO1xuICB9XG59O1xubGV0IFNwbGlkZSA9IF9TcGxpZGU7XG5TcGxpZGUuZGVmYXVsdHMgPSB7fTtcblNwbGlkZS5TVEFURVMgPSBTVEFURVM7XG5cbmNvbnN0IENMQVNTX1JFTkRFUkVEID0gXCJpcy1yZW5kZXJlZFwiO1xuXG5jb25zdCBSRU5ERVJFUl9ERUZBVUxUX0NPTkZJRyA9IHtcbiAgbGlzdFRhZzogXCJ1bFwiLFxuICBzbGlkZVRhZzogXCJsaVwiXG59O1xuXG5jbGFzcyBTdHlsZSB7XG4gIGNvbnN0cnVjdG9yKGlkLCBvcHRpb25zKSB7XG4gICAgdGhpcy5zdHlsZXMgPSB7fTtcbiAgICB0aGlzLmlkID0gaWQ7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuICBydWxlKHNlbGVjdG9yLCBwcm9wLCB2YWx1ZSwgYnJlYWtwb2ludCkge1xuICAgIGJyZWFrcG9pbnQgPSBicmVha3BvaW50IHx8IFwiZGVmYXVsdFwiO1xuICAgIGNvbnN0IHNlbGVjdG9ycyA9IHRoaXMuc3R5bGVzW2JyZWFrcG9pbnRdID0gdGhpcy5zdHlsZXNbYnJlYWtwb2ludF0gfHwge307XG4gICAgY29uc3Qgc3R5bGVzID0gc2VsZWN0b3JzW3NlbGVjdG9yXSA9IHNlbGVjdG9yc1tzZWxlY3Rvcl0gfHwge307XG4gICAgc3R5bGVzW3Byb3BdID0gdmFsdWU7XG4gIH1cbiAgYnVpbGQoKSB7XG4gICAgbGV0IGNzcyA9IFwiXCI7XG4gICAgaWYgKHRoaXMuc3R5bGVzLmRlZmF1bHQpIHtcbiAgICAgIGNzcyArPSB0aGlzLmJ1aWxkU2VsZWN0b3JzKHRoaXMuc3R5bGVzLmRlZmF1bHQpO1xuICAgIH1cbiAgICBPYmplY3Qua2V5cyh0aGlzLnN0eWxlcykuc29ydCgobiwgbSkgPT4gdGhpcy5vcHRpb25zLm1lZGlhUXVlcnkgPT09IFwibWluXCIgPyArbiAtICttIDogK20gLSArbikuZm9yRWFjaCgoYnJlYWtwb2ludCkgPT4ge1xuICAgICAgaWYgKGJyZWFrcG9pbnQgIT09IFwiZGVmYXVsdFwiKSB7XG4gICAgICAgIGNzcyArPSBgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogJHticmVha3BvaW50fXB4KSB7YDtcbiAgICAgICAgY3NzICs9IHRoaXMuYnVpbGRTZWxlY3RvcnModGhpcy5zdHlsZXNbYnJlYWtwb2ludF0pO1xuICAgICAgICBjc3MgKz0gYH1gO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBjc3M7XG4gIH1cbiAgYnVpbGRTZWxlY3RvcnMoc2VsZWN0b3JzKSB7XG4gICAgbGV0IGNzcyA9IFwiXCI7XG4gICAgZm9yT3duKHNlbGVjdG9ycywgKHN0eWxlcywgc2VsZWN0b3IpID0+IHtcbiAgICAgIHNlbGVjdG9yID0gYCMke3RoaXMuaWR9ICR7c2VsZWN0b3J9YC50cmltKCk7XG4gICAgICBjc3MgKz0gYCR7c2VsZWN0b3J9IHtgO1xuICAgICAgZm9yT3duKHN0eWxlcywgKHZhbHVlLCBwcm9wKSA9PiB7XG4gICAgICAgIGlmICh2YWx1ZSB8fCB2YWx1ZSA9PT0gMCkge1xuICAgICAgICAgIGNzcyArPSBgJHtwcm9wfTogJHt2YWx1ZX07YDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBjc3MgKz0gXCJ9XCI7XG4gICAgfSk7XG4gICAgcmV0dXJuIGNzcztcbiAgfVxufVxuXG5jbGFzcyBTcGxpZGVSZW5kZXJlciB7XG4gIGNvbnN0cnVjdG9yKGNvbnRlbnRzLCBvcHRpb25zLCBjb25maWcsIGRlZmF1bHRzKSB7XG4gICAgdGhpcy5zbGlkZXMgPSBbXTtcbiAgICB0aGlzLm9wdGlvbnMgPSB7fTtcbiAgICB0aGlzLmJyZWFrcG9pbnRzID0gW107XG4gICAgbWVyZ2UoREVGQVVMVFMsIGRlZmF1bHRzIHx8IHt9KTtcbiAgICBtZXJnZShtZXJnZSh0aGlzLm9wdGlvbnMsIERFRkFVTFRTKSwgb3B0aW9ucyB8fCB7fSk7XG4gICAgdGhpcy5jb250ZW50cyA9IGNvbnRlbnRzO1xuICAgIHRoaXMuY29uZmlnID0gYXNzaWduKHt9LCBSRU5ERVJFUl9ERUZBVUxUX0NPTkZJRywgY29uZmlnIHx8IHt9KTtcbiAgICB0aGlzLmlkID0gdGhpcy5jb25maWcuaWQgfHwgdW5pcXVlSWQoXCJzcGxpZGVcIik7XG4gICAgdGhpcy5TdHlsZSA9IG5ldyBTdHlsZSh0aGlzLmlkLCB0aGlzLm9wdGlvbnMpO1xuICAgIHRoaXMuRGlyZWN0aW9uID0gRGlyZWN0aW9uKG51bGwsIG51bGwsIHRoaXMub3B0aW9ucyk7XG4gICAgYXNzZXJ0KHRoaXMuY29udGVudHMubGVuZ3RoLCBcIlByb3ZpZGUgYXQgbGVhc3QgMSBjb250ZW50LlwiKTtcbiAgICB0aGlzLmluaXQoKTtcbiAgfVxuICBzdGF0aWMgY2xlYW4oc3BsaWRlKSB7XG4gICAgY29uc3QgeyBvbiB9ID0gRXZlbnRJbnRlcmZhY2Uoc3BsaWRlKTtcbiAgICBjb25zdCB7IHJvb3QgfSA9IHNwbGlkZTtcbiAgICBjb25zdCBjbG9uZXMgPSBxdWVyeUFsbChyb290LCBgLiR7Q0xBU1NfQ0xPTkV9YCk7XG4gICAgb24oRVZFTlRfTU9VTlRFRCwgKCkgPT4ge1xuICAgICAgcmVtb3ZlKGNoaWxkKHJvb3QsIFwic3R5bGVcIikpO1xuICAgIH0pO1xuICAgIHJlbW92ZShjbG9uZXMpO1xuICB9XG4gIGluaXQoKSB7XG4gICAgdGhpcy5wYXJzZUJyZWFrcG9pbnRzKCk7XG4gICAgdGhpcy5pbml0U2xpZGVzKCk7XG4gICAgdGhpcy5yZWdpc3RlclJvb3RTdHlsZXMoKTtcbiAgICB0aGlzLnJlZ2lzdGVyVHJhY2tTdHlsZXMoKTtcbiAgICB0aGlzLnJlZ2lzdGVyU2xpZGVTdHlsZXMoKTtcbiAgICB0aGlzLnJlZ2lzdGVyTGlzdFN0eWxlcygpO1xuICB9XG4gIGluaXRTbGlkZXMoKSB7XG4gICAgcHVzaCh0aGlzLnNsaWRlcywgdGhpcy5jb250ZW50cy5tYXAoKGNvbnRlbnQsIGluZGV4KSA9PiB7XG4gICAgICBjb250ZW50ID0gaXNTdHJpbmcoY29udGVudCkgPyB7IGh0bWw6IGNvbnRlbnQgfSA6IGNvbnRlbnQ7XG4gICAgICBjb250ZW50LnN0eWxlcyA9IGNvbnRlbnQuc3R5bGVzIHx8IHt9O1xuICAgICAgY29udGVudC5hdHRycyA9IGNvbnRlbnQuYXR0cnMgfHwge307XG4gICAgICB0aGlzLmNvdmVyKGNvbnRlbnQpO1xuICAgICAgY29uc3QgY2xhc3NlcyA9IGAke3RoaXMub3B0aW9ucy5jbGFzc2VzLnNsaWRlfSAke2luZGV4ID09PSAwID8gQ0xBU1NfQUNUSVZFIDogXCJcIn1gO1xuICAgICAgYXNzaWduKGNvbnRlbnQuYXR0cnMsIHtcbiAgICAgICAgY2xhc3M6IGAke2NsYXNzZXN9ICR7Y29udGVudC5hdHRycy5jbGFzcyB8fCBcIlwifWAudHJpbSgpLFxuICAgICAgICBzdHlsZTogdGhpcy5idWlsZFN0eWxlcyhjb250ZW50LnN0eWxlcylcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkpO1xuICAgIGlmICh0aGlzLmlzTG9vcCgpKSB7XG4gICAgICB0aGlzLmdlbmVyYXRlQ2xvbmVzKHRoaXMuc2xpZGVzKTtcbiAgICB9XG4gIH1cbiAgcmVnaXN0ZXJSb290U3R5bGVzKCkge1xuICAgIHRoaXMuYnJlYWtwb2ludHMuZm9yRWFjaCgoW3dpZHRoLCBvcHRpb25zXSkgPT4ge1xuICAgICAgdGhpcy5TdHlsZS5ydWxlKFwiIFwiLCBcIm1heC13aWR0aFwiLCB1bml0KG9wdGlvbnMud2lkdGgpLCB3aWR0aCk7XG4gICAgfSk7XG4gIH1cbiAgcmVnaXN0ZXJUcmFja1N0eWxlcygpIHtcbiAgICBjb25zdCB7IFN0eWxlOiBTdHlsZTIgfSA9IHRoaXM7XG4gICAgY29uc3Qgc2VsZWN0b3IgPSBgLiR7Q0xBU1NfVFJBQ0t9YDtcbiAgICB0aGlzLmJyZWFrcG9pbnRzLmZvckVhY2goKFt3aWR0aCwgb3B0aW9uc10pID0+IHtcbiAgICAgIFN0eWxlMi5ydWxlKHNlbGVjdG9yLCB0aGlzLnJlc29sdmUoXCJwYWRkaW5nTGVmdFwiKSwgdGhpcy5jc3NQYWRkaW5nKG9wdGlvbnMsIGZhbHNlKSwgd2lkdGgpO1xuICAgICAgU3R5bGUyLnJ1bGUoc2VsZWN0b3IsIHRoaXMucmVzb2x2ZShcInBhZGRpbmdSaWdodFwiKSwgdGhpcy5jc3NQYWRkaW5nKG9wdGlvbnMsIHRydWUpLCB3aWR0aCk7XG4gICAgICBTdHlsZTIucnVsZShzZWxlY3RvciwgXCJoZWlnaHRcIiwgdGhpcy5jc3NUcmFja0hlaWdodChvcHRpb25zKSwgd2lkdGgpO1xuICAgIH0pO1xuICB9XG4gIHJlZ2lzdGVyTGlzdFN0eWxlcygpIHtcbiAgICBjb25zdCB7IFN0eWxlOiBTdHlsZTIgfSA9IHRoaXM7XG4gICAgY29uc3Qgc2VsZWN0b3IgPSBgLiR7Q0xBU1NfTElTVH1gO1xuICAgIHRoaXMuYnJlYWtwb2ludHMuZm9yRWFjaCgoW3dpZHRoLCBvcHRpb25zXSkgPT4ge1xuICAgICAgU3R5bGUyLnJ1bGUoc2VsZWN0b3IsIFwidHJhbnNmb3JtXCIsIHRoaXMuYnVpbGRUcmFuc2xhdGUob3B0aW9ucyksIHdpZHRoKTtcbiAgICAgIGlmICghdGhpcy5jc3NTbGlkZUhlaWdodChvcHRpb25zKSkge1xuICAgICAgICBTdHlsZTIucnVsZShzZWxlY3RvciwgXCJhc3BlY3QtcmF0aW9cIiwgdGhpcy5jc3NBc3BlY3RSYXRpbyhvcHRpb25zKSwgd2lkdGgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHJlZ2lzdGVyU2xpZGVTdHlsZXMoKSB7XG4gICAgY29uc3QgeyBTdHlsZTogU3R5bGUyIH0gPSB0aGlzO1xuICAgIGNvbnN0IHNlbGVjdG9yID0gYC4ke0NMQVNTX1NMSURFfWA7XG4gICAgdGhpcy5icmVha3BvaW50cy5mb3JFYWNoKChbd2lkdGgsIG9wdGlvbnNdKSA9PiB7XG4gICAgICBTdHlsZTIucnVsZShzZWxlY3RvciwgXCJ3aWR0aFwiLCB0aGlzLmNzc1NsaWRlV2lkdGgob3B0aW9ucyksIHdpZHRoKTtcbiAgICAgIFN0eWxlMi5ydWxlKHNlbGVjdG9yLCBcImhlaWdodFwiLCB0aGlzLmNzc1NsaWRlSGVpZ2h0KG9wdGlvbnMpIHx8IFwiMTAwJVwiLCB3aWR0aCk7XG4gICAgICBTdHlsZTIucnVsZShzZWxlY3RvciwgdGhpcy5yZXNvbHZlKFwibWFyZ2luUmlnaHRcIiksIHVuaXQob3B0aW9ucy5nYXApIHx8IFwiMHB4XCIsIHdpZHRoKTtcbiAgICAgIFN0eWxlMi5ydWxlKGAke3NlbGVjdG9yfSA+IGltZ2AsIFwiZGlzcGxheVwiLCBvcHRpb25zLmNvdmVyID8gXCJub25lXCIgOiBcImlubGluZVwiLCB3aWR0aCk7XG4gICAgfSk7XG4gIH1cbiAgYnVpbGRUcmFuc2xhdGUob3B0aW9ucykge1xuICAgIGNvbnN0IHsgcmVzb2x2ZSwgb3JpZW50IH0gPSB0aGlzLkRpcmVjdGlvbjtcbiAgICBjb25zdCB2YWx1ZXMgPSBbXTtcbiAgICB2YWx1ZXMucHVzaCh0aGlzLmNzc09mZnNldENsb25lcyhvcHRpb25zKSk7XG4gICAgdmFsdWVzLnB1c2godGhpcy5jc3NPZmZzZXRHYXBzKG9wdGlvbnMpKTtcbiAgICBpZiAodGhpcy5pc0NlbnRlcihvcHRpb25zKSkge1xuICAgICAgdmFsdWVzLnB1c2godGhpcy5idWlsZENzc1ZhbHVlKG9yaWVudCgtNTApLCBcIiVcIikpO1xuICAgICAgdmFsdWVzLnB1c2goLi4udGhpcy5jc3NPZmZzZXRDZW50ZXIob3B0aW9ucykpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWVzLmZpbHRlcihCb29sZWFuKS5tYXAoKHZhbHVlKSA9PiBgdHJhbnNsYXRlJHtyZXNvbHZlKFwiWFwiKX0oJHt2YWx1ZX0pYCkuam9pbihcIiBcIik7XG4gIH1cbiAgY3NzT2Zmc2V0Q2xvbmVzKG9wdGlvbnMpIHtcbiAgICBjb25zdCB7IHJlc29sdmUsIG9yaWVudCB9ID0gdGhpcy5EaXJlY3Rpb247XG4gICAgY29uc3QgY2xvbmVDb3VudCA9IHRoaXMuZ2V0Q2xvbmVDb3VudCgpO1xuICAgIGlmICh0aGlzLmlzRml4ZWRXaWR0aChvcHRpb25zKSkge1xuICAgICAgY29uc3QgeyB2YWx1ZSwgdW5pdDogdW5pdDIgfSA9IHRoaXMucGFyc2VDc3NWYWx1ZShvcHRpb25zW3Jlc29sdmUoXCJmaXhlZFdpZHRoXCIpXSk7XG4gICAgICByZXR1cm4gdGhpcy5idWlsZENzc1ZhbHVlKG9yaWVudCh2YWx1ZSkgKiBjbG9uZUNvdW50LCB1bml0Mik7XG4gICAgfVxuICAgIGNvbnN0IHBlcmNlbnQgPSAxMDAgKiBjbG9uZUNvdW50IC8gb3B0aW9ucy5wZXJQYWdlO1xuICAgIHJldHVybiBgJHtvcmllbnQocGVyY2VudCl9JWA7XG4gIH1cbiAgY3NzT2Zmc2V0Q2VudGVyKG9wdGlvbnMpIHtcbiAgICBjb25zdCB7IHJlc29sdmUsIG9yaWVudCB9ID0gdGhpcy5EaXJlY3Rpb247XG4gICAgaWYgKHRoaXMuaXNGaXhlZFdpZHRoKG9wdGlvbnMpKSB7XG4gICAgICBjb25zdCB7IHZhbHVlLCB1bml0OiB1bml0MiB9ID0gdGhpcy5wYXJzZUNzc1ZhbHVlKG9wdGlvbnNbcmVzb2x2ZShcImZpeGVkV2lkdGhcIildKTtcbiAgICAgIHJldHVybiBbdGhpcy5idWlsZENzc1ZhbHVlKG9yaWVudCh2YWx1ZSAvIDIpLCB1bml0MildO1xuICAgIH1cbiAgICBjb25zdCB2YWx1ZXMgPSBbXTtcbiAgICBjb25zdCB7IHBlclBhZ2UsIGdhcCB9ID0gb3B0aW9ucztcbiAgICB2YWx1ZXMucHVzaChgJHtvcmllbnQoNTAgLyBwZXJQYWdlKX0lYCk7XG4gICAgaWYgKGdhcCkge1xuICAgICAgY29uc3QgeyB2YWx1ZSwgdW5pdDogdW5pdDIgfSA9IHRoaXMucGFyc2VDc3NWYWx1ZShnYXApO1xuICAgICAgY29uc3QgZ2FwT2Zmc2V0ID0gKHZhbHVlIC8gcGVyUGFnZSAtIHZhbHVlKSAvIDI7XG4gICAgICB2YWx1ZXMucHVzaCh0aGlzLmJ1aWxkQ3NzVmFsdWUob3JpZW50KGdhcE9mZnNldCksIHVuaXQyKSk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZXM7XG4gIH1cbiAgY3NzT2Zmc2V0R2FwcyhvcHRpb25zKSB7XG4gICAgY29uc3QgY2xvbmVDb3VudCA9IHRoaXMuZ2V0Q2xvbmVDb3VudCgpO1xuICAgIGlmIChjbG9uZUNvdW50ICYmIG9wdGlvbnMuZ2FwKSB7XG4gICAgICBjb25zdCB7IG9yaWVudCB9ID0gdGhpcy5EaXJlY3Rpb247XG4gICAgICBjb25zdCB7IHZhbHVlLCB1bml0OiB1bml0MiB9ID0gdGhpcy5wYXJzZUNzc1ZhbHVlKG9wdGlvbnMuZ2FwKTtcbiAgICAgIGlmICh0aGlzLmlzRml4ZWRXaWR0aChvcHRpb25zKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5idWlsZENzc1ZhbHVlKG9yaWVudCh2YWx1ZSAqIGNsb25lQ291bnQpLCB1bml0Mik7XG4gICAgICB9XG4gICAgICBjb25zdCB7IHBlclBhZ2UgfSA9IG9wdGlvbnM7XG4gICAgICBjb25zdCBnYXBzID0gY2xvbmVDb3VudCAvIHBlclBhZ2U7XG4gICAgICByZXR1cm4gdGhpcy5idWlsZENzc1ZhbHVlKG9yaWVudChnYXBzICogdmFsdWUpLCB1bml0Mik7XG4gICAgfVxuICAgIHJldHVybiBcIlwiO1xuICB9XG4gIHJlc29sdmUocHJvcCkge1xuICAgIHJldHVybiBjYW1lbFRvS2ViYWIodGhpcy5EaXJlY3Rpb24ucmVzb2x2ZShwcm9wKSk7XG4gIH1cbiAgY3NzUGFkZGluZyhvcHRpb25zLCByaWdodCkge1xuICAgIGNvbnN0IHsgcGFkZGluZyB9ID0gb3B0aW9ucztcbiAgICBjb25zdCBwcm9wID0gdGhpcy5EaXJlY3Rpb24ucmVzb2x2ZShyaWdodCA/IFwicmlnaHRcIiA6IFwibGVmdFwiLCB0cnVlKTtcbiAgICByZXR1cm4gcGFkZGluZyAmJiB1bml0KHBhZGRpbmdbcHJvcF0gfHwgKGlzT2JqZWN0KHBhZGRpbmcpID8gMCA6IHBhZGRpbmcpKSB8fCBcIjBweFwiO1xuICB9XG4gIGNzc1RyYWNrSGVpZ2h0KG9wdGlvbnMpIHtcbiAgICBsZXQgaGVpZ2h0ID0gXCJcIjtcbiAgICBpZiAodGhpcy5pc1ZlcnRpY2FsKCkpIHtcbiAgICAgIGhlaWdodCA9IHRoaXMuY3NzSGVpZ2h0KG9wdGlvbnMpO1xuICAgICAgYXNzZXJ0KGhlaWdodCwgJ1wiaGVpZ2h0XCIgaXMgbWlzc2luZy4nKTtcbiAgICAgIGhlaWdodCA9IGBjYWxjKCR7aGVpZ2h0fSAtICR7dGhpcy5jc3NQYWRkaW5nKG9wdGlvbnMsIGZhbHNlKX0gLSAke3RoaXMuY3NzUGFkZGluZyhvcHRpb25zLCB0cnVlKX0pYDtcbiAgICB9XG4gICAgcmV0dXJuIGhlaWdodDtcbiAgfVxuICBjc3NIZWlnaHQob3B0aW9ucykge1xuICAgIHJldHVybiB1bml0KG9wdGlvbnMuaGVpZ2h0KTtcbiAgfVxuICBjc3NTbGlkZVdpZHRoKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5hdXRvV2lkdGggPyBcIlwiIDogdW5pdChvcHRpb25zLmZpeGVkV2lkdGgpIHx8ICh0aGlzLmlzVmVydGljYWwoKSA/IFwiXCIgOiB0aGlzLmNzc1NsaWRlU2l6ZShvcHRpb25zKSk7XG4gIH1cbiAgY3NzU2xpZGVIZWlnaHQob3B0aW9ucykge1xuICAgIHJldHVybiB1bml0KG9wdGlvbnMuZml4ZWRIZWlnaHQpIHx8ICh0aGlzLmlzVmVydGljYWwoKSA/IG9wdGlvbnMuYXV0b0hlaWdodCA/IFwiXCIgOiB0aGlzLmNzc1NsaWRlU2l6ZShvcHRpb25zKSA6IHRoaXMuY3NzSGVpZ2h0KG9wdGlvbnMpKTtcbiAgfVxuICBjc3NTbGlkZVNpemUob3B0aW9ucykge1xuICAgIGNvbnN0IGdhcCA9IHVuaXQob3B0aW9ucy5nYXApO1xuICAgIHJldHVybiBgY2FsYygoMTAwJSR7Z2FwICYmIGAgKyAke2dhcH1gfSkvJHtvcHRpb25zLnBlclBhZ2UgfHwgMX0ke2dhcCAmJiBgIC0gJHtnYXB9YH0pYDtcbiAgfVxuICBjc3NBc3BlY3RSYXRpbyhvcHRpb25zKSB7XG4gICAgY29uc3QgeyBoZWlnaHRSYXRpbyB9ID0gb3B0aW9ucztcbiAgICByZXR1cm4gaGVpZ2h0UmF0aW8gPyBgJHsxIC8gaGVpZ2h0UmF0aW99YCA6IFwiXCI7XG4gIH1cbiAgYnVpbGRDc3NWYWx1ZSh2YWx1ZSwgdW5pdDIpIHtcbiAgICByZXR1cm4gYCR7dmFsdWV9JHt1bml0Mn1gO1xuICB9XG4gIHBhcnNlQ3NzVmFsdWUodmFsdWUpIHtcbiAgICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgICBjb25zdCBudW1iZXIgPSBwYXJzZUZsb2F0KHZhbHVlKSB8fCAwO1xuICAgICAgY29uc3QgdW5pdDIgPSB2YWx1ZS5yZXBsYWNlKC9cXGQqKFxcLlxcZCopPy8sIFwiXCIpIHx8IFwicHhcIjtcbiAgICAgIHJldHVybiB7IHZhbHVlOiBudW1iZXIsIHVuaXQ6IHVuaXQyIH07XG4gICAgfVxuICAgIHJldHVybiB7IHZhbHVlLCB1bml0OiBcInB4XCIgfTtcbiAgfVxuICBwYXJzZUJyZWFrcG9pbnRzKCkge1xuICAgIGNvbnN0IHsgYnJlYWtwb2ludHMgfSA9IHRoaXMub3B0aW9ucztcbiAgICB0aGlzLmJyZWFrcG9pbnRzLnB1c2goW1wiZGVmYXVsdFwiLCB0aGlzLm9wdGlvbnNdKTtcbiAgICBpZiAoYnJlYWtwb2ludHMpIHtcbiAgICAgIGZvck93bihicmVha3BvaW50cywgKG9wdGlvbnMsIHdpZHRoKSA9PiB7XG4gICAgICAgIHRoaXMuYnJlYWtwb2ludHMucHVzaChbd2lkdGgsIG1lcmdlKG1lcmdlKHt9LCB0aGlzLm9wdGlvbnMpLCBvcHRpb25zKV0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGlzRml4ZWRXaWR0aChvcHRpb25zKSB7XG4gICAgcmV0dXJuICEhb3B0aW9uc1t0aGlzLkRpcmVjdGlvbi5yZXNvbHZlKFwiZml4ZWRXaWR0aFwiKV07XG4gIH1cbiAgaXNMb29wKCkge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnMudHlwZSA9PT0gTE9PUDtcbiAgfVxuICBpc0NlbnRlcihvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMuZm9jdXMgPT09IFwiY2VudGVyXCIpIHtcbiAgICAgIGlmICh0aGlzLmlzTG9vcCgpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMub3B0aW9ucy50eXBlID09PSBTTElERSkge1xuICAgICAgICByZXR1cm4gIXRoaXMub3B0aW9ucy50cmltU3BhY2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpc1ZlcnRpY2FsKCkge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnMuZGlyZWN0aW9uID09PSBUVEI7XG4gIH1cbiAgYnVpbGRDbGFzc2VzKCkge1xuICAgIGNvbnN0IHsgb3B0aW9ucyB9ID0gdGhpcztcbiAgICByZXR1cm4gW1xuICAgICAgQ0xBU1NfUk9PVCxcbiAgICAgIGAke0NMQVNTX1JPT1R9LS0ke29wdGlvbnMudHlwZX1gLFxuICAgICAgYCR7Q0xBU1NfUk9PVH0tLSR7b3B0aW9ucy5kaXJlY3Rpb259YCxcbiAgICAgIG9wdGlvbnMuZHJhZyAmJiBgJHtDTEFTU19ST09UfS0tZHJhZ2dhYmxlYCxcbiAgICAgIG9wdGlvbnMuaXNOYXZpZ2F0aW9uICYmIGAke0NMQVNTX1JPT1R9LS1uYXZgLFxuICAgICAgQ0xBU1NfQUNUSVZFLFxuICAgICAgIXRoaXMuY29uZmlnLmhpZGRlbiAmJiBDTEFTU19SRU5ERVJFRFxuICAgIF0uZmlsdGVyKEJvb2xlYW4pLmpvaW4oXCIgXCIpO1xuICB9XG4gIGJ1aWxkQXR0cnMoYXR0cnMpIHtcbiAgICBsZXQgYXR0ciA9IFwiXCI7XG4gICAgZm9yT3duKGF0dHJzLCAodmFsdWUsIGtleSkgPT4ge1xuICAgICAgYXR0ciArPSB2YWx1ZSA/IGAgJHtjYW1lbFRvS2ViYWIoa2V5KX09XCIke3ZhbHVlfVwiYCA6IFwiXCI7XG4gICAgfSk7XG4gICAgcmV0dXJuIGF0dHIudHJpbSgpO1xuICB9XG4gIGJ1aWxkU3R5bGVzKHN0eWxlcykge1xuICAgIGxldCBzdHlsZSA9IFwiXCI7XG4gICAgZm9yT3duKHN0eWxlcywgKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgIHN0eWxlICs9IGAgJHtjYW1lbFRvS2ViYWIoa2V5KX06JHt2YWx1ZX07YDtcbiAgICB9KTtcbiAgICByZXR1cm4gc3R5bGUudHJpbSgpO1xuICB9XG4gIHJlbmRlclNsaWRlcygpIHtcbiAgICBjb25zdCB7IHNsaWRlVGFnOiB0YWcgfSA9IHRoaXMuY29uZmlnO1xuICAgIHJldHVybiB0aGlzLnNsaWRlcy5tYXAoKGNvbnRlbnQpID0+IHtcbiAgICAgIHJldHVybiBgPCR7dGFnfSAke3RoaXMuYnVpbGRBdHRycyhjb250ZW50LmF0dHJzKX0+JHtjb250ZW50Lmh0bWwgfHwgXCJcIn08LyR7dGFnfT5gO1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH1cbiAgY292ZXIoY29udGVudCkge1xuICAgIGNvbnN0IHsgc3R5bGVzLCBodG1sID0gXCJcIiB9ID0gY29udGVudDtcbiAgICBpZiAodGhpcy5vcHRpb25zLmNvdmVyICYmICF0aGlzLm9wdGlvbnMubGF6eUxvYWQpIHtcbiAgICAgIGNvbnN0IHNyYyA9IGh0bWwubWF0Y2goLzxpbWcuKj9zcmNcXHMqPVxccyooWydcIl0pKC4rPylcXDEuKj8+Lyk7XG4gICAgICBpZiAoc3JjICYmIHNyY1syXSkge1xuICAgICAgICBzdHlsZXMuYmFja2dyb3VuZCA9IGBjZW50ZXIvY292ZXIgbm8tcmVwZWF0IHVybCgnJHtzcmNbMl19JylgO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBnZW5lcmF0ZUNsb25lcyhjb250ZW50cykge1xuICAgIGNvbnN0IHsgY2xhc3NlcyB9ID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IGNvdW50ID0gdGhpcy5nZXRDbG9uZUNvdW50KCk7XG4gICAgY29uc3Qgc2xpZGVzID0gY29udGVudHMuc2xpY2UoKTtcbiAgICB3aGlsZSAoc2xpZGVzLmxlbmd0aCA8IGNvdW50KSB7XG4gICAgICBwdXNoKHNsaWRlcywgc2xpZGVzKTtcbiAgICB9XG4gICAgcHVzaChzbGlkZXMuc2xpY2UoLWNvdW50KS5yZXZlcnNlKCksIHNsaWRlcy5zbGljZSgwLCBjb3VudCkpLmZvckVhY2goKGNvbnRlbnQsIGluZGV4KSA9PiB7XG4gICAgICBjb25zdCBhdHRycyA9IGFzc2lnbih7fSwgY29udGVudC5hdHRycywgeyBjbGFzczogYCR7Y29udGVudC5hdHRycy5jbGFzc30gJHtjbGFzc2VzLmNsb25lfWAgfSk7XG4gICAgICBjb25zdCBjbG9uZSA9IGFzc2lnbih7fSwgY29udGVudCwgeyBhdHRycyB9KTtcbiAgICAgIGluZGV4IDwgY291bnQgPyBjb250ZW50cy51bnNoaWZ0KGNsb25lKSA6IGNvbnRlbnRzLnB1c2goY2xvbmUpO1xuICAgIH0pO1xuICB9XG4gIGdldENsb25lQ291bnQoKSB7XG4gICAgaWYgKHRoaXMuaXNMb29wKCkpIHtcbiAgICAgIGNvbnN0IHsgb3B0aW9ucyB9ID0gdGhpcztcbiAgICAgIGlmIChvcHRpb25zLmNsb25lcykge1xuICAgICAgICByZXR1cm4gb3B0aW9ucy5jbG9uZXM7XG4gICAgICB9XG4gICAgICBjb25zdCBwZXJQYWdlID0gbWF4KC4uLnRoaXMuYnJlYWtwb2ludHMubWFwKChbLCBvcHRpb25zMl0pID0+IG9wdGlvbnMyLnBlclBhZ2UpKTtcbiAgICAgIHJldHVybiBwZXJQYWdlICogKChvcHRpb25zLmZsaWNrTWF4UGFnZXMgfHwgMSkgKyAxKTtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgcmVuZGVyQXJyb3dzKCkge1xuICAgIGxldCBodG1sID0gXCJcIjtcbiAgICBodG1sICs9IGA8ZGl2IGNsYXNzPVwiJHt0aGlzLm9wdGlvbnMuY2xhc3Nlcy5hcnJvd3N9XCI+YDtcbiAgICBodG1sICs9IHRoaXMucmVuZGVyQXJyb3codHJ1ZSk7XG4gICAgaHRtbCArPSB0aGlzLnJlbmRlckFycm93KGZhbHNlKTtcbiAgICBodG1sICs9IGA8L2Rpdj5gO1xuICAgIHJldHVybiBodG1sO1xuICB9XG4gIHJlbmRlckFycm93KHByZXYpIHtcbiAgICBjb25zdCB7IGNsYXNzZXMsIGkxOG4gfSA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCBhdHRycyA9IHtcbiAgICAgIGNsYXNzOiBgJHtjbGFzc2VzLmFycm93fSAke3ByZXYgPyBjbGFzc2VzLnByZXYgOiBjbGFzc2VzLm5leHR9YCxcbiAgICAgIHR5cGU6IFwiYnV0dG9uXCIsXG4gICAgICBhcmlhTGFiZWw6IHByZXYgPyBpMThuLnByZXYgOiBpMThuLm5leHRcbiAgICB9O1xuICAgIHJldHVybiBgPGJ1dHRvbiAke3RoaXMuYnVpbGRBdHRycyhhdHRycyl9PjxzdmcgeG1sbnM9XCIke1hNTF9OQU1FX1NQQUNFfVwiIHZpZXdCb3g9XCIwIDAgJHtTSVpFfSAke1NJWkV9XCIgd2lkdGg9XCIke1NJWkV9XCIgaGVpZ2h0PVwiJHtTSVpFfVwiPjxwYXRoIGQ9XCIke3RoaXMub3B0aW9ucy5hcnJvd1BhdGggfHwgUEFUSH1cIiAvPjwvc3ZnPjwvYnV0dG9uPmA7XG4gIH1cbiAgaHRtbCgpIHtcbiAgICBjb25zdCB7IHJvb3RDbGFzcywgbGlzdFRhZywgYXJyb3dzLCBiZWZvcmVUcmFjaywgYWZ0ZXJUcmFjaywgc2xpZGVyLCBiZWZvcmVTbGlkZXIsIGFmdGVyU2xpZGVyIH0gPSB0aGlzLmNvbmZpZztcbiAgICBsZXQgaHRtbCA9IFwiXCI7XG4gICAgaHRtbCArPSBgPGRpdiBpZD1cIiR7dGhpcy5pZH1cIiBjbGFzcz1cIiR7dGhpcy5idWlsZENsYXNzZXMoKX0gJHtyb290Q2xhc3MgfHwgXCJcIn1cIj5gO1xuICAgIGh0bWwgKz0gYDxzdHlsZT4ke3RoaXMuU3R5bGUuYnVpbGQoKX08L3N0eWxlPmA7XG4gICAgaWYgKHNsaWRlcikge1xuICAgICAgaHRtbCArPSBiZWZvcmVTbGlkZXIgfHwgXCJcIjtcbiAgICAgIGh0bWwgKz0gYDxkaXYgY2xhc3M9XCJzcGxpZGVfX3NsaWRlclwiPmA7XG4gICAgfVxuICAgIGh0bWwgKz0gYmVmb3JlVHJhY2sgfHwgXCJcIjtcbiAgICBpZiAoYXJyb3dzKSB7XG4gICAgICBodG1sICs9IHRoaXMucmVuZGVyQXJyb3dzKCk7XG4gICAgfVxuICAgIGh0bWwgKz0gYDxkaXYgY2xhc3M9XCJzcGxpZGVfX3RyYWNrXCI+YDtcbiAgICBodG1sICs9IGA8JHtsaXN0VGFnfSBjbGFzcz1cInNwbGlkZV9fbGlzdFwiPmA7XG4gICAgaHRtbCArPSB0aGlzLnJlbmRlclNsaWRlcygpO1xuICAgIGh0bWwgKz0gYDwvJHtsaXN0VGFnfT5gO1xuICAgIGh0bWwgKz0gYDwvZGl2PmA7XG4gICAgaHRtbCArPSBhZnRlclRyYWNrIHx8IFwiXCI7XG4gICAgaWYgKHNsaWRlcikge1xuICAgICAgaHRtbCArPSBgPC9kaXY+YDtcbiAgICAgIGh0bWwgKz0gYWZ0ZXJTbGlkZXIgfHwgXCJcIjtcbiAgICB9XG4gICAgaHRtbCArPSBgPC9kaXY+YDtcbiAgICByZXR1cm4gaHRtbDtcbiAgfVxufVxuXG5leHBvcnQgeyBDTEFTU0VTLCBDTEFTU19BQ1RJVkUsIENMQVNTX0FSUk9XLCBDTEFTU19BUlJPV1MsIENMQVNTX0FSUk9XX05FWFQsIENMQVNTX0FSUk9XX1BSRVYsIENMQVNTX0FVVE9QTEFZLCBDTEFTU19DTE9ORSwgQ0xBU1NfQ09OVEFJTkVSLCBDTEFTU19JTklUSUFMSVpFRCwgQ0xBU1NfTElTVCwgQ0xBU1NfTE9BRElORywgQ0xBU1NfTkVYVCwgQ0xBU1NfUEFHSU5BVElPTiwgQ0xBU1NfUEFHSU5BVElPTl9QQUdFLCBDTEFTU19QQVVTRSwgQ0xBU1NfUExBWSwgQ0xBU1NfUFJFViwgQ0xBU1NfUFJPR1JFU1MsIENMQVNTX1BST0dSRVNTX0JBUiwgQ0xBU1NfUk9PVCwgQ0xBU1NfU0xJREUsIENMQVNTX1NMSURFUiwgQ0xBU1NfU1BJTk5FUiwgQ0xBU1NfVFJBQ0ssIENMQVNTX1ZJU0lCTEUsIEVWRU5UX0FDVElWRSwgRVZFTlRfQVJST1dTX01PVU5URUQsIEVWRU5UX0FSUk9XU19VUERBVEVELCBFVkVOVF9BVVRPUExBWV9QQVVTRSwgRVZFTlRfQVVUT1BMQVlfUExBWSwgRVZFTlRfQVVUT1BMQVlfUExBWUlORywgRVZFTlRfQ0xJQ0ssIEVWRU5UX0RFU1RST1ksIEVWRU5UX0RSQUcsIEVWRU5UX0RSQUdHRUQsIEVWRU5UX0RSQUdHSU5HLCBFVkVOVF9ISURERU4sIEVWRU5UX0lOQUNUSVZFLCBFVkVOVF9MQVpZTE9BRF9MT0FERUQsIEVWRU5UX01PVU5URUQsIEVWRU5UX01PVkUsIEVWRU5UX01PVkVELCBFVkVOVF9OQVZJR0FUSU9OX01PVU5URUQsIEVWRU5UX1BBR0lOQVRJT05fTU9VTlRFRCwgRVZFTlRfUEFHSU5BVElPTl9VUERBVEVELCBFVkVOVF9SRUFEWSwgRVZFTlRfUkVGUkVTSCwgRVZFTlRfUkVQT1NJVElPTkVELCBFVkVOVF9SRVNJWkUsIEVWRU5UX1JFU0laRUQsIEVWRU5UX1NDUk9MTCwgRVZFTlRfU0NST0xMRUQsIEVWRU5UX1NISUZURUQsIEVWRU5UX1NMSURFX0tFWURPV04sIEVWRU5UX1VQREFURUQsIEVWRU5UX1ZJU0lCTEUsIEV2ZW50QnVzLCBFdmVudEludGVyZmFjZSwgUmVxdWVzdEludGVydmFsLCBTVEFUVVNfQ0xBU1NFUywgU3BsaWRlLCBTcGxpZGVSZW5kZXJlciwgU3RhdGUsIFRocm90dGxlLCBTcGxpZGUgYXMgZGVmYXVsdCB9O1xuIiwiZXhwb3J0IGVudW0gRGVzaWduU3R5bGUge1xuICBDb3p5ID0gXCJjb3p5XCIsXG4gIEphcGFuZGkgPSBcImphcGFuZGlcIixcbiAgTW9kZXJuID0gXCJtb2Rlcm5cIixcbiAgRnVzaW9uID0gXCJmdXNpb25cIixcbiAgTmVvQ2xhc3NpYyA9IFwibmVvY2xhc3NpY1wiLFxufVxuXG5leHBvcnQgbmFtZXNwYWNlIERlc2lnblN0eWxlIHtcbiAgZXhwb3J0IGZ1bmN0aW9uIGZyb21TdHJpbmcobmFtZTogc3RyaW5nKTogRGVzaWduU3R5bGUge1xuICAgIGlmIChuYW1lID09PSBcImNvenlcIikge1xuICAgICAgcmV0dXJuIERlc2lnblN0eWxlLkNvenk7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSBcImphcGFuZGlcIikge1xuICAgICAgcmV0dXJuIERlc2lnblN0eWxlLkphcGFuZGk7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSBcIm5lb2NsYXNzaWNcIikge1xuICAgICAgcmV0dXJuIERlc2lnblN0eWxlLk5lb0NsYXNzaWM7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSBcIm1vZGVyblwiKSB7XG4gICAgICByZXR1cm4gRGVzaWduU3R5bGUuTW9kZXJuO1xuICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gXCJmdXNpb25cIikge1xuICAgICAgcmV0dXJuIERlc2lnblN0eWxlLkZ1c2lvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIERlc2lnblN0eWxlLkNvenk7XG4gICAgfVxuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGZyb21OdW1iZXIobnVtYmVyOiBudW1iZXIpOiBEZXNpZ25TdHlsZSB7XG4gICAgcmV0dXJuIG51bWJlciA9PT0gMFxuICAgICAgPyBEZXNpZ25TdHlsZS5Db3p5XG4gICAgICA6IG51bWJlciA9PT0gMVxuICAgICAgPyBEZXNpZ25TdHlsZS5KYXBhbmRpXG4gICAgICA6IG51bWJlciA9PT0gMlxuICAgICAgPyBEZXNpZ25TdHlsZS5GdXNpb25cbiAgICAgIDogbnVtYmVyID09PSAzXG4gICAgICA/IERlc2lnblN0eWxlLk1vZGVyblxuICAgICAgOiBEZXNpZ25TdHlsZS5OZW9DbGFzc2ljO1xuICB9XG59XG4iLCJhYnN0cmFjdCBjbGFzcyBGb3JtYXR0ZXIge1xuICBwdWJsaWMgc3RhdGljIGZvcm1hdEN1cnJlbmN5KG51bTogbnVtYmVyKSB7XG4gICAgcmV0dXJuIEludGwuTnVtYmVyRm9ybWF0KFwidWstVUFcIiwge1xuICAgICAgbWF4aW11bUZyYWN0aW9uRGlnaXRzOiAyLFxuICAgIH0pLmZvcm1hdChudW0pO1xuICB9XG59XG5cbmV4cG9ydCB7IEZvcm1hdHRlciB9O1xuIiwiaW1wb3J0IHsgRm9ybWF0dGVyIH0gZnJvbSBcIi4vRm9ybWF0dGVyXCI7XG5pbXBvcnQgeyBMb2NhbFN0b3JhZ2VIYW5kbGVyIH0gZnJvbSBcIi4vTG9jYWxTdG9yYWdlSGFuZGxlclwiO1xuXG5leHBvcnQgY2xhc3MgRGF0YUNvbGxlY3Rpb25IYW5kbGVyIHtcbiAgcHJpdmF0ZSBfc3RvcmFnZTogTG9jYWxTdG9yYWdlSGFuZGxlcjtcblxuICBjb25zdHJ1Y3RvcihzdG9yYWdlOiBMb2NhbFN0b3JhZ2VIYW5kbGVyKSB7XG4gICAgdGhpcy5fc3RvcmFnZSA9IHN0b3JhZ2U7XG4gIH1cblxuICBhc3luYyBjb2xsZWN0UG9ydHVnYWxDbGllbnREYXRhKGZkOiBGb3JtRGF0YSk6IFByb21pc2U8dm9pZCB8IFJlc3BvbnNlPiB7XG4gICAgcmV0dXJuIGZldGNoKFxuICAgICAgXCJodHRwczovL3NjcmlwdC5nb29nbGUuY29tL21hY3Jvcy9zL0FLZnljYnp5enpZNGJpNHlRb0hkc1RlVm1tOEJ4R1EtYkdXXy1yS19lcmhyRkEwekthazZyUTI3cC1rOU14M0hXazZ2S0VJYXR3L2V4ZWNcIixcbiAgICAgIHtcbiAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgYm9keTogZmQsXG4gICAgICB9XG4gICAgKS5jYXRjaCgoZXJyb3IpID0+IGNvbnNvbGUuZXJyb3IoXCJFcnJvciFcIiwgZXJyb3IubWVzc2FnZSkpO1xuICB9XG5cbiAgYXN5bmMgY29sbGVjdFBvcnR1Z2FsQ2FsY0RhdGEoc3R5bGU6IHN0cmluZyk6IFByb21pc2U8dm9pZCB8IFJlc3BvbnNlPiB7XG4gICAgY29uc3QgYXBwbGlhbmNlc0Jvb2xUb3RhbCA9IEJvb2xlYW4oXG4gICAgICAgIHRoaXMuX3N0b3JhZ2UuZ2V0KFwiYXBwbGlhbmNlc19ib29sX3RvdGFsXCIpXG4gICAgICApLFxuICAgICAgZnVybml0dXJlQm9vbDogYm9vbGVhbiA9IEJvb2xlYW4odGhpcy5fc3RvcmFnZS5nZXQoXCJmdXJuaXR1cmVfYm9vbFwiKSksXG4gICAgICBzcGFjZTogbnVtYmVyID0gdGhpcy5fc3RvcmFnZS5nZXQoXCJzcGFjZVwiKSxcbiAgICAgIGJhdGg6IGJvb2xlYW4gPSBCb29sZWFuKHRoaXMuX3N0b3JhZ2UuZ2V0KFwiYmF0aFwiKSksXG4gICAgICBzaG93ZXI6IGJvb2xlYW4gPSBCb29sZWFuKHRoaXMuX3N0b3JhZ2UuZ2V0KFwic2hvd2VyXCIpKSxcbiAgICAgIGFtb3VudE9mUm9vbXM6IG51bWJlciA9IHRoaXMuX3N0b3JhZ2UuZ2V0KFwiYW1vdW50X29mX3Jvb21zXCIpLFxuICAgICAgYW1vdW50T2ZCYXRocm9vbXM6IG51bWJlciA9IHRoaXMuX3N0b3JhZ2UuZ2V0KFwiYW1vdW50X29mX2JhdGhyb29tc1wiKSxcbiAgICAgIGRlbW9udGFnZTogYm9vbGVhbiA9IEJvb2xlYW4odGhpcy5fc3RvcmFnZS5nZXQoXCJkZW1vbnRhZ2VcIikpLFxuICAgICAgd2luZG93czogbnVtYmVyID0gdGhpcy5fc3RvcmFnZS5nZXQoXCJ3aW5kb3dzX2luc3RhbGxhdGlvblwiKSxcbiAgICAgIGZpbmlzaGluZ01hdGVyaWFsczogYm9vbGVhbiA9IEJvb2xlYW4oXG4gICAgICAgIHRoaXMuX3N0b3JhZ2UuZ2V0KFwiZmluaXNoaW5nX21hdGVyaWFsc1wiKVxuICAgICAgKSxcbiAgICAgIGNlbWVudFNjcmVlZDogYm9vbGVhbiA9IEJvb2xlYW4odGhpcy5fc3RvcmFnZS5nZXQoXCJjZW1lbnRfc2NyZWVkXCIpKSxcbiAgICAgIGJ1aWx0aW5GdXJuaXR1cmU6IGJvb2xlYW4gPSBCb29sZWFuKFxuICAgICAgICB0aGlzLl9zdG9yYWdlLmdldChcImJ1aWx0aW5fZnVyaXR1cmVcIilcbiAgICAgICksXG4gICAgICBoZWF0ZWRGbG9vcmluZzogbnVtYmVyID0gdGhpcy5fc3RvcmFnZS5nZXQoXCJoZWF0ZWRfZmxvb3JpbmdcIiksXG4gICAgICBkZW5vaXNpbmc6IGJvb2xlYW4gPSBCb29sZWFuKHRoaXMuX3N0b3JhZ2UuZ2V0KFwiZGVub2lzaW5nXCIpKSxcbiAgICAgIGVudHJhbmNlRG9vcnM6IGJvb2xlYW4gPSBCb29sZWFuKHRoaXMuX3N0b3JhZ2UuZ2V0KFwiZW50cmFuY2VfZG9vcnNcIikpLFxuICAgICAgY29uZGl0aW9uaW5nOiBudW1iZXIgPSB0aGlzLl9zdG9yYWdlLmdldChcImNvbmRpdGlvbmluZ1wiKSxcbiAgICAgIGZsb29yaW5nOiBzdHJpbmcgPSB0aGlzLl9zdG9yYWdlLmdldChcImZsb29yaW5nXCIpLFxuICAgICAgdHJhbnNwb3J0YXRpb25FeHBlbnNlczogbnVtYmVyID0gdGhpcy5fc3RvcmFnZS5nZXQoXG4gICAgICAgIFwidHJhbnNwb3J0YXRpb25fZXhwZW5zZXNcIlxuICAgICAgKSxcbiAgICAgIGFwcGxpYW5jZXM6IHN0cmluZyA9IHRoaXMuX3N0b3JhZ2UuZ2V0KFwiYXBwbGlhbmNlc1wiKSxcbiAgICAgIHN1bW1lZFByaWNlOiBudW1iZXIgPSB0aGlzLl9zdG9yYWdlLmdldChcInN1bW1lZFByaWNlXCIpLFxuICAgICAgY29zdFBlck1ldHJlOiBudW1iZXIgPSB0aGlzLl9zdG9yYWdlLmdldChcImNvc3RQZXJNZXRyZVwiKSxcbiAgICAgIG1vbnRocyA9XG4gICAgICAgIChzcGFjZSA8PSA0MFxuICAgICAgICAgID8gM1xuICAgICAgICAgIDogc3BhY2UgPD0gODBcbiAgICAgICAgICA/IDRcbiAgICAgICAgICA6IHNwYWNlIDw9IDEwMFxuICAgICAgICAgID8gNVxuICAgICAgICAgIDogc3BhY2UgPD0gMTMwXG4gICAgICAgICAgPyA2XG4gICAgICAgICAgOiBzcGFjZSA8PSAxNTBcbiAgICAgICAgICA/IDdcbiAgICAgICAgICA6IHNwYWNlIDw9IDE3NVxuICAgICAgICAgID8gOFxuICAgICAgICAgIDogOSkgKyAoc3R5bGUgPT0gXCJtb2Rlcm5cIiB8fCBzdHlsZSA9PSBcIm5lb2NsYXNzaWNcIiA/IDEgOiAwKTtcblxuICAgIGNvbnN0IGRhdGFDb2xsZWN0aW9uRmQgPSBuZXcgRm9ybURhdGEoKTtcbiAgICBkYXRhQ29sbGVjdGlvbkZkLmFwcGVuZChcIlN0eWxlXCIsIHN0eWxlKTtcbiAgICBkYXRhQ29sbGVjdGlvbkZkLmFwcGVuZChcbiAgICAgIFwiVG90YWwgY29zdCBWQVRcIixcbiAgICAgIEZvcm1hdHRlci5mb3JtYXRDdXJyZW5jeShzdW1tZWRQcmljZSlcbiAgICApO1xuICAgIGRhdGFDb2xsZWN0aW9uRmQuYXBwZW5kKFxuICAgICAgXCJUb3RhbCBjb3N0XCIsXG4gICAgICBGb3JtYXR0ZXIuZm9ybWF0Q3VycmVuY3koc3VtbWVkUHJpY2UgLyAxLjIzKVxuICAgICk7XG4gICAgZGF0YUNvbGxlY3Rpb25GZC5hcHBlbmQoXG4gICAgICBcIkNvc3QgcGVyIG1ldHJlXCIsXG4gICAgICBGb3JtYXR0ZXIuZm9ybWF0Q3VycmVuY3koY29zdFBlck1ldHJlKVxuICAgICk7XG4gICAgZGF0YUNvbGxlY3Rpb25GZC5hcHBlbmQoXG4gICAgICBcIkNvc3QgcGVyIG1ldHJlIFZBVFwiLFxuICAgICAgRm9ybWF0dGVyLmZvcm1hdEN1cnJlbmN5KGNvc3RQZXJNZXRyZSAqIDEuMjMpXG4gICAgKTtcbiAgICBkYXRhQ29sbGVjdGlvbkZkLmFwcGVuZChcIkFyZWFcIiwgc3BhY2UudG9TdHJpbmcoKSk7XG4gICAgZGF0YUNvbGxlY3Rpb25GZC5hcHBlbmQoXCJOdW1iZXIgb2YgYmVkcm9vbXNcIiwgYW1vdW50T2ZSb29tcy50b1N0cmluZygpKTtcbiAgICBkYXRhQ29sbGVjdGlvbkZkLmFwcGVuZChcbiAgICAgIFwiTnVtYmVyIG9mIGJhdGhyb29tc1wiLFxuICAgICAgYW1vdW50T2ZCYXRocm9vbXMudG9TdHJpbmcoKVxuICAgICk7XG4gICAgZGF0YUNvbGxlY3Rpb25GZC5hcHBlbmQoXCJCYXRoXCIsIGJhdGggPyBcIjFcIiA6IFwiMFwiKTtcbiAgICBkYXRhQ29sbGVjdGlvbkZkLmFwcGVuZChcIlNob3dlclwiLCBzaG93ZXIgPyBcIjFcIiA6IFwiMFwiKTtcbiAgICBkYXRhQ29sbGVjdGlvbkZkLmFwcGVuZChcbiAgICAgIFwiRGlzdGFuY2UgZnJvbSBMaXNib25cIixcbiAgICAgIHRyYW5zcG9ydGF0aW9uRXhwZW5zZXMudG9TdHJpbmcoKVxuICAgICk7XG4gICAgZGF0YUNvbGxlY3Rpb25GZC5hcHBlbmQoXCJGbG9vcmluZ1wiLCBmbG9vcmluZyk7XG4gICAgZGF0YUNvbGxlY3Rpb25GZC5hcHBlbmQoXG4gICAgICBcIkZpbmlzaGluZyBtYXRlcmlhbHNcIixcbiAgICAgIGZpbmlzaGluZ01hdGVyaWFscyA/IFwiMVwiIDogXCIwXCJcbiAgICApO1xuICAgIGRhdGFDb2xsZWN0aW9uRmQuYXBwZW5kKFwiRGlzbWFudGxpbmcgd29ya3NcIiwgZGVtb250YWdlID8gXCIxXCIgOiBcIjBcIik7XG4gICAgZGF0YUNvbGxlY3Rpb25GZC5hcHBlbmQoXCJDZW1lbnQgc2NyZWVkXCIsIGNlbWVudFNjcmVlZCA/IFwiMVwiIDogXCIwXCIpO1xuICAgIGRhdGFDb2xsZWN0aW9uRmQuYXBwZW5kKFwiRW50cmFuY2UgZG9vcnNcIiwgZW50cmFuY2VEb29ycyA/IFwiMVwiIDogXCIwXCIpO1xuICAgIGRhdGFDb2xsZWN0aW9uRmQuYXBwZW5kKFwiU291bmRwcm9vZmluZ1wiLCBkZW5vaXNpbmcgPyBcIjFcIiA6IFwiMFwiKTtcbiAgICBkYXRhQ29sbGVjdGlvbkZkLmFwcGVuZChcIkJ1aWx0LWluIGZ1cm5pdHVyZVwiLCBidWlsdGluRnVybml0dXJlID8gXCIxXCIgOiBcIjBcIik7XG5cbiAgICBkYXRhQ29sbGVjdGlvbkZkLmFwcGVuZChcIlVuZGVyZmxvb3IgaGVhdGluZ1wiLCBoZWF0ZWRGbG9vcmluZy50b1N0cmluZygpKTtcbiAgICBkYXRhQ29sbGVjdGlvbkZkLmFwcGVuZChcIkFpciBjb25kaXRpb25pbmdcIiwgY29uZGl0aW9uaW5nLnRvU3RyaW5nKCkpO1xuICAgIGRhdGFDb2xsZWN0aW9uRmQuYXBwZW5kKFwiV2luZG93IGluc3RhbGxhdGlvblwiLCB3aW5kb3dzLnRvU3RyaW5nKCkpO1xuXG4gICAgZGF0YUNvbGxlY3Rpb25GZC5hcHBlbmQoXCJEZWNvcmF0aW5nXCIsIGZ1cm5pdHVyZUJvb2wgPyBcIjFcIiA6IFwiMFwiKTtcbiAgICBkYXRhQ29sbGVjdGlvbkZkLmFwcGVuZChcbiAgICAgIFwiQXBwbGlhbmNlc1wiLFxuICAgICAgYXBwbGlhbmNlc0Jvb2xUb3RhbCA/IGFwcGxpYW5jZXMgOiBcIjBcIlxuICAgICk7XG4gICAgZGF0YUNvbGxlY3Rpb25GZC5hcHBlbmQoXCJUaW1lIHRvIGNvbXBsZXRpb25cIiwgbW9udGhzLnRvU3RyaW5nKCkpO1xuXG4gICAgcmV0dXJuIGZldGNoKFxuICAgICAgXCJodHRwczovL3NjcmlwdC5nb29nbGUuY29tL21hY3Jvcy9zL0FLZnljYndud2kzU1o4Z0szelNZVzJERW9jNkJ0WTlIUzFzdHBSU0hQVzZwQVRtWDJVYXdldHBDLTc0WVBaNUxqalgyODJLaS9leGVjXCIsXG4gICAgICB7IG1ldGhvZDogXCJQT1NUXCIsIGJvZHk6IGRhdGFDb2xsZWN0aW9uRmQgfVxuICAgICkuY2F0Y2goKGVycm9yKSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XG4gIH1cblxuICBhc3luYyBjb2xsZWN0UG9ydHVnYWxTcGVjaWZpY2F0aW9uRGF0YShcbiAgICBmZDogRm9ybURhdGFcbiAgKTogUHJvbWlzZTx2b2lkIHwgUmVzcG9uc2U+IHtcbiAgICBjb25zdCBzdHlsZTogc3RyaW5nID0gdGhpcy5fc3RvcmFnZS5nZXQoXCJzdHlsZVwiKSxcbiAgICAgIGFwcGxpYW5jZXNCb29sVG90YWwgPSBCb29sZWFuKHRoaXMuX3N0b3JhZ2UuZ2V0KFwiYXBwbGlhbmNlc19ib29sX3RvdGFsXCIpKSxcbiAgICAgIGZ1cm5pdHVyZUJvb2w6IGJvb2xlYW4gPSBCb29sZWFuKHRoaXMuX3N0b3JhZ2UuZ2V0KFwiZnVybml0dXJlX2Jvb2xcIikpLFxuICAgICAgc3BhY2U6IG51bWJlciA9IHRoaXMuX3N0b3JhZ2UuZ2V0KFwic3BhY2VcIiksXG4gICAgICBiYXRoOiBib29sZWFuID0gQm9vbGVhbih0aGlzLl9zdG9yYWdlLmdldChcImJhdGhcIikpLFxuICAgICAgc2hvd2VyOiBib29sZWFuID0gQm9vbGVhbih0aGlzLl9zdG9yYWdlLmdldChcInNob3dlclwiKSksXG4gICAgICBhbW91bnRPZlJvb21zOiBudW1iZXIgPSB0aGlzLl9zdG9yYWdlLmdldChcImFtb3VudF9vZl9yb29tc1wiKSxcbiAgICAgIGFtb3VudE9mQmF0aHJvb21zOiBudW1iZXIgPSB0aGlzLl9zdG9yYWdlLmdldChcImFtb3VudF9vZl9iYXRocm9vbXNcIiksXG4gICAgICBkZW1vbnRhZ2U6IGJvb2xlYW4gPSBCb29sZWFuKHRoaXMuX3N0b3JhZ2UuZ2V0KFwiZGVtb250YWdlXCIpKSxcbiAgICAgIHdpbmRvd3M6IG51bWJlciA9IHRoaXMuX3N0b3JhZ2UuZ2V0KFwid2luZG93c19pbnN0YWxsYXRpb25cIiksXG4gICAgICBmaW5pc2hpbmdNYXRlcmlhbHM6IGJvb2xlYW4gPSBCb29sZWFuKFxuICAgICAgICB0aGlzLl9zdG9yYWdlLmdldChcImZpbmlzaGluZ19tYXRlcmlhbHNcIilcbiAgICAgICksXG4gICAgICBjZW1lbnRTY3JlZWQ6IGJvb2xlYW4gPSBCb29sZWFuKHRoaXMuX3N0b3JhZ2UuZ2V0KFwiY2VtZW50X3NjcmVlZFwiKSksXG4gICAgICBidWlsdGluRnVybml0dXJlOiBib29sZWFuID0gQm9vbGVhbihcbiAgICAgICAgdGhpcy5fc3RvcmFnZS5nZXQoXCJidWlsdGluX2Z1cml0dXJlXCIpXG4gICAgICApLFxuICAgICAgaGVhdGVkRmxvb3Jpbmc6IG51bWJlciA9IHRoaXMuX3N0b3JhZ2UuZ2V0KFwiaGVhdGVkX2Zsb29yaW5nXCIpLFxuICAgICAgZGVub2lzaW5nOiBib29sZWFuID0gQm9vbGVhbih0aGlzLl9zdG9yYWdlLmdldChcImRlbm9pc2luZ1wiKSksXG4gICAgICBlbnRyYW5jZURvb3JzOiBib29sZWFuID0gQm9vbGVhbih0aGlzLl9zdG9yYWdlLmdldChcImVudHJhbmNlX2Rvb3JzXCIpKSxcbiAgICAgIGNvbmRpdGlvbmluZzogbnVtYmVyID0gdGhpcy5fc3RvcmFnZS5nZXQoXCJjb25kaXRpb25pbmdcIiksXG4gICAgICBmbG9vcmluZzogc3RyaW5nID0gdGhpcy5fc3RvcmFnZS5nZXQoXCJmbG9vcmluZ1wiKSxcbiAgICAgIHRyYW5zcG9ydGF0aW9uRXhwZW5zZXM6IG51bWJlciA9IHRoaXMuX3N0b3JhZ2UuZ2V0KFxuICAgICAgICBcInRyYW5zcG9ydGF0aW9uX2V4cGVuc2VzXCJcbiAgICAgICksXG4gICAgICBhcHBsaWFuY2VzOiBzdHJpbmcgPSB0aGlzLl9zdG9yYWdlLmdldChcImFwcGxpYW5jZXNcIiksXG4gICAgICBzdW1tZWRQcmljZTogbnVtYmVyID0gdGhpcy5fc3RvcmFnZS5nZXQoXCJzdW1tZWRQcmljZVwiKSxcbiAgICAgIGNvc3RQZXJNZXRyZTogbnVtYmVyID0gdGhpcy5fc3RvcmFnZS5nZXQoXCJjb3N0UGVyTWV0cmVcIiksXG4gICAgICBtb250aHMgPVxuICAgICAgICAoc3BhY2UgPD0gNDBcbiAgICAgICAgICA/IDNcbiAgICAgICAgICA6IHNwYWNlIDw9IDgwXG4gICAgICAgICAgPyA0XG4gICAgICAgICAgOiBzcGFjZSA8PSAxMDBcbiAgICAgICAgICA/IDVcbiAgICAgICAgICA6IHNwYWNlIDw9IDEzMFxuICAgICAgICAgID8gNlxuICAgICAgICAgIDogc3BhY2UgPD0gMTUwXG4gICAgICAgICAgPyA3XG4gICAgICAgICAgOiBzcGFjZSA8PSAxNzVcbiAgICAgICAgICA/IDhcbiAgICAgICAgICA6IDkpICsgKHN0eWxlID09IFwibW9kZXJuXCIgfHwgc3R5bGUgPT0gXCJuZW9jbGFzc2ljXCIgPyAxIDogMCk7XG5cbiAgICBmZC5hcHBlbmQoXCJTdHlsZVwiLCBzdHlsZSk7XG4gICAgZmQuYXBwZW5kKFwiVG90YWwgY29zdCBWQVRcIiwgRm9ybWF0dGVyLmZvcm1hdEN1cnJlbmN5KHN1bW1lZFByaWNlKSk7XG4gICAgZmQuYXBwZW5kKFwiVG90YWwgY29zdFwiLCBGb3JtYXR0ZXIuZm9ybWF0Q3VycmVuY3koc3VtbWVkUHJpY2UgLyAxLjIzKSk7XG4gICAgZmQuYXBwZW5kKFwiQ29zdCBwZXIgbWV0cmVcIiwgRm9ybWF0dGVyLmZvcm1hdEN1cnJlbmN5KGNvc3RQZXJNZXRyZSkpO1xuICAgIGZkLmFwcGVuZChcbiAgICAgIFwiQ29zdCBwZXIgbWV0cmUgVkFUXCIsXG4gICAgICBGb3JtYXR0ZXIuZm9ybWF0Q3VycmVuY3koY29zdFBlck1ldHJlICogMS4yMylcbiAgICApO1xuICAgIGZkLmFwcGVuZChcIkFyZWFcIiwgc3BhY2UudG9TdHJpbmcoKSk7XG4gICAgZmQuYXBwZW5kKFwiTnVtYmVyIG9mIGJlZHJvb21zXCIsIGFtb3VudE9mUm9vbXMudG9TdHJpbmcoKSk7XG4gICAgZmQuYXBwZW5kKFwiTnVtYmVyIG9mIGJhdGhyb29tc1wiLCBhbW91bnRPZkJhdGhyb29tcy50b1N0cmluZygpKTtcbiAgICBmZC5hcHBlbmQoXCJCYXRoXCIsIGJhdGggPyBcIjFcIiA6IFwiMFwiKTtcbiAgICBmZC5hcHBlbmQoXCJTaG93ZXJcIiwgc2hvd2VyID8gXCIxXCIgOiBcIjBcIik7XG4gICAgZmQuYXBwZW5kKFwiRGlzdGFuY2UgZnJvbSBMaXNib25cIiwgdHJhbnNwb3J0YXRpb25FeHBlbnNlcy50b1N0cmluZygpKTtcbiAgICBmZC5hcHBlbmQoXCJGbG9vcmluZ1wiLCBmbG9vcmluZyk7XG4gICAgZmQuYXBwZW5kKFwiRmluaXNoaW5nIG1hdGVyaWFsc1wiLCBmaW5pc2hpbmdNYXRlcmlhbHMgPyBcIjFcIiA6IFwiMFwiKTtcbiAgICBmZC5hcHBlbmQoXCJEaXNtYW50bGluZyB3b3Jrc1wiLCBkZW1vbnRhZ2UgPyBcIjFcIiA6IFwiMFwiKTtcbiAgICBmZC5hcHBlbmQoXCJDZW1lbnQgc2NyZWVkXCIsIGNlbWVudFNjcmVlZCA/IFwiMVwiIDogXCIwXCIpO1xuICAgIGZkLmFwcGVuZChcIkVudHJhbmNlIGRvb3JzXCIsIGVudHJhbmNlRG9vcnMgPyBcIjFcIiA6IFwiMFwiKTtcbiAgICBmZC5hcHBlbmQoXCJTb3VuZHByb29maW5nXCIsIGRlbm9pc2luZyA/IFwiMVwiIDogXCIwXCIpO1xuICAgIGZkLmFwcGVuZChcIkJ1aWx0LWluIGZ1cm5pdHVyZVwiLCBidWlsdGluRnVybml0dXJlID8gXCIxXCIgOiBcIjBcIik7XG5cbiAgICBmZC5hcHBlbmQoXCJVbmRlcmZsb29yIGhlYXRpbmdcIiwgaGVhdGVkRmxvb3JpbmcudG9TdHJpbmcoKSk7XG4gICAgZmQuYXBwZW5kKFwiQWlyIGNvbmRpdGlvbmluZ1wiLCBjb25kaXRpb25pbmcudG9TdHJpbmcoKSk7XG4gICAgZmQuYXBwZW5kKFwiV2luZG93IGluc3RhbGxhdGlvblwiLCB3aW5kb3dzLnRvU3RyaW5nKCkpO1xuXG4gICAgZmQuYXBwZW5kKFwiRGVjb3JhdGluZ1wiLCBmdXJuaXR1cmVCb29sID8gXCIxXCIgOiBcIjBcIik7XG4gICAgZmQuYXBwZW5kKFwiQXBwbGlhbmNlc1wiLCBhcHBsaWFuY2VzQm9vbFRvdGFsID8gYXBwbGlhbmNlcyA6IFwiMFwiKTtcbiAgICBmZC5hcHBlbmQoXCJUaW1lIHRvIGNvbXBsZXRpb25cIiwgbW9udGhzLnRvU3RyaW5nKCkpO1xuXG4gICAgcmV0dXJuIGZldGNoKFxuICAgICAgXCJodHRwczovL3NjcmlwdC5nb29nbGUuY29tL21hY3Jvcy9zL0FLZnljYnp3TjhSS2RaUlVXREJMTm52VXd4eEs5RlhIVVZQZXFQcEdGSll1OU5UOXpMc2MzNEpLeklIZ0h6MUN3RmJOWUd6cy9leGVjXCIsXG4gICAgICB7IG1ldGhvZDogXCJQT1NUXCIsIGJvZHk6IGZkIH1cbiAgICApLmNhdGNoKChlcnJvcikgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xuICB9XG59XG4iLCJlbnVtIExvY2FsU3RvcmFnZURlc3RpbmF0aW9uIHtcbiAgdWssXG4gIGVuLFxufVxuXG5jbGFzcyBMb2NhbFN0b3JhZ2VIYW5kbGVyIHtcbiAgY29uc3RydWN0b3IoXG4gICAgZGVzdGluYXRpb246IExvY2FsU3RvcmFnZURlc3RpbmF0aW9uLFxuICAgIHNob3VsZEluaXQ6IGJvb2xlYW4gPSBmYWxzZVxuICApIHtcbiAgICBpZiAoc2hvdWxkSW5pdCkge1xuICAgICAgc3dpdGNoIChkZXN0aW5hdGlvbikge1xuICAgICAgICBjYXNlIExvY2FsU3RvcmFnZURlc3RpbmF0aW9uLnVrOlxuICAgICAgICAgIHRoaXMuX2luaXQoKTtcbiAgICAgICAgY2FzZSBMb2NhbFN0b3JhZ2VEZXN0aW5hdGlvbi5lbjpcbiAgICAgICAgICB0aGlzLl9pbml0UG9ydHVnYWwoKTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aGlzLl9pbml0KCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZ2V0KG5hbWU6IHN0cmluZyk6IGFueSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKG5hbWUpKTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIHJldHVybiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShuYW1lKTtcbiAgICB9XG4gIH1cblxuICBzZXQobmFtZTogc3RyaW5nLCB2YWx1ZTogYW55KTogdm9pZCB7XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0obmFtZSwgdmFsdWUudG9TdHJpbmcoKSk7XG4gIH1cblxuICBwcml2YXRlIF9pbml0KCk6IHZvaWQge1xuICAgIHRoaXMuc2V0KFwic3R5bGVcIiwgXCJjb3p5XCIpO1xuICAgIHRoaXMuc2V0KFwiYmF0aFwiLCB0cnVlKTtcbiAgICB0aGlzLnNldChcInNob3dlclwiLCBmYWxzZSk7XG4gICAgdGhpcy5zZXQoXCJjZWlsaW5nXCIsIFwic3RyZXRjaCBjZWlsaW5nXCIpO1xuICAgIHRoaXMuc2V0KFwiZmxvb3JpbmdcIiwgXCJsYW1pbmF0XCIpO1xuICAgIHRoaXMuc2V0KFwiaHlnaWVuaWNfc2hvd2VyXCIsIGZhbHNlKTtcbiAgICB0aGlzLnNldChcInNlY29uZF9neXBzdW1fbGF5ZXJcIiwgZmFsc2UpO1xuICAgIHRoaXMuc2V0KFwiZmxvb3Jfc2NyZWVkXCIsIGZhbHNlKTtcbiAgICB0aGlzLnNldChcImhlYXRlZF9mbG9vcmluZ1wiLCBmYWxzZSk7XG4gICAgdGhpcy5zZXQoXCJkZW5vaXNpbmdcIiwgZmFsc2UpO1xuICAgIHRoaXMuc2V0KFwiZW50cmFuY2VfZG9vcnNcIiwgZmFsc2UpO1xuICAgIHRoaXMuc2V0KFwiY29uZGl0aW9uaW5nXCIsIGZhbHNlKTtcbiAgICB0aGlzLnNldChcImFtb3VudF9vZl9yb29tc1wiLCAyKTtcbiAgICB0aGlzLnNldChcImFtb3VudF9vZl9iYXRocm9vbXNcIiwgMSk7XG4gICAgdGhpcy5zZXQoXCJhcHBsaWFuY2VzXCIsIFwiZ29yZW5qZVwiKTtcbiAgICB0aGlzLnNldChcImFwcGxpYW5jZXNfYm9vbF90b3RhbFwiLCBmYWxzZSk7XG4gICAgdGhpcy5zZXQoXCJmdXJuaXR1cmVfYm9vbFwiLCB0cnVlKTtcbiAgICB0aGlzLnNldChcInNwYWNlXCIsIDUwKTtcbiAgICB0aGlzLnNldChcImNvbG9yXCIsIDEpO1xuICB9XG5cbiAgcHJpdmF0ZSBfaW5pdFBvcnR1Z2FsKCk6IHZvaWQge1xuICAgIHRoaXMuc2V0KFwic3R5bGVcIiwgXCJjb3p5XCIpO1xuICAgIHRoaXMuc2V0KFwiY29sb3JcIiwgMSk7XG4gICAgdGhpcy5zZXQoXCJzcGFjZVwiLCA1MCk7XG4gICAgdGhpcy5zZXQoXCJhbW91bnRfb2Zfcm9vbXNcIiwgMik7XG4gICAgdGhpcy5zZXQoXCJhbW91bnRfb2ZfYmF0aHJvb21zXCIsIDEpO1xuICAgIHRoaXMuc2V0KFwiYmF0aFwiLCB0cnVlKTtcbiAgICB0aGlzLnNldChcInNob3dlclwiLCBmYWxzZSk7XG4gICAgdGhpcy5zZXQoXCJmbG9vcmluZ1wiLCBcImxhbWluYXRcIik7XG4gICAgdGhpcy5zZXQoXCJmaW5pc2hpbmdfbWF0ZXJpYWxzXCIsIGZhbHNlKTtcbiAgICB0aGlzLnNldChcImRlbW9udGFnZVwiLCBmYWxzZSk7XG4gICAgdGhpcy5zZXQoXCJjZW1lbnRfc2NyZWVkXCIsIGZhbHNlKTtcbiAgICB0aGlzLnNldChcImhlYXRlZF9mbG9vcmluZ1wiLCAwKTtcbiAgICB0aGlzLnNldChcImRlbm9pc2luZ1wiLCBmYWxzZSk7XG4gICAgdGhpcy5zZXQoXCJlbnRyYW5jZV9kb29yc1wiLCBmYWxzZSk7XG4gICAgdGhpcy5zZXQoXCJ3aW5kb3dzX2luc3RhbGxhdGlvblwiLCAwKTtcbiAgICB0aGlzLnNldChcImJ1aWx0aW5fZnVybml0dXJlXCIsIGZhbHNlKTtcbiAgICB0aGlzLnNldChcImNvbmRpdGlvbmluZ1wiLCAwKTtcbiAgICB0aGlzLnNldChcImZ1cm5pdHVyZV9ib29sXCIsIGZhbHNlKTtcbiAgICB0aGlzLnNldChcImFwcGxpYW5jZXNfYm9vbF90b3RhbFwiLCBmYWxzZSk7XG4gICAgdGhpcy5zZXQoXCJhcHBsaWFuY2VzXCIsIFwiZ29yZW5qZVwiKTtcbiAgICB0aGlzLnNldChcInRyYW5zcG9ydGF0aW9uX2V4cGVuc2VzXCIsIDUpO1xuICB9XG5cbiAgc3RvcmFnZVRvUmVxdWVzdEJvZHkoc3RvcmFnZTogU3RvcmFnZSk6IHN0cmluZyB7XG4gICAgY29uc3QgcmVzdWx0ID0ge307XG5cbiAgICBmb3IgKGNvbnN0IGtleSBpbiBzdG9yYWdlKSB7XG4gICAgICBpZiAoa2V5ID09PSBcImxlbmd0aFwiIHx8IGtleSA9PSBcImNvc3RQZXJNZXRyZVwiIHx8IGtleSA9PSBcImNvbG9yXCIpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChTdHJpbmcoc3RvcmFnZVtrZXldKSA9PT0gXCJ0cnVlXCIpIHtcbiAgICAgICAgcmVzdWx0W2tleV0gPSAxO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gZWxzZSBpZiAoU3RyaW5nKHN0b3JhZ2Vba2V5XSkgPT09IFwiZmFsc2VcIikge1xuICAgICAgICByZXN1bHRba2V5XSA9IDA7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNGaW5pdGUoTnVtYmVyKHN0b3JhZ2Vba2V5XSkpKSB7XG4gICAgICAgIHJlc3VsdFtrZXldID0gTnVtYmVyKHN0b3JhZ2Vba2V5XSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICByZXN1bHRba2V5XSA9IHN0b3JhZ2Vba2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkocmVzdWx0KTtcbiAgfVxufVxuXG5leHBvcnQgeyBMb2NhbFN0b3JhZ2VIYW5kbGVyLCBMb2NhbFN0b3JhZ2VEZXN0aW5hdGlvbiB9O1xuIiwiaW1wb3J0IFNwbGlkZSBmcm9tIFwiQHNwbGlkZWpzL3NwbGlkZVwiO1xuaW1wb3J0IHsgRGVzaWduU3R5bGUgfSBmcm9tIFwiLi9tb2RlbHMvU3R5bGVcIjtcbmltcG9ydCB7IERhdGFDb2xsZWN0aW9uSGFuZGxlciB9IGZyb20gXCIuL3V0aWxzL0RhdGFDb2xsZWN0aW9uSGFuZGxlclwiO1xuaW1wb3J0IHtcbiAgTG9jYWxTdG9yYWdlRGVzdGluYXRpb24sXG4gIExvY2FsU3RvcmFnZUhhbmRsZXIsXG59IGZyb20gXCIuL3V0aWxzL0xvY2FsU3RvcmFnZUhhbmRsZXJcIjtcbmltcG9ydCBJTWFzayBmcm9tIFwiaW1hc2tcIjtcblxuJChmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IHZ3ID0gd2luZG93LmlubmVyV2lkdGggfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoO1xuICBjb25zdCB2aCA9IHdpbmRvdy5pbm5lckhlaWdodCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0O1xuXG4gIGNvbnN0ICRzcGxpZGVCb2R5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzcGxpZGVCb2R5XCIpO1xuICBjb25zdCAkc3BsaWRlTmV4dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3BsaWRlTmV4dFwiKTtcbiAgY29uc3QgJHNwbGlkZVByZXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNwbGlkZVByZXZcIik7XG4gIGNvbnN0ICRzcGxpZGVOZXh0VGV4dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3BsaWRlTmV4dFRleHRcIik7XG4gIGNvbnN0ICRzcGxpZGVQcmV2VGV4dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3BsaWRlUHJldlRleHRcIik7XG4gIGNvbnN0ICRjb25zdWx0YXRpb25CdXR0b24gPSA8SFRNTElucHV0RWxlbWVudD4oXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzdWJtaXRCdG5cIilcbiAgKTtcbiAgY29uc3QgJG5vZGUgPSA8SFRNTElucHV0RWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm5vZGVcIik7XG5cbiAgY29uc3QgJG5hbWVJbnB1dCA9IDxIVE1MSW5wdXRFbGVtZW50PmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibmFtZVwiKTtcbiAgY29uc3QgJHBob25lSW5wdXQgPSA8SFRNTElucHV0RWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBob25lXCIpO1xuICBjb25zdCAkY29uc3VsdENoZWNrYm94ID0gPEhUTUxJbnB1dEVsZW1lbnQ+KFxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYWdyZWVtZW50Q2hlY2tib3hcIilcbiAgKTtcbiAgY29uc3QgJGFwcGxpYW5jZXNSYWRpbyA9IDxIVE1MSW5wdXRFbGVtZW50PihcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFwcGxpYW5jZXNCb29sXCIpXG4gICk7XG4gIGNvbnN0ICRjb25zdWx0Rm9ybSA9IDxIVE1MRm9ybUVsZW1lbnQ+KFxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwid2YtZm9ybS1jb25zdWx0XCIpXG4gICk7XG5cbiAgLy8gY29uc3QgcGhvbmVNYXNrID0gSU1hc2soZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwaG9uZVwiKSwge1xuICAvLyAgIG1hc2s6IFwiK3szNTF9ICgwMDApIDAwMCAwMDBcIixcbiAgLy8gICBsYXp5OiBmYWxzZSxcbiAgLy8gfSk7XG4gICg8SFRNTElucHV0RWxlbWVudD4oXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaW5wdXRbbmFtZT1cIlBob25lLU51bWJlclwiXScpXG4gICkpLm5hbWUgPSBcIlBob25lIE51bWJlclwiO1xuXG4gIGNvbnN0IHNwbGlkZU9wdGlvbnMgPSB7XG4gICAgYXJyb3dzOiBmYWxzZSxcbiAgICBwYWdpbmF0aW9uOiBmYWxzZSxcbiAgICBzcGVlZDogNTUwLFxuICAgIGZsaWNrUG93ZXI6IDQwMCxcbiAgICBicmVha3BvaW50czoge1xuICAgICAgNDgwOiB7XG4gICAgICAgIHBhZ2luYXRpb246IHRydWUsXG4gICAgICAgIHNwZWVkOiA2NTAsXG4gICAgICB9LFxuICAgIH0sXG4gIH07XG5cbiAgY29uc3QgbG9jYWxTdG9yYWdlSGFuZGxlciA9IG5ldyBMb2NhbFN0b3JhZ2VIYW5kbGVyKFxuICAgIExvY2FsU3RvcmFnZURlc3RpbmF0aW9uLnVrLFxuICAgIGZhbHNlXG4gICk7XG4gIGNvbnN0IGRhdGFIYW5kbGVyID0gbmV3IERhdGFDb2xsZWN0aW9uSGFuZGxlcihsb2NhbFN0b3JhZ2VIYW5kbGVyKTtcbiAgY29uc3Qgc3BsaWRlQ2FsYyA9IG5ldyBTcGxpZGUoXCIuc2xpZGVyLWNvbnRhaW5lci5zcGxpZGVcIiwgc3BsaWRlT3B0aW9ucyk7XG5cbiAgc3BsaWRlQ2FsYy5tb3VudCgpO1xuXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFwiKS5mb3JFYWNoKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgdGhpcy5uYW1lID0gdGhpcy5kYXRhc2V0Lm5hbWU7XG4gICAgfSBjYXRjaCAoXykge31cbiAgfSk7XG5cbiAgaWYgKCQoXCIuc2xpZGVyLXdyYXBwZXIuc3BsaWRlXCIpLmxlbmd0aCkge1xuICAgICQoXCIuZmFjdC1saW5rXCIpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCQodGhpcykuaXMoXCIuYWN0aXZlXCIpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgJChcIi5mYWN0LWNvbnRhaW5lci5hY3RpdmVcIikucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIik7XG4gICAgICAkKFwiLmZhY3QtY29udGFpbmVyXCIpLmVxKCQodGhpcykuaW5kZXgoKSkuYWRkQ2xhc3MoXCJhY3RpdmVcIik7XG4gICAgICAkKFwiLmZhY3QtbGluay5hY3RpdmVcIikucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIik7XG4gICAgICAkKHRoaXMpLmFkZENsYXNzKFwiYWN0aXZlXCIpO1xuICAgIH0pO1xuXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcImRpdi50YWItbmV3XCIpLmZvckVhY2goKGVsZW1lbnQpID0+XG4gICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmNsYXNzTGlzdC5jb250YWlucyhcImFjdGl2ZVwiKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGluZGV4OiBudW1iZXIgPSBwYXJzZUludCh0aGlzLmRhdGFzZXQuc2xpZGVySW5kZXgpO1xuICAgICAgICBjb25zdCBzdHlsZSA9IERlc2lnblN0eWxlLmZyb21OdW1iZXIoaW5kZXgpO1xuXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJkaXYudGFiLW5ldy5hY3RpdmVcIikuY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiKTtcbiAgICAgICAgdGhpcy5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpO1xuXG4gICAgICAgIGRvY3VtZW50XG4gICAgICAgICAgLnF1ZXJ5U2VsZWN0b3I8SFRNTElucHV0RWxlbWVudD4oXG4gICAgICAgICAgICBgZGl2LmNhbGN1bGF0b3ItdGFiW2RhdGEtc2xpZGVyLWluZGV4PVwiJHtpbmRleH1cIl1gXG4gICAgICAgICAgKVxuICAgICAgICAgIC5jbGljaygpO1xuXG4gICAgICAgICQoXCIuc2xpZGVyLWltYWdlLW5ld1wiKS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcbiAgICAgICAgJChcIi5zbGlkZXItaW1hZ2UtbmV3XCIpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmICgkKHRoaXMpLmluZGV4KCkgPT0gaW5kZXgpIHtcbiAgICAgICAgICAgICQodGhpcykuYWRkQ2xhc3MoXCJhY3RpdmVcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLywgLndyYXAtYm9yZGVyLmNhbGN1bGF0b3ItYnRuXG4gICAgICAgICQoXG4gICAgICAgICAgXCIuY2FsY3VsYXRvci1zbGlkZS5zcGxpZGVfX3NsaWRlIC5jYWxjdWxhdG9yLXNsaWRlLCAuY2FsY3VsYXRvci1zbGlkZSAuY29sb3ItdmFyXCJcbiAgICAgICAgKS50b2dnbGUoZmFsc2UpO1xuXG4gICAgICAgICQoXG4gICAgICAgICAgXCIuY2FsY3VsYXRvci1zbGlkZS5zcGxpZGVfX3NsaWRlIC5jYWxjdWxhdG9yLXNsaWRlIC5jb2xvci0xLCAuY2FsY3VsYXRvci1zbGlkZVwiICtcbiAgICAgICAgICAgIGAuJHtzdHlsZX0sIC5zcGVjaWZpY2F0aW9uLSR7c3R5bGV9LmNvbG9yLTFgXG4gICAgICAgICkudG9nZ2xlKHRydWUpO1xuICAgICAgICAkKFwiLmNhbGN1bGF0b3Itc2xpZGUuc3BsaWRlX19zbGlkZSAuY2FsY3VsYXRvci1zbGlkZVwiKVxuICAgICAgICAgIC5lcShpbmRleClcbiAgICAgICAgICAudG9nZ2xlKHRydWUpO1xuICAgICAgfSlcbiAgICApO1xuXG4gICAgY29uc3Qgc3BsaWRlID0gbmV3IFNwbGlkZShcIi5zbGlkZXItd3JhcHBlci5zcGxpZGVcIiwgc3BsaWRlT3B0aW9ucyk7XG4gICAgc3BsaWRlLm1vdW50KCk7XG5cbiAgICBzcGxpZGUub24oXCJtb3ZlXCIsIChpbmRleCwgLi4uXykgPT4ge1xuICAgICAgc2V0VGltZW91dChcbiAgICAgICAgKCkgPT5cbiAgICAgICAgICAoJHNwbGlkZUJvZHkuc3R5bGUuaGVpZ2h0ID0gJChcbiAgICAgICAgICAgIFwiLnNwbGlkZV9fc2xpZGUuaXMtYWN0aXZlIC5hY3RpdmUgaW1nXCJcbiAgICAgICAgICApLmNzcyhcImhlaWdodFwiKSksXG4gICAgICAgIHZ3ID4gNDgwID8gNTUwIDogNzUwXG4gICAgICApO1xuXG4gICAgICBsZXQgdGV4dFByZXY6IHN0cmluZyA9IFwiXCI7XG4gICAgICBsZXQgdGV4dE5leHQ6IHN0cmluZyA9IFwiXCI7XG5cbiAgICAgICRzcGxpZGVQcmV2LmNsYXNzTGlzdC5yZW1vdmUoXCJkaXNhYmxlZFwiKTtcbiAgICAgICRzcGxpZGVOZXh0LmNsYXNzTGlzdC5yZW1vdmUoXCJkaXNhYmxlZFwiKTtcblxuICAgICAgc3dpdGNoIChpbmRleCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgdGV4dFByZXYgPSBcIlwiO1xuICAgICAgICAgIHRleHROZXh0ID0gXCJCZWRyb29tXCI7XG4gICAgICAgICAgJHNwbGlkZVByZXYuY2xhc3NMaXN0LmFkZChcImRpc2FibGVkXCIpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgdGV4dFByZXYgPSBcIkxpdmluZyByb29tXCI7XG4gICAgICAgICAgdGV4dE5leHQgPSBcIktpdGNoZW5cIjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIHRleHRQcmV2ID0gXCJCZWRyb29tXCI7XG4gICAgICAgICAgdGV4dE5leHQgPSBcIlNob3dlclwiO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgdGV4dFByZXYgPSBcIktpdGNoZW5cIjtcbiAgICAgICAgICB0ZXh0TmV4dCA9IFwiQmF0aHJvb21cIjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIHRleHRQcmV2ID0gXCJTaG93ZXJcIjtcbiAgICAgICAgICB0ZXh0TmV4dCA9IFwiXCI7XG4gICAgICAgICAgJHNwbGlkZU5leHQuY2xhc3NMaXN0LmFkZChcImRpc2FibGVkXCIpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgJHNwbGlkZVByZXZUZXh0LmlubmVyVGV4dCA9IHRleHRQcmV2O1xuICAgICAgJHNwbGlkZU5leHRUZXh0LmlubmVyVGV4dCA9IHRleHROZXh0O1xuICAgIH0pO1xuXG4gICAgJHNwbGlkZUJvZHkuc3R5bGUuaGVpZ2h0ID0gJChcIi5zcGxpZGVfX3NsaWRlLmlzLWFjdGl2ZSAuYWN0aXZlIGltZ1wiKS5jc3MoXG4gICAgICBcImhlaWdodFwiXG4gICAgKTtcblxuICAgICRzcGxpZGVOZXh0LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiBzcGxpZGUuZ28oXCI+XCIpKTtcbiAgICAkc3BsaWRlUHJldi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4gc3BsaWRlLmdvKFwiPFwiKSk7XG4gIH1cblxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmNhbGN1bGF0b3ItdGFiXCIpLmZvckVhY2goKGVsZW1lbnQpID0+XG4gICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2dCkgPT4ge1xuICAgICAgLy8vdXNpbmcgY3VycmVudFRhcmdldCBoZXJlIHRvIGF2b2lkIGJ1YmJsaW5nIHRvIGNhcHR1cmUgYWN0dWFsIGVsZW1lbnQgdGhhdCBoYXMgdGhlIGhhbmRsZXJcbiAgICAgIGNvbnN0IHRhcmdldCA9IDxIVE1MRWxlbWVudD5ldnQuY3VycmVudFRhcmdldDtcbiAgICAgIGNvbnN0IGluZGV4OiBudW1iZXIgPSBwYXJzZUludCh0YXJnZXQuZGF0YXNldC5zbGlkZXJJbmRleCk7XG4gICAgICBjb25zdCBzdHlsZSA9IERlc2lnblN0eWxlLmZyb21OdW1iZXIoaW5kZXgpO1xuXG4gICAgICAvLywgLndyYXAtYm9yZGVyLmNhbGN1bGF0b3ItYnRuXG4gICAgICAkKFxuICAgICAgICBcIi5jYWxjdWxhdG9yLXNsaWRlLnNwbGlkZV9fc2xpZGUgLmNhbGN1bGF0b3Itc2xpZGUsIC5jYWxjdWxhdG9yLXNsaWRlIC5jb2xvci12YXJcIlxuICAgICAgKS50b2dnbGUoZmFsc2UpO1xuXG4gICAgICAkKFxuICAgICAgICBcIi5jYWxjdWxhdG9yLXNsaWRlLnNwbGlkZV9fc2xpZGUgLmNhbGN1bGF0b3Itc2xpZGUgLmNvbG9yLTEsIC5jYWxjdWxhdG9yLXNsaWRlXCIgK1xuICAgICAgICAgIGAuJHtzdHlsZX0sIC5zcGVjaWZpY2F0aW9uLSR7c3R5bGV9LmNvbG9yLTFgXG4gICAgICApLnRvZ2dsZSh0cnVlKTtcbiAgICAgICQoXCIuY2FsY3VsYXRvci1zbGlkZS5zcGxpZGVfX3NsaWRlIC5jYWxjdWxhdG9yLXNsaWRlXCIpXG4gICAgICAgIC5lcShpbmRleClcbiAgICAgICAgLnRvZ2dsZSh0cnVlKTtcblxuICAgICAgZG9jdW1lbnRcbiAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoXCIuY2FsY3VsYXRvci10YWIuYWN0aXZlXCIpXG4gICAgICAgIC5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpO1xuICAgICAgdGFyZ2V0LmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XG5cbiAgICAgICQoXCIudGFiLW5ld1wiKS5lcShpbmRleCkudHJpZ2dlcihcImNsaWNrXCIpO1xuXG4gICAgICBnZXRDdXJyZW50Q29sb3JUYWIoKS5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpO1xuICAgICAgZG9jdW1lbnRcbiAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoJy5jb2xvci10YWJbZGF0YS1jb2xvci1pbmRleD1cIjFcIl0nKVxuICAgICAgICAuY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTtcbiAgICAgIGxvY2FsU3RvcmFnZUhhbmRsZXIuc2V0KFwiY29sb3JcIiwgMSk7XG5cbiAgICAgIC8vc3BsaWRlQ2FsYy5yZWZyZXNoKCk7XG4gICAgfSlcbiAgKTtcblxuICAkKFwiLmluY3JlbWVudC1maWVsZCAuaW5jcmVtZW50XCIpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xuICAgIGlmICgkKHRoaXMpLnNpYmxpbmdzKFwiLmluY3JlbWVudC1pbnB1dFwiKS5sZW5ndGggPD0gMCkge1xuICAgICAgJCh0aGlzKS5zaWJsaW5ncyhcIi5pbmNyZW1lbnQtaW5wdXRcIikudmFsKDApO1xuICAgIH1cbiAgfSk7XG5cbiAgJGNvbnN1bHRGb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKGUpID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBpZiAoISRjb25zdWx0Q2hlY2tib3guY2hlY2tlZCkge1xuICAgICAgJChcIi53YXJuaW5nLmFncmVlbWVudGNoZWNrYm94XCIpLnRvZ2dsZSh0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJChcIi53YXJuaW5nLmFncmVlbWVudGNoZWNrYm94XCIpLnRvZ2dsZShmYWxzZSk7XG4gICAgfVxuXG4gICAgLy9UT0RPOiBhZGQgY29ycmVjdCBjaGVja2luZ1xuICAgIGlmICgkcGhvbmVJbnB1dC52YWx1ZS5sZW5ndGggPT0gMCkge1xuICAgICAgJChcIi53YXJuaW5nLmlucHV0cy5waG9uZVwiKS50b2dnbGUodHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICQoXCIud2FybmluZy5pbnB1dHMucGhvbmVcIikudG9nZ2xlKGZhbHNlKTtcbiAgICB9XG5cbiAgICBpZiAoJG5hbWVJbnB1dC52YWx1ZS5sZW5ndGggPT0gMCkge1xuICAgICAgJChcIi53YXJuaW5nLmlucHV0cy5uYW1lXCIpLnRvZ2dsZSh0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJChcIi53YXJuaW5nLmlucHV0cy5uYW1lXCIpLnRvZ2dsZShmYWxzZSk7XG4gICAgfVxuXG4gICAgaWYgKCQoXCIud2FybmluZ1wiKS5pcyhcIjp2aXNpYmxlXCIpKSB7XG4gICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBvbGRCdG5OYW1lID0gJGNvbnN1bHRhdGlvbkJ1dHRvbi52YWx1ZTtcbiAgICAgICRjb25zdWx0YXRpb25CdXR0b24udmFsdWUgPSBcIlBsZWFzZSB3YWl0Li4uXCI7XG4gICAgICBjb25zdCBmZCA9IG5ldyBGb3JtRGF0YSgkY29uc3VsdEZvcm0pO1xuXG4gICAgICBkYXRhSGFuZGxlclxuICAgICAgICAuY29sbGVjdFBvcnR1Z2FsQ2xpZW50RGF0YShmZClcbiAgICAgICAgLnRoZW4oKCkgPT4gKCRjb25zdWx0YXRpb25CdXR0b24udmFsdWUgPSBvbGRCdG5OYW1lKSlcbiAgICAgICAgLmZpbmFsbHkoKCkgPT4gd2luZG93LmxvY2F0aW9uLmFzc2lnbihcIi9rZHlha3VpZW1vXCIpKTtcbiAgICB9XG4gIH0pO1xuXG4gICQoXCIuY2hvaWNlXCIpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xuICAgIGlmICghJCh0aGlzKS5oYXNDbGFzcyhcImNob2ljZUFjdGl2ZVwiKSkge1xuICAgICAgaWYgKCRhcHBsaWFuY2VzUmFkaW8uY2hlY2tlZCkge1xuICAgICAgICAkKFwiLmNob2ljZUFjdGl2ZVwiKS5yZW1vdmVDbGFzcyhcImNob2ljZUFjdGl2ZVwiKTtcbiAgICAgICAgJChcIi5jaG9pY2UtZ3JhZGllbnQuZ3JhZGllbnRyZXZhbXBlZFwiKS5yZW1vdmVDbGFzcyhcImdyYWRpZW50cmV2YW1wZWRcIik7XG4gICAgICB9XG5cbiAgICAgICQodGhpcykuYWRkQ2xhc3MoXCJjaG9pY2VBY3RpdmVcIik7XG4gICAgICAkKHRoaXMpLnBhcmVudCgpLmFkZENsYXNzKFwiZ3JhZGllbnRyZXZhbXBlZFwiKTtcbiAgICB9XG4gIH0pO1xuXG4gICRub2RlLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmNoZWNrZWQgJiYgJChcIi5jaG9pY2VBY3RpdmVcIikubGVuZ3RoKSB7XG4gICAgICAkKFwiLmNob2ljZUFjdGl2ZVwiKS5yZW1vdmVDbGFzcyhcImNob2ljZUFjdGl2ZVwiKTtcbiAgICAgICQoXCIuY2hvaWNlLWdyYWRpZW50LmdyYWRpZW50cmV2YW1wZWRcIikucmVtb3ZlQ2xhc3MoXCJncmFkaWVudHJldmFtcGVkXCIpO1xuICAgIH1cbiAgfSk7XG5cbiAgJGFwcGxpYW5jZXNSYWRpby5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5jaGVja2VkICYmICEkKFwiLmNob2ljZUFjdGl2ZVwiKS5sZW5ndGgpIHtcbiAgICAgICQoXCIuY2hvaWNlXCIpLmZpcnN0KCkuYWRkQ2xhc3MoXCJjaG9pY2VBY3RpdmVcIik7XG4gICAgICAkKFwiLmNob2ljZS1ncmFkaWVudFwiKS5maXJzdCgpLmFkZENsYXNzKFwiZ3JhZGllbnRyZXZhbXBlZFwiKTtcbiAgICB9XG4gIH0pO1xuXG4gICQoXCIuaG92ZXItdGV4dFwiKS5vbihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgb2JqID0gJCh0aGlzKTtcblxuICAgIG9iai5zaWJsaW5ncyhcIi5ob3Zlci1tb2RhbFwiKS5jc3MoXCJkaXNwbGF5XCIsIFwiZmxleFwiKTtcbiAgICBpZiAocGFyc2VJbnQob2JqLnNpYmxpbmdzKFwiLmhvdmVyLW1vZGFsXCIpLmNzcyhcIm9wYWNpdHlcIikpID09IDApIHtcbiAgICAgIGlmICghaXNJblZpZXdwb3J0KG9iai5zaWJsaW5ncyhcIi5ob3Zlci1tb2RhbFwiKS5nZXQoMCkpKSB7XG4gICAgICAgICQoW2RvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgZG9jdW1lbnQuYm9keV0pLmFuaW1hdGUoXG4gICAgICAgICAge1xuICAgICAgICAgICAgc2Nyb2xsVG9wOiBvYmouc2libGluZ3MoXCIuaG92ZXItbW9kYWxcIikub2Zmc2V0KCkudG9wIC0gOTYsXG4gICAgICAgICAgfSxcbiAgICAgICAgICA0NTBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIG9iai5zaWJsaW5ncyhcIi5ob3Zlci1tb2RhbFwiKS5hbmltYXRlKFxuICAgICAgICB7XG4gICAgICAgICAgYm90dG9tOiA0MixcbiAgICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICB9LFxuICAgICAgICAyMDAsXG4gICAgICAgIFwic3dpbmdcIlxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb2JqLnNpYmxpbmdzKFwiLmhvdmVyLW1vZGFsXCIpLmFuaW1hdGUoXG4gICAgICAgIHtcbiAgICAgICAgICBib3R0b206IDEyLFxuICAgICAgICAgIG9wYWNpdHk6IDAsXG4gICAgICAgIH0sXG4gICAgICAgIDIwMCxcbiAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIG9iai5zaWJsaW5ncyhcIi5ob3Zlci1tb2RhbFwiKS50b2dnbGUoZmFsc2UpO1xuICAgICAgICB9XG4gICAgICApO1xuICAgIH1cbiAgfSk7XG5cbiAgJChcImRpdi5zdWJtaXQtY29udGFpbmVyIC5idXR0b25cIikub24oXCJjbGlja1wiLCBmdW5jdGlvbiAoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgIGxldCBzdHlsZTogc3RyaW5nID0gbG9jYWxTdG9yYWdlSGFuZGxlci5nZXQoXCJzdHlsZVwiKTtcbiAgICBsZXQgY29sb3IgPSBsb2NhbFN0b3JhZ2VIYW5kbGVyLmdldChcImNvbG9yXCIpO1xuXG4gICAgaWYgKHN0eWxlID09IG51bGwgfHwgY29sb3IgPT0gbnVsbCkge1xuICAgICAgc3R5bGUgPSBEZXNpZ25TdHlsZS5mcm9tTnVtYmVyKFxuICAgICAgICBwYXJzZUludChcbiAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yPEhUTUxFbGVtZW50PihcImRpdi5jYWxjdWxhdG9yLXRhYi5hY3RpdmVcIilcbiAgICAgICAgICAgIC5kYXRhc2V0LnNsaWRlckluZGV4XG4gICAgICAgIClcbiAgICAgICkudG9TdHJpbmcoKTtcbiAgICAgIGNvbG9yID0gcGFyc2VJbnQoXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3I8SFRNTEVsZW1lbnQ+KFwiZGl2LmNvbG9yLXRhYi5hY3RpdmVcIikuZGF0YXNldFxuICAgICAgICAgIC5jb2xvckluZGV4XG4gICAgICApO1xuXG4gICAgICBsb2NhbFN0b3JhZ2VIYW5kbGVyLnNldChcInN0eWxlXCIsIHN0eWxlKTtcbiAgICAgIGxvY2FsU3RvcmFnZUhhbmRsZXIuc2V0KFwiY29sb3JcIiwgY29sb3IpO1xuICAgIH1cblxuICAgIGRhdGFIYW5kbGVyLmNvbGxlY3RQb3J0dWdhbENhbGNEYXRhKHN0eWxlIGFzIHN0cmluZyk7XG5cbiAgICB3aW5kb3cub3BlbihgL3NwZWNpZmljYXRpb25zLyR7c3R5bGV9LSR7Y29sb3J9YCwgXCJfYmxhbmtcIik7XG4gIH0pO1xuXG4gICQoXCIuY2xvc2luZy1idG5cIikub24oXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IG9iaiA9ICQodGhpcyk7XG4gICAgb2JqLnBhcmVudChcIi5ob3Zlci1tb2RhbFwiKS5hbmltYXRlKFxuICAgICAge1xuICAgICAgICBib3R0b206IDEyLFxuICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgfSxcbiAgICAgIDIwMCxcbiAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgb2JqLnBhcmVudChcIi5ob3Zlci1tb2RhbFwiKS50b2dnbGUoZmFsc2UpO1xuICAgICAgfVxuICAgICk7XG4gIH0pO1xuXG4gIGlmICh2dyA8PSA0ODApIHtcbiAgICBkb2N1bWVudFxuICAgICAgLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbWcuaW1hZ2UtNzVcIilcbiAgICAgIC5mb3JFYWNoKChlbGVtKSA9PiBlbGVtLnJlbW92ZUF0dHJpYnV0ZShcInNpemVzXCIpKTtcbiAgfVxuXG4gIGlmICh2dyA+PSA5OTIpIHtcbiAgICAkKFwiLnByZXZpZXctaW1hZ2UsIC5ibGFja2JnLXRleHRcIikub24oe1xuICAgICAgbW91c2VlbnRlcjogKCkgPT4gJChcIi52aWRlby1jdXJzb3JcIikuY3NzKFwib3BhY2l0eVwiLCAxKSxcbiAgICAgIG1vdXNlbGVhdmU6ICgpID0+ICQoXCIudmlkZW8tY3Vyc29yXCIpLmNzcyhcIm9wYWNpdHlcIiwgMCksXG4gICAgfSk7XG4gICAgJChcIi5wcm9qZWN0LWxpbmstaW1hZ2VcIikub24oe1xuICAgICAgbW91c2VlbnRlcjogKCkgPT4gJChcIi5wcm9qZWN0LWRvdFwiKS5jc3MoXCJvcGFjaXR5XCIsIDEpLFxuICAgICAgbW91c2VsZWF2ZTogKCkgPT4gJChcIi5wcm9qZWN0LWRvdFwiKS5jc3MoXCJvcGFjaXR5XCIsIDApLFxuICAgIH0pO1xuICAgICQoXCIuYXJyb3ctcmlnaHRcIikub24oe1xuICAgICAgbW91c2VlbnRlcjogKCkgPT4gJChcIi5zbWFsbC1ob3Zlci5yaWdodFwiKS5jc3MoXCJvcGFjaXR5XCIsIDEpLFxuICAgICAgbW91c2VsZWF2ZTogKCkgPT4gJChcIi5zbWFsbC1ob3Zlci5yaWdodFwiKS5jc3MoXCJvcGFjaXR5XCIsIDApLFxuICAgIH0pO1xuICAgICQoXCIuYXJyb3ctbGVmdFwiKS5vbih7XG4gICAgICBtb3VzZWVudGVyOiAoKSA9PiAkKFwiLnNtYWxsLWhvdmVyLmxlZnRcIikuY3NzKFwib3BhY2l0eVwiLCAxKSxcbiAgICAgIG1vdXNlbGVhdmU6ICgpID0+ICQoXCIuc21hbGwtaG92ZXIubGVmdFwiKS5jc3MoXCJvcGFjaXR5XCIsIDApLFxuICAgIH0pO1xuXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5jb2xvci10YWJcIikuZm9yRWFjaCgoZWxlbWVudCkgPT5cbiAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gPEhUTUxFbGVtZW50PmV2dC5jdXJyZW50VGFyZ2V0O1xuICAgICAgICBjb25zdCBjb2xvciA9IHBhcnNlSW50KHRhcmdldC5kYXRhc2V0LmNvbG9ySW5kZXgpO1xuICAgICAgICBjb25zdCBwcmV2aW91c0NvbG9yID0gPG51bWJlcj5sb2NhbFN0b3JhZ2VIYW5kbGVyLmdldChcImNvbG9yXCIpO1xuXG4gICAgICAgIGlmIChjb2xvciAhPSBwcmV2aW91c0NvbG9yKSB7XG4gICAgICAgICAgZ2V0Q3VycmVudENvbG9yVGFiKCkuY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiKTtcbiAgICAgICAgICB0YXJnZXQuY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTtcblxuICAgICAgICAgIGxvY2FsU3RvcmFnZUhhbmRsZXIuc2V0KFwiY29sb3JcIiwgY29sb3IpO1xuXG4gICAgICAgICAgJChcIi5jb2xvci12YXJcIikudG9nZ2xlKGZhbHNlKTtcblxuICAgICAgICAgIC8vY29uc3Qgc3R5bGUgPSBEZXNpZ25TdHlsZS5mcm9tU3RyaW5nKDxzdHJpbmc+bG9jYWxTdG9yYWdlSGFuZGxlci5nZXQoXCJzdHlsZVwiKSk7XG4gICAgICAgICAgLyosIC53cmFwLWJvcmRlci5jYWxjdWxhdG9yLWJ0bi5zcGVjaWZpY2F0aW9uLSR7c3R5bGV9LmNvbG9yLSR7XG4gICAgICAgICAgICAgIGNvbG9yICsgMVxuICAgICAgICAgICAgfWAqL1xuICAgICAgICAgICQoYC5jYWxjdWxhdG9yLXNsaWRlIC5jb2xvci0ke2NvbG9yfWApLnRvZ2dsZSh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICApO1xuXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5jYWxjdWxhdG9yLXNsaWRlci1vcHRpb25cIikuZm9yRWFjaCgoZWxlbWVudCkgPT5cbiAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gPEhUTUxFbGVtZW50PmV2dC5jdXJyZW50VGFyZ2V0O1xuXG4gICAgICAgIGRvY3VtZW50XG4gICAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoXCIuY2FsY3VsYXRvci1zbGlkZXItb3B0aW9uLmFjdGl2ZVwiKVxuICAgICAgICAgIC5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpO1xuICAgICAgICB0aGlzLmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XG5cbiAgICAgICAgc3BsaWRlQ2FsYy5nbyhwYXJzZUludCh0YXJnZXQuZGF0YXNldC5zbGlkZXJJbmRleCkpO1xuICAgICAgfSlcbiAgICApO1xuXG4gICAgJChcIi5jYWxjdWxhdG9yLWFycm93XCIpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCQodGhpcykuaXMoXCIuYXJyb3ctcmlnaHRcIikpIHtcbiAgICAgICAgc3BsaWRlQ2FsYy5nbyhcIj5cIik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzcGxpZGVDYWxjLmdvKFwiPFwiKTtcbiAgICAgIH1cblxuICAgICAgZG9jdW1lbnRcbiAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoXCIuY2FsY3VsYXRvci1zbGlkZXItb3B0aW9uLmFjdGl2ZVwiKVxuICAgICAgICAuY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiKTtcbiAgICAgICQoYC5jYWxjdWxhdG9yLXNsaWRlci1vcHRpb246ZXEoJHtzcGxpZGVDYWxjLmluZGV4fSlgKS5hZGRDbGFzcyhcImFjdGl2ZVwiKTtcbiAgICB9KTtcblxuICAgICQoXCIuY2FsY3VsYXRvciBmb3JtXCIpLm9uKFwia2V5ZG93blwiLCAoZSkgPT4ge1xuICAgICAgaWYgKGUua2V5ID09IFwiRW50ZXJcIikge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgZG9jdW1lbnRcbiAgICAgIC5xdWVyeVNlbGVjdG9yPEhUTUxFbGVtZW50PignZGl2LmNhbGN1bGF0b3ItdGFiW2RhdGEtc2xpZGVyLWluZGV4PVwiMVwiXScpXG4gICAgICAuY2xpY2soKTtcbiAgfVxuXG4gIGNvbnN0ICRtb2RhbENvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3I8SFRNTEVsZW1lbnQ+KFxuICAgIFwiZGl2Lm1vZGFsLWNvbnRhaW5lclwiXG4gICk7XG4gIGNvbnN0ICRtb2JpbGVOYXZNZW51ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcjxIVE1MRWxlbWVudD4oXG4gICAgXCJuYXYubmF2LW1lbnUudy1uYXYtbWVudVwiXG4gICk7XG4gIGNvbnN0ICRkaW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yPEhUTUxFbGVtZW50PihcImRpdi5kaW1cIik7XG4gIGNvbnN0ICRtb2JpbGVOYXZNZW51Q2xvc2VCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yPEhUTUxFbGVtZW50PihcbiAgICBcImEubW9iaWxlLW5hdi1idXR0b25bZGF0YS1jbGljay1hY3Rpb249J25hdmlnYXRpb24tY2xvc2UnXVwiXG4gICk7XG4gIGNvbnN0ICRtb2JpbGVOYXZNZW51T3BlbkJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3I8SFRNTEVsZW1lbnQ+KFxuICAgIFwiYS5tb2JpbGUtbmF2LWJ1dHRvbltkYXRhLWNsaWNrLWFjdGlvbj0nbmF2aWdhdGlvbi1vcGVuJ11cIlxuICApO1xuXG4gIC8vL2NvbnN1bHRhdGlvbiBtb2RhbCBsb2dpY1xuICBkb2N1bWVudFxuICAgIC5xdWVyeVNlbGVjdG9yQWxsKCcuZ3JhZGllbnRyZXZhbXBlZFtkYXRhLWNsaWNrLWFjdGlvbj1cImNvbnN1bHRhdGlvblwiXScpXG4gICAgLmZvckVhY2goKGVsZW1lbnQpID0+XG4gICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgICRtb2RhbENvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwic2hvd25cIik7XG4gICAgICAgIC8vc2V0U2VhcmNoSGFzaChcImNvbnN1bHRhdGlvblwiKTtcbiAgICAgIH0pXG4gICAgKTtcblxuICBkb2N1bWVudFxuICAgIC5xdWVyeVNlbGVjdG9yKFwiLmNyb3NzLWJ1dHRvbi5tb2RhbFwiKVxuICAgIC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgaGlkZUNvbnN1bHRNb2RhbCk7XG5cbiAgJG1vZGFsQ29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBoaWRlQ29uc3VsdE1vZGFsKTtcblxuICBmdW5jdGlvbiBoaWRlQ29uc3VsdE1vZGFsKCkge1xuICAgICRtb2RhbENvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKFwic2hvd25cIik7XG4gICAgLy9jbGVhclNlYXJjaEhhc2goKTtcbiAgfVxuXG4gIGRvY3VtZW50XG4gICAgLnF1ZXJ5U2VsZWN0b3IoXCJkaXYuY29uc3VsdC1tb2RhbFwiKVxuICAgIC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfSk7XG5cbiAgLy8vbW9iaWxlIG5hdmlnYXRpb24gbW9kYWxcblxuICAkbW9iaWxlTmF2TWVudU9wZW5CdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAkbW9iaWxlTmF2TWVudS5jbGFzc0xpc3QuYWRkKFwic2hvd25cIik7XG4gICAgJGRpbS5jbGFzc0xpc3QuYWRkKFwic2hvd25cIik7XG4gICAgdGhpcy5jbGFzc0xpc3QucmVtb3ZlKFwic2hvd25cIik7XG4gICAgJG1vYmlsZU5hdk1lbnVDbG9zZUJ1dHRvbi5jbGFzc0xpc3QuYWRkKFwic2hvd25cIik7XG4gIH0pO1xuXG4gICRtb2JpbGVOYXZNZW51Q2xvc2VCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAkbW9iaWxlTmF2TWVudS5jbGFzc0xpc3QucmVtb3ZlKFwic2hvd25cIik7XG4gICAgJGRpbS5jbGFzc0xpc3QucmVtb3ZlKFwic2hvd25cIik7XG4gICAgdGhpcy5jbGFzc0xpc3QucmVtb3ZlKFwic2hvd25cIik7XG4gICAgJG1vYmlsZU5hdk1lbnVPcGVuQnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJzaG93blwiKTtcbiAgfSk7XG5cbiAgJGRpbS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4gJG1vYmlsZU5hdk1lbnVDbG9zZUJ1dHRvbi5jbGljaygpKTtcblxuICAvLy9yZW1vdmVkIGR1ZSB0byB0aGVzZSBlbGVtZW50cyBiZWluZyBoaWRkZW4sIG1heSBiZSBicm91Z2h0IGJhY2tcbiAgLyppZiAodncgPD0gNzY3KSB7XG4gICAgJChcIi5zdGFyXCIpLm9uKFwibW91c2VsZWF2ZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKFwiaGlkZGVuXCIpO1xuICAgICAgJCh0aGlzKS5zaWJsaW5ncyhcIi5pbWFnZS1wcmljZVwiKS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcbiAgICB9KTtcblxuICAgICQoXCIuaW1hZ2UtcHJpY2VcIikub24oXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoJCh0aGlzKS5pcyhcIi5hY3RpdmVcIikpIHtcbiAgICAgICAgJCh0aGlzKS5zaWJsaW5ncyhcIi5zdGFyXCIpLnJlbW92ZUNsYXNzKFwiaGlkZGVuXCIpO1xuICAgICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgJChcIi5zdGFyXCIpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCQodGhpcykuaXMoXCIuaGlkZGVuXCIpKSB7XG4gICAgICAgICQodGhpcykucmVtb3ZlQ2xhc3MoXCJoaWRkZW5cIik7XG4gICAgICAgICQodGhpcykuc2libGluZ3MoXCIuaW1hZ2UtcHJpY2VcIikucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkKHRoaXMpLmFkZENsYXNzKFwiaGlkZGVuXCIpO1xuICAgICAgICAkKHRoaXMpLnNpYmxpbmdzKFwiLmltYWdlLXByaWNlXCIpLmFkZENsYXNzKFwiYWN0aXZlXCIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9Ki9cblxuICAvKmRvY3VtZW50XG4gICAgLnF1ZXJ5U2VsZWN0b3JBbGwoXCIuY2FsY3VsYXRlXCIpXG4gICAgLmZvckVhY2goKGVsZW0pID0+XG4gICAgICBlbGVtLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiBzZXRTZWFyY2hIYXNoKFwiY2FsY3VsYXRlXCIpKVxuICAgICk7XG5cbiAgZG9jdW1lbnRcbiAgICAucXVlcnlTZWxlY3RvckFsbChcIi5jcm9zc2J0bi5jYWxjXCIpXG4gICAgLmZvckVhY2goKGVsZW0pID0+IGVsZW0uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGNsZWFyU2VhcmNoSGFzaCkpO1xuXG4gIGZ1bmN0aW9uIGNsZWFyU2VhcmNoSGFzaCgpIHtcbiAgICBoaXN0b3J5LnB1c2hTdGF0ZShcbiAgICAgIFwiXCIsXG4gICAgICBkb2N1bWVudC50aXRsZSxcbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSArIHdpbmRvdy5sb2NhdGlvbi5zZWFyY2hcbiAgICApO1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0U2VhcmNoSGFzaChoYXNoOiBzdHJpbmcpIHtcbiAgICBkb2N1bWVudC5sb2NhdGlvbi5oYXNoID0gaGFzaDtcbiAgfSovXG5cbiAgZnVuY3Rpb24gaXNJblZpZXdwb3J0KGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogYm9vbGVhbiB7XG4gICAgY29uc3QgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgcmV0dXJuIChcbiAgICAgIHJlY3QudG9wID49IDAgJiYgcmVjdC5sZWZ0ID49IDAgJiYgcmVjdC5ib3R0b20gPD0gdmggJiYgcmVjdC5yaWdodCA8PSB2d1xuICAgICk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRDdXJyZW50Q29sb3JUYWIoKTogSFRNTEVsZW1lbnQge1xuICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxuICAgICAgYC5jb2xvci10YWJbZGF0YS1jb2xvci1pbmRleD1cIiR7bG9jYWxTdG9yYWdlSGFuZGxlci5nZXQoXCJjb2xvclwiKX1cIl1gXG4gICAgKTtcbiAgfVxufSk7XG4iXSwibmFtZXMiOlsiUFJPSkVDVF9DT0RFIiwiREFUQV9BVFRSSUJVVEUiLCJTVEFURVMiLCJDUkVBVEVEIiwiTU9VTlRFRCIsIklETEUiLCJNT1ZJTkciLCJERVNUUk9ZRUQiLCJlbXB0eSIsImFycmF5IiwibGVuZ3RoIiwiaXNPYmplY3QiLCJzdWJqZWN0IiwiaXNOdWxsIiwiaXNBcnJheSIsIkFycmF5IiwiaXNTdHJpbmciLCJpc1VuZGVmaW5lZCIsImlzSFRNTEVsZW1lbnQiLCJIVE1MRWxlbWVudCIsInRvQXJyYXkiLCJ2YWx1ZSIsImZvckVhY2giLCJ2YWx1ZXMiLCJpdGVyYXRlZSIsImluY2x1ZGVzIiwiaW5kZXhPZiIsInB1c2giLCJpdGVtcyIsImFycmF5UHJvdG8iLCJwcm90b3R5cGUiLCJzbGljZSIsImFycmF5TGlrZSIsInN0YXJ0IiwiZW5kIiwiY2FsbCIsInRvZ2dsZUNsYXNzIiwiZWxtIiwiY2xhc3NlcyIsImFkZCIsIm5hbWUiLCJjbGFzc0xpc3QiLCJhZGRDbGFzcyIsInNwbGl0IiwiYXBwZW5kIiwicGFyZW50IiwiY2hpbGRyZW4iLCJhcHBlbmRDaGlsZCIsImJpbmQiLCJiZWZvcmUiLCJub2RlcyIsInJlZiIsIm5vZGUiLCJwYXJlbnROb2RlIiwiaW5zZXJ0QmVmb3JlIiwibWF0Y2hlcyIsInNlbGVjdG9yIiwiZmlsdGVyIiwiY2hpbGQiLCJmaXJzdEVsZW1lbnRDaGlsZCIsImZvck93biIsIm9iamVjdCIsInJpZ2h0Iiwia2V5cyIsIk9iamVjdCIsInJldmVyc2UiLCJpIiwia2V5IiwiYXJndW1lbnRzIiwic291cmNlIiwibWVyZ2UiLCJyZW1vdmVBdHRyaWJ1dGUiLCJhdHRycyIsImF0dHIiLCJzZXRBdHRyaWJ1dGUiLCJ2YWx1ZTIiLCJTdHJpbmciLCJjcmVhdGUiLCJ0YWciLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzdHlsZSIsInByb3AiLCJnZXRDb21wdXRlZFN0eWxlIiwic3R5bGUyIiwiZGlzcGxheSIsImRpc3BsYXkyIiwiZ2V0QXR0cmlidXRlIiwiaGFzQ2xhc3MiLCJjbGFzc05hbWUiLCJjb250YWlucyIsInJlY3QiLCJ0YXJnZXQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJyZW1vdmUiLCJyZW1vdmVDaGlsZCIsInBhcnNlSHRtbCIsImh0bWwiLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJib2R5IiwicHJldmVudCIsImUiLCJzdG9wUHJvcGFnYXRpb24iLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsInF1ZXJ5IiwicXVlcnlTZWxlY3RvciIsInF1ZXJ5QWxsIiwicXVlcnlTZWxlY3RvckFsbCIsInJlbW92ZUNsYXNzIiwidW5pdCIsImFzc2VydCIsImNvbmRpdGlvbiIsIm1lc3NhZ2UiLCJFcnJvciIsIm5leHRUaWNrIiwiY2FsbGJhY2siLCJzZXRUaW1lb3V0Iiwibm9vcCIsInJhZiIsImZ1bmMiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJtaW4iLCJtYXgiLCJmbG9vciIsImNlaWwiLCJhYnMiLCJNYXRoIiwiYmV0d2VlbiIsIm51bWJlciIsIm1pbk9yTWF4IiwibWF4T3JNaW4iLCJleGNsdXNpdmUiLCJtaW5pbXVtIiwibWF4aW11bSIsImNsYW1wIiwieCIsInkiLCJzaWduIiwiZm9ybWF0Iiwic3RyaW5nIiwicmVwbGFjZW1lbnRzIiwicmVwbGFjZW1lbnQiLCJyZXBsYWNlIiwicGFkIiwiaWRzIiwidW5pcXVlSWQiLCJwcmVmaXgiLCJFVkVOVF9NT1VOVEVEIiwiRVZFTlRfUkVBRFkiLCJFVkVOVF9NT1ZFIiwiRVZFTlRfTU9WRUQiLCJFVkVOVF9TSElGVEVEIiwiRVZFTlRfQ0xJQ0siLCJFVkVOVF9WSVNJQkxFIiwiRVZFTlRfSElEREVOIiwiRVZFTlRfU0xJREVfS0VZRE9XTiIsIkVWRU5UX1JFRlJFU0giLCJFVkVOVF9VUERBVEVEIiwiRVZFTlRfUkVTSVpFIiwiRVZFTlRfUkVTSVpFRCIsIkVWRU5UX1JFUE9TSVRJT05FRCIsIkVWRU5UX1NDUk9MTCIsIkVWRU5UX1NDUk9MTEVEIiwiRVZFTlRfREVTVFJPWSIsIkVWRU5UX05BVklHQVRJT05fTU9VTlRFRCIsIkVWRU5UX0xBWllMT0FEX0xPQURFRCIsIkV2ZW50SW50ZXJmYWNlIiwiU3BsaWRlMiIsImV2ZW50IiwibGlzdGVuZXJzIiwidW5iaW5kIiwidGFyZ2V0cyIsImV2ZW50cyIsImZvckVhY2hFdmVudCIsImV2ZW50MiIsImxpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImRlc3Ryb3kiLCJkYXRhIiwib2ZmQnkiLCJvbiIsInByaW9yaXR5Iiwib2ZmIiwiZW1pdCIsIm9wdGlvbnMiLCJhZGRFdmVudExpc3RlbmVyIiwiUmVxdWVzdEludGVydmFsIiwiaW50ZXJ2YWwiLCJvbkludGVydmFsIiwib25VcGRhdGUiLCJsaW1pdCIsIm5vdyIsIkRhdGUiLCJzdGFydFRpbWUiLCJpZCIsInJhdGUiLCJwYXVzZWQiLCJjb3VudCIsInVwZGF0ZSIsImVsYXBzZWQiLCJwYXVzZSIsImNhbmNlbCIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwicmVzdW1lIiwicmV3aW5kIiwic2V0IiwidGltZSIsImlzUGF1c2VkIiwiVGhyb3R0bGUiLCJkdXJhdGlvbiIsImFwcGx5IiwidGhpcyIsIlRUQiIsIk9SSUVOVEFUSU9OX01BUCIsIm1hcmdpblJpZ2h0IiwiYXV0b1dpZHRoIiwiZml4ZWRXaWR0aCIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0Iiwid2lkdGgiLCJsZWZ0IiwiWCIsIlkiLCJBcnJvd0xlZnQiLCJBcnJvd1JpZ2h0IiwiRGlyZWN0aW9uIiwiQ29tcG9uZW50czIiLCJyZXNvbHZlIiwiYXhpc09ubHkiLCJkaXJlY3Rpb24iLCJvcmllbnQiLCJDTEFTU19ST09UIiwiQ0xBU1NfU0xJREVSIiwiQ0xBU1NfVFJBQ0siLCJDTEFTU19MSVNUIiwiQ0xBU1NfU0xJREUiLCJDTEFTU19DTE9ORSIsIkNMQVNTX0NPTlRBSU5FUiIsIkNMQVNTX0FSUk9XUyIsIkNMQVNTX0FSUk9XIiwiQ0xBU1NfQVJST1dfUFJFViIsIkNMQVNTX0FSUk9XX05FWFQiLCJDTEFTU19QQUdJTkFUSU9OIiwiQ0xBU1NfUFJPR1JFU1MiLCJDTEFTU19QUk9HUkVTU19CQVIiLCJDTEFTU19BVVRPUExBWSIsIkNMQVNTX1BMQVkiLCJDTEFTU19QQVVTRSIsIkNMQVNTX0FDVElWRSIsIkNMQVNTX1BSRVYiLCJDTEFTU19ORVhUIiwiQ0xBU1NfVklTSUJMRSIsIkNMQVNTX0xPQURJTkciLCJTVEFUVVNfQ0xBU1NFUyIsIkNMQVNTRVMiLCJzbGlkZSIsImNsb25lIiwiYXJyb3dzIiwiYXJyb3ciLCJwcmV2IiwibmV4dCIsInBhZ2luYXRpb24iLCJwYWdlIiwic3Bpbm5lciIsIlJPTEUiLCJBUklBX0NPTlRST0xTIiwiQVJJQV9DVVJSRU5UIiwiQVJJQV9MQUJFTCIsIkFSSUFfSElEREVOIiwiVEFCX0lOREVYIiwiQVJJQV9PUklFTlRBVElPTiIsIkFMTF9BVFRSSUJVVEVTIiwiU0xJREUiLCJMT09QIiwiRkFERSIsIlNsaWRlJDEiLCJpbmRleCIsInNsaWRlSW5kZXgiLCJkZXN0cm95RXZlbnRzIiwiQ29tcG9uZW50cyIsInJvb3QiLCJpc05hdmlnYXRpb24iLCJ1cGRhdGVPbk1vdmUiLCJzdHlsZXMiLCJpc0Nsb25lIiwiY29udGFpbmVyIiwiZm9jdXNhYmxlTm9kZXMiLCJkZXN0cm95ZWQiLCJpbml0TmF2aWdhdGlvbiIsImlkeCIsImxhYmVsIiwiaTE4biIsInNsaWRlWCIsImNvbnRyb2xzIiwic3BsaWRlcyIsIm1hcCIsInNwbGlkZSIsImpvaW4iLCJ1cGRhdGVBY3Rpdml0eSIsImlzQWN0aXZlIiwib25Nb3ZlIiwiY3VyckluZGV4IiwidmlzaWJsZSIsImFyaWFIaWRkZW4iLCJzbGlkZUZvY3VzIiwic2VsZiIsInVwZGF0ZVZpc2liaWxpdHkiLCJpcyIsInRyYWNrUmVjdCIsIkVsZW1lbnRzIiwidHJhY2siLCJzbGlkZVJlY3QiLCJpc1Zpc2libGUiLCJhY3RpdmUiLCJjdXJyIiwiY2xvbmVTdGF0dXMiLCJtb3VudCIsInR5cGUiLCJ1c2VDb250YWluZXIiLCJpc1dpdGhpbiIsImZyb20iLCJkaXN0YW5jZSIsImRpZmYiLCJYTUxfTkFNRV9TUEFDRSIsIlBBVEgiLCJJTlRFUlZBTF9EQVRBX0FUVFJJQlVURSIsIlNDUk9MTF9MSVNURU5FUl9PUFRJT05TIiwicGFzc2l2ZSIsImNhcHR1cmUiLCJQT0lOVEVSX01PVkVfRVZFTlRTIiwiUE9JTlRFUl9VUF9FVkVOVFMiLCJJRV9BUlJPV19LRVlTIiwiU1JDX0RBVEFfQVRUUklCVVRFIiwiU1JDU0VUX0RBVEFfQVRUUklCVVRFIiwiSU1BR0VfU0VMRUNUT1IiLCJUUklHR0VSX0tFWVMiLCJDb21wb25lbnRDb25zdHJ1Y3RvcnMiLCJmcmVlemUiLCJfX3Byb3RvX18iLCJPcHRpb25zIiwidGhyb3R0bGVkT2JzZXJ2ZSIsIm9ic2VydmUiLCJpbml0aWFsT3B0aW9ucyIsInBvaW50cyIsImN1cnJQb2ludCIsImNvbXBsZXRlbHkiLCJpdGVtIiwicHJlZGljYXRlIiwiaXRlbTIiLCJwb2ludCIsIm5ld09wdGlvbnMiLCJicmVha3BvaW50cyIsInN0YXRlIiwib25NYXRjaCIsInNldHVwIiwiSlNPTiIsInBhcnNlIiwiaXNNaW4iLCJtZWRpYVF1ZXJ5Iiwic29ydCIsIm4iLCJtIiwibWF0Y2hNZWRpYSIsImVsZW1lbnRzIiwic2xpZGVzIiwic2xpZGVyIiwibGlzdCIsImF1dG9wbGF5IiwiZmluZCIsImJhciIsInBsYXkiLCJjb2xsZWN0IiwiaWRlbnRpZnkiLCJnZXRDbGFzc2VzIiwicmVmcmVzaCIsImRyYWciLCJERUZBVUxUX0VWRU5UX1BSSU9SSVRZIiwiU2xpZGVzIiwiU2xpZGVzMiIsImluaXQiLCJyZWdpc3RlciIsImZvckVhY2gkMSIsIlNsaWRlMiIsImdldCIsImV4Y2x1ZGVDbG9uZXMiLCJtYXRjaGVyIiwiU2xpZGUxIiwiZ2V0SW4iLCJDb250cm9sbGVyIiwidG9JbmRleCIsImhhc0ZvY3VzIiwicGVyUGFnZSIsImdldEF0IiwiaW1hZ2VzIiwiaW1nIiwib2JzZXJ2ZUltYWdlcyIsImdldExlbmd0aCIsImlzRW5vdWdoIiwiTGF5b3V0IiwidmVydGljYWwiLCJyb290UmVjdCIsImNzc1BhZGRpbmciLCJyZXNpemUiLCJuZXdSZWN0IiwiaGVpZ2h0IiwiY3NzSGVpZ2h0IiwiY3NzVHJhY2tIZWlnaHQiLCJnYXAiLCJjc3NTbGlkZVNpemUiLCJmaXhlZEhlaWdodCIsImF1dG9IZWlnaHQiLCJwYWRkaW5nIiwiaGVpZ2h0UmF0aW8iLCJ0b3RhbFNpemUiLCJ3aXRob3V0R2FwIiwiU2xpZGUiLCJnZXRHYXAiLCJwYXJzZUZsb2F0Iiwid2luZG93IiwibGlzdFNpemUiLCJzbGlkZVNpemUiLCJzbGlkZXJTaXplIiwiZ2V0UGFkZGluZyIsIkNsb25lcyIsImNsb25lcyIsImNsb25lQ291bnQiLCJjb21wdXRlQ2xvbmVDb3VudCIsImlzSGVhZCIsImNsb25lTm9kZSIsImNsb25lRGVlcCIsImdlbmVyYXRlIiwiY2xvbmVzMiIsImZpeGVkU2l6ZSIsImRpdiIsIm1lYXN1cmUiLCJmbGlja01heFBhZ2VzIiwiTW92ZSIsIlRyYW5zaXRpb24iLCJyZXBvc2l0aW9uIiwiaXNCdXN5IiwiU2Nyb2xsIiwianVtcCIsInRyYW5zbGF0ZSIsInRvUG9zaXRpb24iLCJwb3NpdGlvbiIsInByZXZlbnRMb29wIiwiZGVzdGluYXRpb24iLCJnZXRQb3NpdGlvbiIsImV4Y2VlZGVkTWluIiwiZXhjZWVkZWRMaW1pdCIsImV4Y2VlZGVkTWF4Iiwic2hpZnQiLCJsb29wIiwidHJhbnNmb3JtIiwiYmFja3dhcmRzIiwiZXhjZXNzIiwiZ2V0TGltaXQiLCJzaXplIiwidHJpbW1pbmciLCJmb2N1cyIsIm9mZnNldCIsInRyaW1TcGFjZSIsInRyaW0iLCJnZXRFbmQiLCJ3YWl0Rm9yVHJhbnNpdGlvbiIsIm1vdmUiLCJkZXN0IiwiZ28iLCJtaW5EaXN0YW5jZSIsIkluZmluaXR5IiwiaXNMb29wIiwiaXNTbGlkZSIsInNsaWRlQ291bnQiLCJwZXJNb3ZlIiwicHJldkluZGV4Iiwic2Nyb2xsIiwidXNlSW5kZXgiLCJzbmFwIiwidG9EZXN0Iiwic2V0SW5kZXgiLCJnZXROZXh0IiwiZ2V0QWRqYWNlbnQiLCJnZXRQcmV2IiwiY29tcHV0ZURlc3RJbmRleCIsImVwc2lsb24iLCJpbmNyZW1lbnRhbCIsInRvUGFnZSIsImNsb3Nlc3QiLCJjb250cm9sIiwiYWxsb3dTYW1lSW5kZXgiLCJpbmRpY2F0b3IiLCJtYXRjaCIsInVzZVNjcm9sbCIsInNwZWVkIiwiZ2V0SW5kZXgiLCJBcnJvd3MiLCJjcmVhdGVkIiwid3JhcHBlciIsImNyZWF0ZUFycm93IiwibGlzdGVuIiwicHJldjIiLCJhcnJvd1BhdGgiLCJuZXh0SW5kZXgiLCJwcmV2TGFiZWwiLCJsYXN0IiwibmV4dExhYmVsIiwiZmlyc3QiLCJkaXNhYmxlZCIsIkF1dG9wbGF5IiwiaG92ZXJlZCIsImZvY3VzZWQiLCJpbml0QnV0dG9uIiwiZm9yUGF1c2UiLCJidXR0b24iLCJyZXNldFByb2dyZXNzIiwibWFudWFsIiwiYXV0b1RvZ2dsZSIsInVwZGF0ZUludGVydmFsIiwicGF1c2VPbkhvdmVyIiwicGF1c2VPbkZvY3VzIiwiQ292ZXIiLCJjb3ZlciIsInNyYyIsInRvZ2dsZSIsInNjcm9sbENhbGxiYWNrIiwic3VwcHJlc3NDb25zdHJhaW50IiwiZnJpY3Rpb24iLCJjbGVhciIsIm9uU2Nyb2xsZWQiLCJ0IiwiZWFzaW5nRnVuYyIsInBvdyIsImVhc2luZyIsIkRyYWciLCJiYXNlUG9zaXRpb24iLCJiYXNlRXZlbnQiLCJwcmV2QmFzZUV2ZW50IiwibGFzdEV2ZW50IiwiaXNGcmVlIiwiZHJhZ2dpbmciLCJjbGlja1ByZXZlbnRlZCIsImhhc0V4Y2VlZGVkIiwiZGlzYWJsZSIsIm9uUG9pbnRlckRvd24iLCJub0RyYWciLCJpc1RvdWNoIiwiaXNUb3VjaEV2ZW50Iiwib25Qb2ludGVyTW92ZSIsIm9uUG9pbnRlclVwIiwic2F2ZSIsImNhbmNlbGFibGUiLCJjb29yZE9mIiwiY29uc3RyYWluIiwiZXhwaXJlZCIsInRpbWVPZiIsImV4Y2VlZGVkIiwiZHJhZ01pblRocmVzaG9sZCIsInRocmVzaG9sZHMiLCJtb3VzZSIsInRvdWNoIiwiaXNTbGlkZXJEaXJlY3Rpb24iLCJ2ZWxvY2l0eSIsImJhc2UiLCJkaWZmQ29vcmQiLCJkaWZmVGltZSIsImlzRmxpY2siLCJjb21wdXRlVmVsb2NpdHkiLCJmbGlja1Bvd2VyIiwiY29tcHV0ZURlc3RpbmF0aW9uIiwib25DbGljayIsIm9ydGhvZ29uYWwiLCJ0b3VjaGVzIiwidGltZVN0YW1wIiwiVG91Y2hFdmVudCIsImlzRHJhZ2dpbmciLCJLZXlib2FyZCIsImtleWJvYXJkIiwib25LZXlkb3duIiwib25VcGRhdGVkIiwibm9ybWFsaXplZEtleSIsIkxhenlMb2FkIiwiaXNTZXF1ZW50aWFsIiwibGF6eUxvYWQiLCJfU2xpZGUiLCJfaW1nIiwic3Jjc2V0IiwicGFyZW50RWxlbWVudCIsIl9zcGlubmVyIiwibG9hZE5leHQiLCJwcmVsb2FkUGFnZXMiLCJsb2FkIiwiZXJyb3IiLCJvbkxvYWQiLCJQYWdpbmF0aW9uIiwibGkiLCJjbGFzcyIsInRleHQiLCJwYWdlWCIsImNyZWF0ZVBhZ2luYXRpb24iLCJwcmV2ZW50U2Nyb2xsIiwiU3luYyIsImlzUGFyZW50IiwiaW5zdGFuY2UiLCJuYXZpZ2F0ZSIsInJlbW91bnQiLCJXaGVlbCIsIm9uV2hlZWwiLCJkZWx0YVkiLCJyZWxlYXNlV2hlZWwiLCJzaG91bGRQcmV2ZW50Iiwid2hlZWwiLCJERUZBVUxUUyIsIkZhZGUiLCJkb25lIiwiZW5kQ2FsbGJhY2siLCJ0cmFuc2l0aW9uIiwicmV3aW5kU3BlZWQiLCJnZXRTcGVlZCIsIl9TcGxpZGUiLCJjb25zdHJ1Y3RvciIsImhhbmRsZXJzIiwibmFtZXNwYWNlIiwiZXZlbnRIYW5kbGVycyIsImhhbmRsZXIiLCJfa2V5IiwiX25hbWVzcGFjZSIsImV2ZW50TlMiLCJmcmFnbWVudHMiLCJfZXZlbnQiLCJfY2FsbGJhY2siLCJfcHJpb3JpdHkiLCJoYW5kbGVyMSIsImhhbmRsZXIyIiwiRXZlbnRCdXMiLCJpbml0aWFsU3RhdGUiLCJzdGF0ZXMiLCJTdGF0ZSIsIl9vcHRpb25zIiwiX0V4dGVuc2lvbnMiLCJkZWZhdWx0cyIsIkV4dGVuc2lvbnMiLCJfQ29tcG9uZW50cyIsIl9UcmFuc2l0aW9uIiwiQ29tcG9uZW50IiwiY29tcG9uZW50Iiwic3luYyIsIlNwbGlkZSIsIkRlc2lnblN0eWxlIiwiZnJvbVN0cmluZyIsImZyb21OdW1iZXIiLCJGb3JtYXR0ZXIiLCJudW0iLCJJbnRsIiwiTnVtYmVyRm9ybWF0IiwibWF4aW11bUZyYWN0aW9uRGlnaXRzIiwiRGF0YUNvbGxlY3Rpb25IYW5kbGVyIiwic3RvcmFnZSIsIl9zdG9yYWdlIiwiY29sbGVjdFBvcnR1Z2FsQ2xpZW50RGF0YSIsImZkIiwiZmV0Y2giLCJtZXRob2QiLCJjYXRjaCIsImNvbnNvbGUiLCJjb2xsZWN0UG9ydHVnYWxDYWxjRGF0YSIsImFwcGxpYW5jZXNCb29sVG90YWwiLCJCb29sZWFuIiwiZnVybml0dXJlQm9vbCIsInNwYWNlIiwiYmF0aCIsInNob3dlciIsImFtb3VudE9mUm9vbXMiLCJhbW91bnRPZkJhdGhyb29tcyIsImRlbW9udGFnZSIsIndpbmRvd3MiLCJmaW5pc2hpbmdNYXRlcmlhbHMiLCJjZW1lbnRTY3JlZWQiLCJidWlsdGluRnVybml0dXJlIiwiaGVhdGVkRmxvb3JpbmciLCJkZW5vaXNpbmciLCJlbnRyYW5jZURvb3JzIiwiY29uZGl0aW9uaW5nIiwiZmxvb3JpbmciLCJ0cmFuc3BvcnRhdGlvbkV4cGVuc2VzIiwiYXBwbGlhbmNlcyIsInN1bW1lZFByaWNlIiwiY29zdFBlck1ldHJlIiwibW9udGhzIiwiZGF0YUNvbGxlY3Rpb25GZCIsIkZvcm1EYXRhIiwiZm9ybWF0Q3VycmVuY3kiLCJ0b1N0cmluZyIsImNvbGxlY3RQb3J0dWdhbFNwZWNpZmljYXRpb25EYXRhIiwiTG9jYWxTdG9yYWdlRGVzdGluYXRpb24iLCJMb2NhbFN0b3JhZ2VIYW5kbGVyIiwic2hvdWxkSW5pdCIsIl9pbml0IiwiX2luaXRQb3J0dWdhbCIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJzZXRJdGVtIiwic3RvcmFnZVRvUmVxdWVzdEJvZHkiLCJyZXN1bHQiLCJpc0Zpbml0ZSIsIk51bWJlciIsInN0cmluZ2lmeSIsIiQiLCJ2dyIsImlubmVyV2lkdGgiLCJkb2N1bWVudEVsZW1lbnQiLCJjbGllbnRXaWR0aCIsInZoIiwiaW5uZXJIZWlnaHQiLCJjbGllbnRIZWlnaHQiLCIkc3BsaWRlQm9keSIsImdldEVsZW1lbnRCeUlkIiwiJHNwbGlkZU5leHQiLCIkc3BsaWRlUHJldiIsIiRzcGxpZGVOZXh0VGV4dCIsIiRzcGxpZGVQcmV2VGV4dCIsIiRjb25zdWx0YXRpb25CdXR0b24iLCIkbm9kZSIsIiRuYW1lSW5wdXQiLCIkcGhvbmVJbnB1dCIsIiRjb25zdWx0Q2hlY2tib3giLCIkYXBwbGlhbmNlc1JhZGlvIiwiJGNvbnN1bHRGb3JtIiwic3BsaWRlT3B0aW9ucyIsImxvY2FsU3RvcmFnZUhhbmRsZXIiLCJ1ayIsImRhdGFIYW5kbGVyIiwic3BsaWRlQ2FsYyIsImRhdGFzZXQiLCJfIiwiZXEiLCJlbGVtZW50IiwicGFyc2VJbnQiLCJzbGlkZXJJbmRleCIsImNsaWNrIiwiZWFjaCIsImNzcyIsInRleHRQcmV2IiwidGV4dE5leHQiLCJpbm5lclRleHQiLCJldnQiLCJjdXJyZW50VGFyZ2V0IiwidHJpZ2dlciIsImdldEN1cnJlbnRDb2xvclRhYiIsInNpYmxpbmdzIiwidmFsIiwiY2hlY2tlZCIsIm9sZEJ0bk5hbWUiLCJ0aGVuIiwiZmluYWxseSIsImxvY2F0aW9uIiwiYXNzaWduIiwib2JqIiwidG9wIiwiYm90dG9tIiwiaXNJblZpZXdwb3J0IiwiYW5pbWF0ZSIsInNjcm9sbFRvcCIsIm9wYWNpdHkiLCJjb2xvciIsImNvbG9ySW5kZXgiLCJvcGVuIiwiZWxlbSIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIiwiJG1vZGFsQ29udGFpbmVyIiwiJG1vYmlsZU5hdk1lbnUiLCIkZGltIiwiJG1vYmlsZU5hdk1lbnVDbG9zZUJ1dHRvbiIsIiRtb2JpbGVOYXZNZW51T3BlbkJ1dHRvbiIsImhpZGVDb25zdWx0TW9kYWwiXSwic291cmNlUm9vdCI6IiJ9