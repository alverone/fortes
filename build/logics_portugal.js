(()=>{"use strict";
/*!
 * Splide.js
 * Version  : 3.5.8
 * License  : MIT
 * Copyright: 2021 Naotoshi Fujita
 */
const t="splide",e=`data-${t}`,n={CREATED:1,MOUNTED:2,IDLE:3,MOVING:4,DESTROYED:5};function o(t){t.length=0}function i(t){return!a(t)&&"object"==typeof t}function s(t){return Array.isArray(t)}function r(t){return"string"==typeof t}function c(t){return void 0===t}function a(t){return null===t}function l(t){return t instanceof HTMLElement}function u(t){return s(t)?t:[t]}function d(t,e){u(t).forEach(e)}function f(t,e){return t.indexOf(e)>-1}function g(t,e){return t.push(...u(e)),t}const h=Array.prototype;function p(t,e,n){return h.slice.call(t,e,n)}function m(t,e,n){t&&d(e,(e=>{e&&t.classList[n?"add":"remove"](e)}))}function v(t,e){m(t,r(e)?e.split(" "):e,!0)}function y(t,e){d(e,t.appendChild.bind(t))}function _(t,e){d(t,(t=>{const n=e.parentNode;n&&n.insertBefore(t,e)}))}function b(t,e){return l(t)&&(t.msMatchesSelector||t.matches).call(t,e)}function w(t,e){return t?p(t.children).filter((t=>b(t,e))):[]}function S(t,e){return e?w(t,e)[0]:t.firstElementChild}function E(t,e,n){if(t){let o=Object.keys(t);o=n?o.reverse():o;for(let n=0;n<o.length;n++){const i=o[n];if("__proto__"!==i&&!1===e(t[i],i))break}}return t}function x(t){return p(arguments,1).forEach((e=>{E(e,((n,o)=>{t[o]=e[o]}))})),t}function k(t,e){return E(e,((e,n)=>{s(e)?t[n]=e.slice():i(e)?t[n]=k(i(t[n])?t[n]:{},e):t[n]=e})),t}function L(t,e){t&&d(e,(e=>{t.removeAttribute(e)}))}function C(t,e,n){i(e)?E(e,((e,n)=>{C(t,n,e)})):a(n)?L(t,e):t.setAttribute(e,String(n))}function P(t,e,n){const o=document.createElement(t);return e&&(r(e)?v(o,e):C(o,e)),n&&y(n,o),o}function A(t,e,n){if(c(n))return getComputedStyle(t)[e];if(!a(n)){const{style:o}=t;n=`${n}`,o[e]!==n&&(o[e]=n)}}function B(t,e){A(t,"display",e)}function I(t,e){return t.getAttribute(e)}function T(t,e){return t&&t.classList.contains(e)}function z(t){return t.getBoundingClientRect()}function D(t){d(t,(t=>{t&&t.parentNode&&t.parentNode.removeChild(t)}))}function N(t){return S((new DOMParser).parseFromString(t,"text/html").body)}function q(t,e){t.preventDefault(),e&&(t.stopPropagation(),t.stopImmediatePropagation())}function F(t,e){return t&&t.querySelector(e)}function M(t,e){return p(t.querySelectorAll(e))}function j(t,e){m(t,e,!1)}function R(t){return r(t)?t:t?`${t}px`:""}function O(e,n=""){if(!e)throw new Error(`[${t}] ${n}`)}function W(t){setTimeout(t)}const H=()=>{};function K(t){return requestAnimationFrame(t)}const{min:X,max:Y,floor:U,ceil:G,abs:V}=Math;function J(t,e,n,o){const i=X(e,n),s=Y(e,n);return o?i<t&&t<s:i<=t&&t<=s}function Q(t,e,n){const o=X(e,n),i=Y(e,n);return X(Y(o,t),i)}function Z(t){return+(t>0)-+(t<0)}function tt(t,e){return d(e,(e=>{t=t.replace("%s",`${e}`)})),t}function et(t){return t<10?`0${t}`:`${t}`}const nt={};function ot(t){return`${t}${et(nt[t]=(nt[t]||0)+1)}`}const it="mounted",st="ready",rt="move",ct="moved",at="shifted",lt="click",ut="visible",dt="hidden",ft="slide:keydown",gt="refresh",ht="updated",pt="resize",mt="resized",vt="repositioned",yt="scroll",_t="scrolled",bt="destroy",$t="navigation:mounted",wt="lazyload:loaded";function St(t){const{event:e}=t,n={};let o=[];function i(t,e,n){s(t,e,((t,e)=>{o=o.filter((o=>!!(o[0]!==t||o[1]!==e||n&&o[2]!==n)||(t.removeEventListener(e,o[2],o[3]),!1)))}))}function s(t,e,n){d(t,(t=>{t&&e.split(" ").forEach(n.bind(null,t))}))}function r(){o=o.filter((t=>i(t[0],t[1]))),e.offBy(n)}return e.on(bt,r,n),{on:function(t,o,i){e.on(t,o,n,i)},off:function(t){e.off(t,n)},emit:e.emit,bind:function(t,e,n,i){s(t,e,((t,e)=>{o.push([t,e,n,i]),t.addEventListener(e,n,i)}))},unbind:i,destroy:r}}function Et(t,e,n,o){const{now:i}=Date;let s,r,c=0,a=!0,l=0;function u(){if(!a){const r=i()-s;if(r>=t?(c=1,s=i()):c=r/t,n&&n(c),1===c&&(e(),o&&++l>=o))return d();K(u)}}function d(){a=!0}function f(){cancelAnimationFrame(r),c=0,r=0,a=!0}return{start:function(e){!e&&f(),s=i()-(e?c*t:0),a=!1,K(u)},rewind:function(){s=i(),c=0,n&&n(c)},pause:d,cancel:f,set:function(e){t=e},isPaused:function(){return a}}}function xt(t,e){let n;return function(){n||(n=Et(e||0,(()=>{t.apply(this,arguments),n=null}),null,1),n.start())}}const kt="ttb",Lt={marginRight:["marginBottom","marginLeft"],autoWidth:["autoHeight"],fixedWidth:["fixedHeight"],paddingLeft:["paddingTop","paddingRight"],paddingRight:["paddingBottom","paddingLeft"],width:["height"],left:["top","right"],right:["bottom","left"],x:["y"],X:["Y"],Y:["X"],ArrowLeft:["ArrowUp","ArrowRight"],ArrowRight:["ArrowDown","ArrowLeft"]};function Ct(t,e,n){return{resolve:function(t,e){const{direction:o}=n;return Lt[t]["rtl"!==o||e?o===kt?0:-1:1]||t},orient:function(t){return t*("rtl"===n.direction?1:-1)}}}const Pt=t,At=`${t}__slider`,Bt=`${t}__track`,It=`${t}__list`,Tt=`${t}__slide`,zt=`${Tt}--clone`,Dt=`${Tt}__container`,Nt=`${t}__arrows`,qt=`${t}__arrow`,Ft=`${qt}--prev`,Mt=`${qt}--next`,jt=`${t}__pagination`,Rt=`${t}__progress`,Ot=`${Rt}__bar`,Wt=`${t}__autoplay`,Ht=`${t}__play`,Kt=`${t}__pause`,Xt="is-active",Yt="is-prev",Ut="is-next",Gt="is-visible",Vt="is-loading",Jt=[Xt,Gt,Yt,Ut,Vt],Qt={slide:Tt,clone:zt,arrows:Nt,arrow:qt,prev:Ft,next:Mt,pagination:jt,page:`${jt}__page`,spinner:`${t}__spinner`};const Zt="role",te="aria-controls",ee="aria-current",ne="aria-label",oe="aria-hidden",ie="tabindex",se="aria-orientation",re=[Zt,te,ee,ne,oe,se,ie,"disabled"],ce="slide",ae="loop",le="fade";function ue(t,e,n,o){const{on:i,emit:s,bind:r,destroy:c}=St(t),{Components:a,root:l,options:u}=t,{isNavigation:d,updateOnMove:f}=u,{resolve:g}=a.Direction,h=I(o,"style"),p=n>-1,v=S(o,`.${Dt}`),y=u.focusableNodes&&M(o,u.focusableNodes);let _;function b(){const i=p?n:e,s=tt(u.i18n.slideX,i+1),r=t.splides.map((t=>t.splide.root.id)).join(" ");C(o,ne,s),C(o,te,r),C(o,Zt,"menuitem"),E(x())}function $(){_||w()}function w(){if(!_){const{index:n}=t;E(x()),function(t){const e=!t&&!x();C(o,oe,e||null),C(o,ie,!e&&u.slideFocus?0:null),y&&y.forEach((t=>{C(t,ie,e?-1:null)}));t!==T(o,Gt)&&(m(o,Gt,t),s(t?ut:dt,k))}(function(){if(t.is(le))return x();const e=z(a.Elements.track),n=z(o),i=g("left"),s=g("right");return U(e[i])<=G(n[i])&&U(n[s])<=G(e[s])}()),m(o,Yt,e===n-1),m(o,Ut,e===n+1)}}function E(t){t!==T(o,Xt)&&(m(o,Xt,t),d&&C(o,ee,t||null),s(t?"active":"inactive",k))}function x(){const{index:o}=t;return o===e||u.cloneStatus&&o===n}const k={index:e,slideIndex:n,slide:o,container:v,isClone:p,mount:function(){p||(o.id=`${l.id}-slide${et(e+1)}`),r(o,"click keydown",(t=>{s("click"===t.type?lt:ft,k,t)})),i([gt,vt,at,ct,_t],w),i($t,b),f&&i(rt,$)},destroy:function(){_=!0,c(),j(o,Jt),L(o,re),C(o,"style",h)},update:w,style:function(t,e,n){A(n&&v||o,t,e)},isWithin:function(n,o){let i=V(n-e);return p||!u.rewind&&!t.is(ae)||(i=X(i,t.length-i)),i<=o}};return k}const de="http://www.w3.org/2000/svg",fe="m15.5 0.932-4.3 4.38 14.5 14.6-14.5 14.5 4.3 4.4 14.6-14.6 4.4-4.3-4.4-4.4-14.6-14.6z";const ge=`${e}-interval`;const he={passive:!1,capture:!0},pe="touchmove mousemove",me="touchend touchcancel mouseup";const ve=["Left","Right","Up","Down"];const ye=`${e}-lazy`,_e=`${ye}-srcset`,be=`[${ye}], [${_e}]`;const $e=[" ","Enter","Spacebar"];var we=Object.freeze({__proto__:null,Options:function(t,n,o){const i=xt(l);let s,r,c;function a(t){t&&removeEventListener("resize",i)}function l(){const e=(n=t=>t[1].matches,p(r).filter(n)[0]||[]);var n;e[0]!==c&&function(e){const n=o.breakpoints[e]||s;n.destroy?(t.options=s,t.destroy("completely"===n.destroy)):(t.state.is(5)&&(a(!0),t.mount()),t.options=n)}(c=e[0])}return{setup:function(){try{k(o,JSON.parse(I(t.root,e)))}catch(t){O(!1,t.message)}s=k({},o);const{breakpoints:n}=o;if(n){const t="min"===o.mediaQuery;r=Object.keys(n).sort(((e,n)=>t?+n-+e:+e-+n)).map((e=>[e,matchMedia(`(${t?"min":"max"}-width:${e}px)`)])),l()}},mount:function(){r&&addEventListener("resize",i)},destroy:a}},Direction:Ct,Elements:function(e,n,i){const{on:s}=St(e),{root:r}=e,c={},a=[];let l,u,d,f;function h(){!function(){u=S(r,`.${At}`),d=F(r,`.${Bt}`),f=S(d,`.${It}`),O(d&&f,"A track/list element is missing."),g(a,w(f,`.${Tt}:not(.${zt})`));const t=_(`.${Wt}`),e=_(`.${Nt}`);x(c,{root:r,slider:u,track:d,list:f,slides:a,arrows:e,autoplay:t,prev:F(e,`.${Ft}`),next:F(e,`.${Mt}`),bar:F(_(`.${Rt}`),`.${Ot}`),play:F(t,`.${Ht}`),pause:F(t,`.${Kt}`)})}(),function(){const e=r.id||ot(t);r.id=e,d.id=d.id||`${e}-track`,f.id=f.id||`${e}-list`}(),v(r,l=b())}function p(){[r,d,f].forEach((t=>{L(t,"style")})),o(a),j(r,l)}function m(){p(),h()}function y(){j(r,l),v(r,l=b())}function _(t){return S(r,t)||S(u,t)}function b(){return[`${Pt}--${i.type}`,`${Pt}--${i.direction}`,i.drag&&`${Pt}--draggable`,i.isNavigation&&`${Pt}--nav`,Xt]}return x(c,{setup:h,mount:function(){s(gt,m,8),s(ht,y)},destroy:p})},Slides:function(t,e,n){const{on:i,emit:s,bind:c}=St(t),{slides:a,list:g}=e.Elements,h=[];function p(){a.forEach(((t,e)=>{w(t,e,-1)}))}function m(){E((t=>{t.destroy()})),o(h)}function $(){m(),p()}function w(e,n,o){const i=ue(t,n,o,e);i.mount(),h.push(i)}function S(t){return t?x((t=>!t.isClone)):h}function E(t,e){S(e).forEach(t)}function x(t){return h.filter("function"==typeof t?t:e=>r(t)?b(e.slide,t):f(u(t),e.index))}return{mount:function(){p(),i(gt,$),i([it,gt],(()=>{h.sort(((t,e)=>t.index-e.index))}))},destroy:m,update:function(){E((t=>{t.update()}))},register:w,get:S,getIn:function(t){const{Controller:o}=e,i=o.toIndex(t),s=o.hasFocus()?1:n.perPage;return x((t=>J(t.index,i,i+s-1)))},getAt:function(t){return x(t)[0]},add:function(t,e){d(t,(t=>{if(r(t)&&(t=N(t)),l(t)){const o=a[e];o?_(t,o):y(g,t),v(t,n.classes.slide),function(t,e){const n=M(t,"img");let{length:o}=n;o?n.forEach((t=>{c(t,"load error",(()=>{--o||e()}))})):e()}(t,s.bind(null,pt))}})),s(gt)},remove:function(t){D(x(t).map((t=>t.slide))),s(gt)},forEach:E,filter:x,style:function(t,e,n){E((o=>{o.style(t,e,n)}))},getLength:function(t){return t?a.length:h.length},isEnough:function(){return h.length>n.perPage}}},Layout:function(t,e,n){const{on:o,bind:s,emit:r}=St(t),{Slides:c}=e,{resolve:a}=e.Direction,{root:l,track:u,list:d}=e.Elements,{getAt:f}=c;let g,h;function p(){h=null,g=n.direction===kt,A(l,"maxWidth",R(n.width)),A(u,a("paddingLeft"),v(!1)),A(u,a("paddingRight"),v(!0)),m()}function m(){const t=z(l);h&&h.width===t.width&&h.height===t.height||(A(u,"height",function(){let t="";g&&(t=y(),O(t,"height or heightRatio is missing."),t=`calc(${t} - ${v(!1)} - ${v(!0)})`);return t}()),c.style(a("marginRight"),R(n.gap)),c.style("width",(n.autoWidth?"":R(n.fixedWidth)||(g?"":_()))||null),c.style("height",R(n.fixedHeight)||(g?n.autoHeight?"":_():y())||null,!0),h=t,r(mt))}function v(t){const{padding:e}=n,o=a(t?"right":"left");return e&&R(e[o]||(i(e)?0:e))||"0px"}function y(){return R(n.height||z(d).width*n.heightRatio)}function _(){const t=R(n.gap);return`calc((100%${t&&` + ${t}`})/${n.perPage||1}${t&&` - ${t}`})`}function b(t,e){const n=f(t);if(n){const t=z(n.slide)[a("right")],o=z(d)[a("left")];return V(t-o)+(e?0:$())}return 0}function $(){const t=f(0);return t&&parseFloat(A(t.slide,a("marginRight")))||0}return{mount:function(){p(),s(window,"resize load",xt(r.bind(this,pt))),o([ht,gt],p),o(pt,m)},listSize:function(){return z(d)[a("width")]},slideSize:function(t,e){const n=f(t||0);return n?z(n.slide)[a("width")]+(e?0:$()):0},sliderSize:function(){return b(t.length-1,!0)-b(-1,!0)},totalSize:b,getPadding:function(t){return parseFloat(A(u,a("padding"+(t?"Right":"Left"))))||0}}},Clones:function(t,e,n){const{on:i,emit:s}=St(t),{Elements:c,Slides:a}=e,{resolve:l}=e.Direction,u=[];let d;function f(){(d=b())&&(!function(e){const o=a.get().slice(),{length:i}=o;if(i){for(;o.length<e;)g(o,o);g(o.slice(-e),o.slice(0,e)).forEach(((s,r)=>{const l=r<e,d=function(e,o){const i=e.cloneNode(!0);return v(i,n.classes.clone),i.id=`${t.root.id}-clone${et(o+1)}`,i}(s.slide,r);l?_(d,o[0].slide):y(c.list,d),g(u,d),a.register(d,r-e+(l?0:i),s.index)}))}}(d),s(pt))}function h(){D(u),o(u)}function p(){h(),f()}function m(){d<b()&&s(gt)}function b(){let{clones:e}=n;if(t.is(ae)){if(!e){const o=function(t,e){if(r(e)){const n=P("div",{style:`width: ${e}; position: absolute;`},t);e=z(n).width,D(n)}return e}(c.list,n[l("fixedWidth")]);e=(o&&G(z(c.track)[l("width")]/o)||n[l("autoWidth")]&&t.length||n.perPage)*(n.drag?(n.flickMaxPages||1)+1:2)}}else e=0;return e}return{mount:function(){f(),i(gt,p),i([ht,pt],m)},destroy:h}},Move:function(t,e,n){const{on:o,emit:i}=St(t),{slideSize:s,getPadding:r,totalSize:a,listSize:l,sliderSize:u}=e.Layout,{resolve:d,orient:f}=e.Direction,{list:g,track:h}=e.Elements;let p;function m(){S()||(e.Scroll.cancel(),v(t.index),i(vt))}function v(t){y(b(t,!0))}function y(e,n){if(!t.is(le)){const o=n?e:function(e){if(t.is(ae)){const t=f(e-$()),n=E(!1,e)&&t<0,o=E(!0,e)&&t>0;(n||o)&&(e=_(e,o))}return e}(e);g.style.transform=`translate${d("X")}(${o}px)`,e!==o&&i(at)}}function _(t,e){const n=t-w(e),o=u();return t-=f(o*(G(V(n)/o)||1))*(e?1:-1)}function b(e,o){const i=f(a(e-1)-function(t){const{focus:e}=n;return"center"===e?(l()-s(t,!0))/2:+e*s(t)||0}(e));return o?function(e){n.trimSpace&&t.is(ce)&&(e=Q(e,0,f(u()-l())));return e}(i):i}function $(){const t=d("left");return z(g)[t]-z(h)[t]+f(r(!1))}function w(t){return b(t?e.Controller.getEnd():0,!!n.trimSpace)}function S(){return t.state.is(4)&&n.waitForTransition}function E(t,e){e=c(e)?$():e;const n=!0!==t&&f(e)<f(w(!1)),o=!1!==t&&f(e)>f(w(!0));return n||o}return{mount:function(){p=e.Transition,o([it,mt,ht,gt],m)},destroy:function(){L(g,"style")},move:function(o,s,r,c){if(!S()){const{set:a}=t.state,l=$();o!==s&&(p.cancel(),y(_(l,o>s),!0)),a(4),i(rt,s,r,o),p.start(s,(()=>{a(3),i(ct,s,r,o),"move"===n.trimSpace&&o!==r&&l===$()?e.Controller.go(o>r?">":"<",!1,c):c&&c()}))}},jump:v,translate:y,shift:_,cancel:function(){y($()),p.cancel()},toIndex:function(t){const n=e.Slides.get();let o=0,i=1/0;for(let e=0;e<n.length;e++){const s=n[e].index,r=V(b(s,!0)-t);if(!(r<=i))break;i=r,o=s}return o},toPosition:b,getPosition:$,getLimit:w,isBusy:S,exceededLimit:E}},Controller:function(t,e,n){const{on:o}=St(t),{Move:i}=e,{getPosition:s,getLimit:a}=i,{isEnough:l,getLength:u}=e.Slides,d=t.is(ae),f=t.is(ce);let g,h,p,m=n.start||0,v=m;function y(){g=u(!0),h=n.perMove,p=n.perPage,m=Q(m,0,g-1)}function _(t,n,o,s,r){const c=n?t:C(t);e.Scroll.scroll(n||o?i.toPosition(c,!0):t,s,(()=>{P(i.toIndex(i.getPosition())),r&&r()}))}function b(t){return w(!1,t)}function $(t){return w(!0,t)}function w(t,e){const n=h||(A()?1:p),o=S(m+n*(t?-1:1),m);return-1!==o||!f||(i=s(),r=a(!t),c=1,V(i-r)<c)?e?o:x(o):t?0:E();var i,r,c}function S(t,e,o){if(l()){const i=E();t<0||t>i?t=J(0,t,e,!0)||J(i,e,t,!0)?k(L(t)):d?h||A()?t:t<0?-(g%p||p):g:n.rewind?t<0?i:0:-1:o||t===e||(t=h?t:k(L(e)+(t<e?-1:1)))}else t=-1;return t}function E(){let t=g-p;return(A()||d&&h)&&(t=g-1),Y(t,0)}function x(t){return d?l()?t%g+(t<0?g:0):-1:t}function k(t){return Q(A()?t:p*t,0,E())}function L(t){return A()||(t=J(t,g-p,g-1)?g-1:t,t=U(t/p)),t}function C(t){const e=i.toIndex(t);return f?Q(e,0,E()):e}function P(t){t!==m&&(v=m,m=t)}function A(){return!c(n.focus)||n.isNavigation}return{mount:function(){y(),o([ht,gt],y,9)},go:function(t,e,o){const s=function(t){let e=m;if(r(t)){const[,n,o]=t.match(/([+\-<>])(\d+)?/)||[];"+"===n||"-"===n?e=S(m+ +`${n}${+o||1}`,m,!0):">"===n?e=o?k(+o):b(!0):"<"===n&&(e=$(!0))}else e=d?t:Q(t,0,E());return e}(t);if(n.useScroll)_(s,!0,!0,n.speed,o);else{const t=x(s);t>-1&&!i.isBusy()&&(e||t!==m)&&(P(t),i.move(s,t,v,o))}},scroll:_,getNext:b,getPrev:$,getAdjacent:w,getEnd:E,setIndex:P,getIndex:function(t){return t?v:m},toIndex:k,toPage:L,toDest:C,hasFocus:A}},Arrows:function(t,e,n){const{on:o,bind:i,emit:s}=St(t),{classes:r,i18n:c}=n,{Elements:a,Controller:l}=e;let u,d=a.arrows,f=a.prev,g=a.next;const h={};function p(){if(n.arrows&&(f&&g||(d=P("div",r.arrows),f=m(!0),g=m(!1),u=!0,y(d,[f,g]),_(d,S("slider"===n.arrows&&a.slider||t.root)))),f&&g)if(h.prev)B(d,!1===n.arrows?"none":"");else{const{id:t}=a.track;C(f,te,t),C(g,te,t),h.prev=f,h.next=g,function(){const{go:t}=l;o([it,ct,ht,gt,_t],v),i(g,"click",(()=>{t(">",!0)})),i(f,"click",(()=>{t("<",!0)}))}(),s("arrows:mounted",f,g)}}function m(t){return N(`<button class="${r.arrow} ${t?r.prev:r.next}" type="button"><svg xmlns="${de}" viewBox="0 0 40 40" width="40" height="40"><path d="${n.arrowPath||fe}" />`)}function v(){const e=t.index,n=l.getPrev(),o=l.getNext(),i=n>-1&&e<n?c.last:c.prev,r=o>-1&&e>o?c.first:c.next;f.disabled=n<0,g.disabled=o<0,C(f,ne,i),C(g,ne,r),s("arrows:updated",f,g,n,o)}return{arrows:h,mount:function(){p(),o(ht,p)},destroy:function(){u?D(d):(L(f,re),L(g,re))}}},Autoplay:function(t,e,n){const{on:o,bind:i,emit:s}=St(t),r=Et(n.interval,t.go.bind(t,">"),(function(t){const{bar:e}=a;e&&A(e,"width",100*t+"%"),s("autoplay:playing",t)})),{isPaused:c}=r,{Elements:a}=e;let l,u,d;function f(t){const e=t?"pause":"play",o=a[e];o&&(C(o,te,a.track.id),C(o,ne,n.i18n[e]),i(o,"click",t?h:g))}function g(){c()&&e.Slides.isEnough()&&(r.start(!n.resetProgress),u=l=d=!1,s("autoplay:play"))}function h(t=!0){c()||(r.pause(),s("autoplay:pause")),d=t}function p(){d||(l||u?h(!1):g())}function m(){const o=e.Slides.getAt(t.index);r.set(o&&+I(o.slide,ge)||n.interval)}return{mount:function(){const{autoplay:t}=n;t&&(f(!0),f(!1),function(){const{root:t}=a;n.pauseOnHover&&i(t,"mouseenter mouseleave",(t=>{l="mouseenter"===t.type,p()}));n.pauseOnFocus&&i(t,"focusin focusout",(t=>{u="focusin"===t.type,p()}));o([rt,yt,gt],r.rewind),o(rt,m)}(),"pause"!==t&&g())},destroy:r.cancel,play:g,pause:h,isPaused:c}},Cover:function(t,e,n){const{on:o}=St(t);function i(t){e.Slides.forEach((e=>{const n=S(e.container||e.slide,"img");n&&n.src&&s(t,n,e)}))}function s(t,e,n){n.style("background",t?`center/cover no-repeat url("${e.src}")`:"",!0),B(e,t?"none":"")}return{mount:function(){n.cover&&(o(wt,((t,e)=>{s(!0,t,e)})),o([it,ht,gt],i.bind(null,!0)))},destroy:function(){i(!1)}}},Scroll:function(t,e,n){const{on:o,emit:i}=St(t),{Move:s}=e,{getPosition:r,getLimit:c,exceededLimit:a}=s;let l,u;function d(e,o,h,p){const m=r();let v=1;var y;o=o||(y=V(e-m),Y(y/1.5,800)),u=h,g(),l=Et(o,f,(o=>{const i=r(),l=(m+(e-m)*function(t){const{easingFunc:e}=n;return e?e(t):1-Math.pow(1-t,4)}(o)-r())*v;var u;s.translate(i+l),t.is(ce)&&!p&&a()&&(v*=.6,V(l)<10&&(u=a(!1),d(c(!u),600,null,!0)))}),1),i(yt),l.start()}function f(){const e=r(),n=s.toIndex(e);J(n,0,t.length-1)||s.translate(s.shift(e,n>0),!0),u&&u(),i(_t)}function g(){l&&l.cancel()}function h(){l&&!l.isPaused()&&(g(),f())}return{mount:function(){o(rt,g),o([ht,gt],h)},destroy:g,scroll:d,cancel:h}},Drag:function(t,e,n){const{on:o,emit:s,bind:r,unbind:c}=St(t),{Move:a,Scroll:l,Controller:u}=e,{track:d}=e.Elements,{resolve:f,orient:g}=e.Direction,{getPosition:h,exceededLimit:p}=a;let m,v,y,_,$,w,S,E,x,k=!1;function L(){const{drag:t}=n;F(!t),$="free"===t}function C(t){if(!E){const{noDrag:e}=n,o=N(t);!(!e||!b(t.target,e))||!o&&t.button||(a.isBusy()?q(t,!0):(x=o?d:window,y=null,_=null,S=!1,r(x,pe,P,he),r(x,me,A,he),a.cancel(),l.cancel(),B(t)))}}function P(e){if(_||s("drag"),_=e,e.cancelable){const o=z(e)-z(v);if(w){a.translate(m+function(e){return e/(k&&t.is(ce)?5:1)}(o));const n=D(e)-D(v)>200,i=k!==(k=p());(n||i)&&B(e),s("dragging"),S=!0,q(e)}else{let{dragMinThreshold:t}=n;t=i(t)?t:{mouse:0,touch:+t||10},w=V(o)>(N(e)?t.touch:t.mouse),T()&&q(e)}}}function A(o){c(x,pe,P),c(x,me,A);const{index:i}=t;if(_){if(w||o.cancelable&&T()){const s=function(e){if(t.is(ae)||!k){const t=v===_&&y||v,n=z(_)-z(t),o=D(e)-D(t),i=D(e)-D(_)<200;if(o&&i)return n/o}return 0}(o),r=function(t){return h()+Z(t)*X(V(t)*(n.flickPower||600),$?1/0:e.Layout.listSize()*(n.flickMaxPages||1))}(s);$?u.scroll(r):t.is(le)?u.go(i+g(Z(s))):u.go(u.toDest(r),!0),q(o)}s("dragged")}else $||h()===a.toPosition(i)||u.go(i,!0);w=!1}function B(t){y=v,v=t,m=h()}function I(t){!E&&S&&q(t,!0)}function T(){return V(z(_)-z(v))>V(z(_,!0)-z(v,!0))}function z(t,e){return(N(t)?t.touches[0]:t)[`page${f(e?"Y":"X")}`]}function D(t){return t.timeStamp}function N(t){return"undefined"!=typeof TouchEvent&&t instanceof TouchEvent}function F(t){E=t}return{mount:function(){r(d,pe,H,he),r(d,me,H,he),r(d,"touchstart mousedown",C,he),r(d,"click",I,{capture:!0}),r(d,"dragstart",q),o([it,ht],L)},disable:F,isDragging:function(){return w}}},Keyboard:function(t,e,n){const{on:o,bind:i,unbind:s}=St(t),{root:r}=e.Elements,{resolve:c}=e.Direction;let a,u;function d(){const{keyboard:t="global"}=n;t&&("focused"===t?(a=r,C(r,ie,0)):a=window,i(a,"keydown",m))}function g(){s(a,"keydown"),l(a)&&L(a,ie)}function h(){u=!0,W((()=>{u=!1}))}function p(){g(),d()}function m(e){if(!u){const{key:n}=e,o=f(ve,n)?`Arrow${n}`:n;o===c("ArrowLeft")?t.go("<"):o===c("ArrowRight")&&t.go(">")}}return{mount:function(){d(),o(ht,p),o(rt,h)},destroy:g}},LazyLoad:function(t,e,n){const{on:o,off:i,bind:s,emit:r}=St(t),c="sequential"===n.lazyLoad;let a=[],l=0;function u(){f(),d()}function d(){e.Slides.forEach((t=>{M(t.slide,be).forEach((e=>{const o=I(e,ye),i=I(e,_e);if(o!==e.src||i!==e.srcset){const s=n.classes.spinner,r=e.parentElement,c=S(r,`.${s}`)||P("span",s,r);C(c,Zt,"presentation"),a.push({_img:e,_Slide:t,src:o,srcset:i,_spinner:c}),!e.src&&B(e,"none")}}))})),c&&p()}function f(){l=0,a=[]}function g(){a=a.filter((e=>{const o=n.perPage*((n.preloadPages||1)+1)-1;return!e._Slide.isWithin(t.index,o)||h(e)})),a.length||i(ct)}function h(t){const{_img:e}=t;v(t._Slide.slide,Vt),s(e,"load error",(e=>{!function(t,e){const{_Slide:n}=t;j(n.slide,Vt),e||(D(t._spinner),B(t._img,""),r(wt,t._img,n),r(pt));c&&p()}(t,"error"===e.type)})),["src","srcset"].forEach((n=>{t[n]&&(C(e,n,t[n]),L(e,"src"===n?ye:_e))}))}function p(){l<a.length&&h(a[l++])}return{mount:function(){n.lazyLoad&&(d(),o(gt,u),c||o([it,gt,ct,_t],g))},destroy:f}},Pagination:function(t,e,n){const{on:i,emit:s,bind:r,unbind:c}=St(t),{Slides:a,Elements:l,Controller:u}=e,{hasFocus:d,getIndex:f}=u,g=[];let h;function p(){m(),n.pagination&&a.isEnough()&&(!function(){const{length:e}=t,{classes:o,i18n:i,perPage:s}=n,c="slider"===n.pagination&&l.slider||l.root,u=d()?e:G(e/s);h=P("ul",o.pagination,c);for(let t=0;t<u;t++){const e=P("li",null,h),n=P("button",{class:o.page,type:"button"},e),c=a.getIn(t).map((t=>t.slide.id)),l=!d()&&s>1?i.pageX:i.slideX;r(n,"click",y.bind(null,t)),C(n,te,c.join(" ")),C(n,ne,tt(l,t+1)),g.push({li:e,button:n,page:t})}}(),s("pagination:mounted",{list:h,items:g},_(t.index)),b())}function m(){h&&(D(h),g.forEach((t=>{c(t.button,"click")})),o(g),h=null)}function y(t){u.go(`>${t}`,!0,(()=>{const e=a.getAt(u.toIndex(t));var n;e&&((n=e.slide).setActive&&n.setActive()||n.focus({preventScroll:!0}))}))}function _(t){return g[u.toPage(t)]}function b(){const t=_(f(!0)),e=_(f());t&&(j(t.button,Xt),L(t.button,ee)),e&&(v(e.button,Xt),C(e.button,ee,!0)),s("pagination:updated",{list:h,items:g},t,e)}return{items:g,mount:function(){p(),i([ht,gt],p),i([rt,_t],b)},destroy:m,getAt:_,update:b}},Sync:function(t,e,n){const{list:i}=e.Elements,s=[];function r(){t.splides.forEach((e=>{var n;!e.isParent&&(n=e.splide,[t,n].forEach((e=>{const o=St(e),i=e===t?n:t;o.on(rt,((t,e,n)=>{i.go(i.is(ae)?n:t)})),s.push(o)})))})),n.isNavigation&&function(){const e=St(t),{on:n}=e;n(lt,l),n(ft,u),n([it,ht],a),C(i,Zt,"menu"),s.push(e),e.emit($t,t.splides)}()}function c(){L(i,re),s.forEach((t=>{t.destroy()})),o(s)}function a(){C(i,se,n.direction!==kt?"horizontal":null)}function l(e){t.go(e.index)}function u(t,e){f($e,e.key)&&(l(t),q(e))}return{mount:r,destroy:c,remount:function(){c(),r()}}},Wheel:function(t,e,n){const{bind:o}=St(t);function i(o){if(o.cancelable){const{deltaY:i}=o;if(i){const s=i<0;t.go(s?"<":">"),function(o){return!n.releaseWheel||t.state.is(4)||-1!==e.Controller.getAdjacent(o)}(s)&&q(o)}}}return{mount:function(){n.wheel&&o(e.Elements.track,"wheel",i,he)}}}});const Se={type:"slide",speed:400,waitForTransition:!0,perPage:1,cloneStatus:!0,arrows:!0,pagination:!0,interval:5e3,pauseOnHover:!0,pauseOnFocus:!0,resetProgress:!0,easing:"cubic-bezier(0.25, 1, 0.5, 1)",drag:!0,direction:"ltr",slideFocus:!0,trimSpace:!0,focusableNodes:"a, button, textarea, input, select, iframe",classes:Qt,i18n:{prev:"Previous slide",next:"Next slide",first:"Go to first slide",last:"Go to last slide",slideX:"Go to slide %s",pageX:"Go to page %s",play:"Start autoplay",pause:"Pause autoplay"}};function Ee(t,e,n){const{on:o}=St(t);return{mount:function(){o([it,gt],(()=>{W((()=>{e.Slides.style("transition",`opacity ${n.speed}ms ${n.easing}`)}))}))},start:function(t,n){const{track:o}=e.Elements;A(o,"height",R(z(o).height)),W((()=>{n(),A(o,"height","")}))},cancel:H}}function xe(t,e,n){const{bind:o}=St(t),{Move:i,Controller:s}=e,{list:r}=e.Elements;let c;function a(){l("")}function l(t){A(r,"transition",t)}return{mount:function(){o(r,"transitionend",(t=>{t.target===r&&c&&(a(),c())}))},start:function(e,o){const r=i.toPosition(e,!0),a=i.getPosition(),u=function(e){const{rewindSpeed:o}=n;if(t.is(ce)&&o){const t=s.getIndex(!0),n=s.getEnd();if(0===t&&e>=n||t>=n&&0===e)return o}return n.speed}(e);V(r-a)>=1&&u>=1?(l(`transform ${u}ms ${n.easing}`),i.translate(r,!0),c=o):(i.jump(e),o())},cancel:a}}const ke=class{constructor(t,e){this.event=function(){let t={};function e(e,o){n(e,((e,n)=>{const i=t[e];t[e]=i&&i.filter((t=>t._key?t._key!==o:o||t._namespace!==n))}))}function n(t,e){u(t).join(" ").split(" ").forEach((t=>{const n=t.split(".");e(n[0],n[1])}))}return{on:function(e,o,i,s=10){n(e,((e,n)=>{t[e]=t[e]||[],g(t[e],{_event:e,_callback:o,_namespace:n,_priority:s,_key:i}).sort(((t,e)=>t._priority-e._priority))}))},off:e,offBy:function(n){E(t,((t,o)=>{e(o,n)}))},emit:function(e){(t[e]||[]).forEach((t=>{t._callback.apply(t,p(arguments,1))}))},destroy:function(){t={}}}}(),this.Components={},this.state=function(t){let e=t;return{set:function(t){e=t},is:function(t){return f(u(t),e)}}}(1),this.splides=[],this._options={},this._Extensions={};const n=r(t)?F(document,t):t;O(n,`${n} is invalid.`),this.root=n,k(Se,ke.defaults),k(k(this._options,Se),e||{})}mount(t,e){const{state:n,Components:o}=this;O(n.is([1,5]),"Already mounted!"),n.set(1),this._Components=o,this._Transition=e||this._Transition||(this.is(le)?Ee:xe),this._Extensions=t||this._Extensions;return E(x({},we,this._Extensions,{Transition:this._Transition}),((t,e)=>{const n=t(this,o,this._options);o[e]=n,n.setup&&n.setup()})),E(o,(t=>{t.mount&&t.mount()})),this.emit(it),v(this.root,"is-initialized"),n.set(3),this.emit(st),this}sync(t){return this.splides.push({splide:t}),t.splides.push({splide:this,isParent:!0}),this.state.is(3)&&(this._Components.Sync.remount(),t.Components.Sync.remount()),this}go(t){return this._Components.Controller.go(t),this}on(t,e){return this.event.on(t,e,null,20),this}off(t){return this.event.off(t),this}emit(t){return this.event.emit(t,...p(arguments,1)),this}add(t,e){return this._Components.Slides.add(t,e),this}remove(t){return this._Components.Slides.remove(t),this}is(t){return this._options.type===t}refresh(){return this.emit(gt),this}destroy(t=!0){const{event:e,state:n}=this;return n.is(1)?e.on(st,this.destroy.bind(this,t),this):(E(this._Components,(e=>{e.destroy&&e.destroy(t)}),!0),e.emit(bt),e.destroy(),t&&o(this.splides),n.set(5)),this}get options(){return this._options}set options(t){const{_options:e}=this;k(e,t),this.state.is(1)||this.emit(ht,e)}get length(){return this._Components.Slides.getLength(!0)}get index(){return this._Components.Controller.getIndex()}};let Le=ke;Le.defaults={},Le.STATES=n;var Ce,Pe=(t=>(t.Cozy="cozy",t.Japandi="japandi",t.Modern="modern",t.Fusion="fusion",t.NeoClassic="neoclassic",t))(Pe||{});(Ce=Pe||(Pe={})).fromString=function(t){return"cozy"===t?"cozy":"japandi"===t?"japandi":"neoclassic"===t?"neoclassic":"modern"===t?"modern":"fusion"===t?"fusion":"cozy"},Ce.fromNumber=function(t){return 0===t?"cozy":1===t?"japandi":2===t?"fusion":3===t?"modern":"neoclassic"};class Ae{static formatCurrency(t){return Intl.NumberFormat("uk-UA",{maximumFractionDigits:2}).format(t)}}var Be=(t,e,n)=>new Promise(((o,i)=>{var s=t=>{try{c(n.next(t))}catch(t){i(t)}},r=t=>{try{c(n.throw(t))}catch(t){i(t)}},c=t=>t.done?o(t.value):Promise.resolve(t.value).then(s,r);c((n=n.apply(t,e)).next())}));class Ie{constructor(t){this._storage=t}collectPortugalClientData(t){return Be(this,null,(function*(){return fetch("https://script.google.com/macros/s/AKfycbzyzzY4bi4yQoHdsTeVmm8BxGQ-bGW_-rK_erhrFA0zKak6rQ27p-k9Mx3HWk6vKEIatw/exec",{method:"POST",body:t}).catch((t=>console.error("Error!",t.message)))}))}collectPortugalCalcData(t){return Be(this,null,(function*(){const e=Boolean(this._storage.get("appliances_bool_total")),n=Boolean(this._storage.get("furniture_bool")),o=this._storage.get("space"),i=Boolean(this._storage.get("bath")),s=Boolean(this._storage.get("shower")),r=this._storage.get("amount_of_rooms"),c=this._storage.get("amount_of_bathrooms"),a=Boolean(this._storage.get("demontage")),l=this._storage.get("windows_installation"),u=Boolean(this._storage.get("finishing_materials")),d=Boolean(this._storage.get("cement_screed")),f=Boolean(this._storage.get("builtin_furiture")),g=this._storage.get("heated_flooring"),h=Boolean(this._storage.get("denoising")),p=Boolean(this._storage.get("entrance_doors")),m=this._storage.get("conditioning"),v=this._storage.get("flooring"),y=this._storage.get("transportation_expenses"),_=this._storage.get("appliances"),b=this._storage.get("summedPrice"),$=this._storage.get("costPerMetre"),w=(o<=40?3:o<=80?4:o<=100?5:o<=130?6:o<=150?7:o<=175?8:9)+("modern"==t||"neoclassic"==t?1:0),S=new FormData;return S.append("Style",t),S.append("Total cost VAT",Ae.formatCurrency(b)),S.append("Total cost",Ae.formatCurrency(b/1.23)),S.append("Cost per metre",Ae.formatCurrency($)),S.append("Cost per metre VAT",Ae.formatCurrency(1.23*$)),S.append("Area",o.toString()),S.append("Number of bedrooms",r.toString()),S.append("Number of bathrooms",c.toString()),S.append("Bath",i?"1":"0"),S.append("Shower",s?"1":"0"),S.append("Distance from Lisbon",y.toString()),S.append("Flooring",v),S.append("Finishing materials",u?"1":"0"),S.append("Dismantling works",a?"1":"0"),S.append("Cement screed",d?"1":"0"),S.append("Entrance doors",p?"1":"0"),S.append("Soundproofing",h?"1":"0"),S.append("Built-in furniture",f?"1":"0"),S.append("Underfloor heating",g.toString()),S.append("Air conditioning",m.toString()),S.append("Window installation",l.toString()),S.append("Decorating",n?"1":"0"),S.append("Appliances",e?_:"0"),S.append("Time to completion",w.toString()),fetch("https://script.google.com/macros/s/AKfycbwnwi3SZ8gK3zSYW2DEoc6BtY9HS1stpRSHPW6pATmX2UawetpC-74YPZ5LjjX282Ki/exec",{method:"POST",body:S}).catch((t=>console.error(t)))}))}collectPortugalSpecificationData(t){return Be(this,null,(function*(){const e=this._storage.get("style"),n=Boolean(this._storage.get("appliances_bool_total")),o=Boolean(this._storage.get("furniture_bool")),i=this._storage.get("space"),s=Boolean(this._storage.get("bath")),r=Boolean(this._storage.get("shower")),c=this._storage.get("amount_of_rooms"),a=this._storage.get("amount_of_bathrooms"),l=Boolean(this._storage.get("demontage")),u=this._storage.get("windows_installation"),d=Boolean(this._storage.get("finishing_materials")),f=Boolean(this._storage.get("cement_screed")),g=Boolean(this._storage.get("builtin_furiture")),h=this._storage.get("heated_flooring"),p=Boolean(this._storage.get("denoising")),m=Boolean(this._storage.get("entrance_doors")),v=this._storage.get("conditioning"),y=this._storage.get("flooring"),_=this._storage.get("transportation_expenses"),b=this._storage.get("appliances"),$=this._storage.get("summedPrice"),w=this._storage.get("costPerMetre"),S=(i<=40?3:i<=80?4:i<=100?5:i<=130?6:i<=150?7:i<=175?8:9)+("modern"==e||"neoclassic"==e?1:0);return t.append("Style",e),t.append("Total cost VAT",Ae.formatCurrency($)),t.append("Total cost",Ae.formatCurrency($/1.23)),t.append("Cost per metre",Ae.formatCurrency(w)),t.append("Cost per metre VAT",Ae.formatCurrency(1.23*w)),t.append("Area",i.toString()),t.append("Number of bedrooms",c.toString()),t.append("Number of bathrooms",a.toString()),t.append("Bath",s?"1":"0"),t.append("Shower",r?"1":"0"),t.append("Distance from Lisbon",_.toString()),t.append("Flooring",y),t.append("Finishing materials",d?"1":"0"),t.append("Dismantling works",l?"1":"0"),t.append("Cement screed",f?"1":"0"),t.append("Entrance doors",m?"1":"0"),t.append("Soundproofing",p?"1":"0"),t.append("Built-in furniture",g?"1":"0"),t.append("Underfloor heating",h.toString()),t.append("Air conditioning",v.toString()),t.append("Window installation",u.toString()),t.append("Decorating",o?"1":"0"),t.append("Appliances",n?b:"0"),t.append("Time to completion",S.toString()),fetch("https://script.google.com/macros/s/AKfycbzwN8RKdZRUWDBLNnvUwxxK9FXHUVPeqPpGFJYu9NT9zLsc34JKzIHgHz1CwFbNYGzs/exec",{method:"POST",body:t}).catch((t=>console.error(t)))}))}}var Te=(t=>(t[t.uk=0]="uk",t[t.en=1]="en",t))(Te||{});class ze{constructor(t,e=!1){if(e)switch(t){case 0:this._init();case 1:this._initPortugal();default:this._init()}}get(t){try{return JSON.parse(localStorage.getItem(t))}catch(e){return localStorage.getItem(t)}}set(t,e){localStorage.setItem(t,e.toString())}_init(){this.set("style","cozy"),this.set("bath",!0),this.set("shower",!1),this.set("ceiling","stretch ceiling"),this.set("flooring","laminat"),this.set("hygienic_shower",!1),this.set("second_gypsum_layer",!1),this.set("floor_screed",!1),this.set("heated_flooring",!1),this.set("denoising",!1),this.set("entrance_doors",!1),this.set("conditioning",!1),this.set("amount_of_rooms",2),this.set("amount_of_bathrooms",1),this.set("appliances","gorenje"),this.set("appliances_bool_total",!1),this.set("furniture_bool",!0),this.set("space",50),this.set("color",1)}_initPortugal(){this.set("style","cozy"),this.set("color",1),this.set("space",50),this.set("amount_of_rooms",2),this.set("amount_of_bathrooms",1),this.set("bath",!0),this.set("shower",!1),this.set("flooring","laminat"),this.set("finishing_materials",!1),this.set("demontage",!1),this.set("cement_screed",!1),this.set("heated_flooring",0),this.set("denoising",!1),this.set("entrance_doors",!1),this.set("windows_installation",0),this.set("builtin_furniture",!1),this.set("conditioning",0),this.set("furniture_bool",!1),this.set("appliances_bool_total",!1),this.set("appliances","gorenje"),this.set("transportation_expenses",5)}storageToRequestBody(t){const e={};for(const n in t)"length"!==n&&"costPerMetre"!=n&&"color"!=n&&("true"!==String(t[n])?"false"!==String(t[n])?isFinite(Number(t[n]))?e[n]=Number(t[n]):e[n]=t[n]:e[n]=0:e[n]=1);return JSON.stringify(e)}}$((function(){const t=window.innerWidth||document.documentElement.clientWidth,e=window.innerHeight||document.documentElement.clientHeight,n=document.getElementById("splideBody"),o=document.getElementById("splideNext"),i=document.getElementById("splidePrev"),s=document.getElementById("splideNextText"),r=document.getElementById("splidePrevText"),c=document.getElementById("submitBtn"),a=document.getElementById("node"),l=document.getElementById("name"),u=document.getElementById("phone"),d=document.getElementById("agreementCheckbox"),f=document.getElementById("appliancesBool"),g=document.getElementById("wf-form-consult");document.querySelector('input[name="Phone-Number"]').name="Phone Number";const h={arrows:!1,pagination:!1,speed:550,flickPower:400,breakpoints:{480:{pagination:!0,speed:650}}},p=new ze(Te.uk,!1),m=new Ie(p),v=new Le(".slider-container.splide",h);if(v.mount(),document.querySelectorAll("input").forEach((function(){try{this.name=this.dataset.name}catch(t){}})),$(".slider-wrapper.splide").length){$(".fact-link").on("click",(function(){$(this).is(".active")||($(".fact-container.active").removeClass("active"),$(".fact-container").eq($(this).index()).addClass("active"),$(".fact-link.active").removeClass("active"),$(this).addClass("active"))})),document.querySelectorAll("div.tab-new").forEach((t=>t.addEventListener("click",(function(){if(this.classList.contains("active"))return;const t=parseInt(this.dataset.sliderIndex),e=Pe.fromNumber(t);document.querySelector("div.tab-new.active").classList.remove("active"),this.classList.add("active"),document.querySelector(`div.calculator-tab[data-slider-index="${t}"]`).click(),$(".slider-image-new").removeClass("active"),$(".slider-image-new").each((function(){$(this).index()==t&&$(this).addClass("active")})),$(".calculator-slide.splide__slide .calculator-slide, .calculator-slide .color-var").toggle(!1),$(`.calculator-slide.splide__slide .calculator-slide .color-1, .calculator-slide.${e}, .specification-${e}.color-1`).toggle(!0),$(".calculator-slide.splide__slide .calculator-slide").eq(t).toggle(!0)}))));const e=new Le(".slider-wrapper.splide",h);e.mount(),e.on("move",((e,...c)=>{setTimeout((()=>n.style.height=$(".splide__slide.is-active .active img").css("height")),t>480?550:750);let a="",l="";switch(i.classList.remove("disabled"),o.classList.remove("disabled"),e){case 0:a="",l="Bedroom",i.classList.add("disabled");break;case 1:a="Living room",l="Kitchen";break;case 2:a="Bedroom",l="Shower";break;case 3:a="Kitchen",l="Bathroom";break;case 4:a="Shower",l="",o.classList.add("disabled");break;default:return}r.innerText=a,s.innerText=l})),n.style.height=$(".splide__slide.is-active .active img").css("height"),o.addEventListener("click",(()=>e.go(">"))),i.addEventListener("click",(()=>e.go("<")))}document.querySelectorAll(".calculator-tab").forEach((t=>t.addEventListener("click",(t=>{const e=t.currentTarget,n=parseInt(e.dataset.sliderIndex),o=Pe.fromNumber(n);$(".calculator-slide.splide__slide .calculator-slide, .calculator-slide .color-var").toggle(!1),$(`.calculator-slide.splide__slide .calculator-slide .color-1, .calculator-slide.${o}, .specification-${o}.color-1`).toggle(!0),$(".calculator-slide.splide__slide .calculator-slide").eq(n).toggle(!0),document.querySelector(".calculator-tab.active").classList.remove("active"),e.classList.add("active"),$(".tab-new").eq(n).trigger("click"),L().classList.remove("active"),document.querySelector('.color-tab[data-color-index="1"]').classList.add("active"),p.set("color",1)})))),$(".increment-field .increment").on("click",(function(){$(this).siblings(".increment-input").length<=0&&$(this).siblings(".increment-input").val(0)})),g.addEventListener("submit",(t=>{if(t.preventDefault(),d.checked?$(".warning.agreementcheckbox").toggle(!1):$(".warning.agreementcheckbox").toggle(!0),0==u.value.length?$(".warning.inputs.phone").toggle(!0):$(".warning.inputs.phone").toggle(!1),0==l.value.length?$(".warning.inputs.name").toggle(!0):$(".warning.inputs.name").toggle(!1),$(".warning").is(":visible"))return t.stopImmediatePropagation(),!1;{const t=c.value;c.value="Please wait...";const e=new FormData(g);m.collectPortugalClientData(e).then((()=>c.value=t)).finally((()=>window.location.assign("/kdyakuiemo")))}})),$(".choice").on("click",(function(){$(this).hasClass("choiceActive")||(f.checked&&($(".choiceActive").removeClass("choiceActive"),$(".choice-gradient.gradientrevamped").removeClass("gradientrevamped")),$(this).addClass("choiceActive"),$(this).parent().addClass("gradientrevamped"))})),a.addEventListener("change",(function(){this.checked&&$(".choiceActive").length&&($(".choiceActive").removeClass("choiceActive"),$(".choice-gradient.gradientrevamped").removeClass("gradientrevamped"))})),f.addEventListener("change",(function(){this.checked&&!$(".choiceActive").length&&($(".choice").first().addClass("choiceActive"),$(".choice-gradient").first().addClass("gradientrevamped"))})),$(".hover-text").on("click",(function(){let n=$(this);n.siblings(".hover-modal").css("display","flex"),0==parseInt(n.siblings(".hover-modal").css("opacity"))?(function(n){const o=n.getBoundingClientRect();return o.top>=0&&o.left>=0&&o.bottom<=e&&o.right<=t}(n.siblings(".hover-modal").get(0))||$([document.documentElement,document.body]).animate({scrollTop:n.siblings(".hover-modal").offset().top-96},450),n.siblings(".hover-modal").animate({bottom:42,opacity:1},200,"swing")):n.siblings(".hover-modal").animate({bottom:12,opacity:0},200,(function(){n.siblings(".hover-modal").toggle(!1)}))})),$("div.submit-container .button").on("click",(function(t){t.preventDefault();let e=p.get("style"),n=p.get("color");null!=e&&null!=n||(e=Pe.fromNumber(parseInt(document.querySelector("div.calculator-tab.active").dataset.sliderIndex)).toString(),n=parseInt(document.querySelector("div.color-tab.active").dataset.colorIndex),p.set("style",e),p.set("color",n)),m.collectPortugalCalcData(e),window.open(`/specifications/${e}-${n}`,"_blank")})),$(".closing-btn").on("click",(function(){let t=$(this);t.parent(".hover-modal").animate({bottom:12,opacity:0},200,(function(){t.parent(".hover-modal").toggle(!1)}))})),t<=480&&document.querySelectorAll("img.image-75").forEach((t=>t.removeAttribute("sizes"))),t>=992?($(".preview-image, .blackbg-text").on({mouseenter:()=>$(".video-cursor").css("opacity",1),mouseleave:()=>$(".video-cursor").css("opacity",0)}),$(".project-link-image").on({mouseenter:()=>$(".project-dot").css("opacity",1),mouseleave:()=>$(".project-dot").css("opacity",0)}),$(".arrow-right").on({mouseenter:()=>$(".small-hover.right").css("opacity",1),mouseleave:()=>$(".small-hover.right").css("opacity",0)}),$(".arrow-left").on({mouseenter:()=>$(".small-hover.left").css("opacity",1),mouseleave:()=>$(".small-hover.left").css("opacity",0)}),document.querySelectorAll(".color-tab").forEach((t=>t.addEventListener("click",(t=>{const e=t.currentTarget,n=parseInt(e.dataset.colorIndex);n!=p.get("color")&&(L().classList.remove("active"),e.classList.add("active"),p.set("color",n),$(".color-var").toggle(!1),$(`.calculator-slide .color-${n}`).toggle(!0))})))),document.querySelectorAll(".calculator-slider-option").forEach((t=>t.addEventListener("click",(function(t){const e=t.currentTarget;document.querySelector(".calculator-slider-option.active").classList.remove("active"),this.classList.add("active"),v.go(parseInt(e.dataset.sliderIndex))})))),$(".calculator-arrow").on("click",(function(){$(this).is(".arrow-right")?v.go(">"):v.go("<"),document.querySelector(".calculator-slider-option.active").classList.remove("active"),$(`.calculator-slider-option:eq(${v.index})`).addClass("active")})),$(".calculator form").on("keydown",(t=>{"Enter"==t.key&&t.preventDefault()}))):document.querySelector('div.calculator-tab[data-slider-index="1"]').click();const y=document.querySelector("div.modal-container"),_=document.querySelector("nav.nav-menu.w-nav-menu"),b=document.querySelector("div.dim"),w=document.querySelector("a.mobile-nav-button[data-click-action='navigation-close']"),S=document.querySelector("a.mobile-nav-button[data-click-action='navigation-open']");function E(){y.classList.remove("shown"),x()}function x(){history.pushState("",document.title,window.location.pathname+window.location.search)}function k(t){document.location.hash=t}function L(){return document.querySelector(`.color-tab[data-color-index="${p.get("color")}"]`)}document.querySelectorAll('.gradientrevamped[data-click-action="consultation"]').forEach((t=>t.addEventListener("click",(()=>{y.classList.add("shown"),k("consultation")})))),document.querySelector(".cross-button.modal").addEventListener("click",E),y.addEventListener("click",E),document.querySelector("div.consult-modal").addEventListener("click",(function(t){t.stopPropagation()})),S.addEventListener("click",(function(){_.classList.add("shown"),b.classList.add("shown"),this.classList.remove("shown"),w.classList.add("shown")})),w.addEventListener("click",(function(){_.classList.remove("shown"),b.classList.remove("shown"),this.classList.remove("shown"),S.classList.add("shown")})),b.addEventListener("click",(()=>w.click())),document.querySelectorAll(".calculate").forEach((t=>t.addEventListener("click",(()=>k("calculate"))))),document.querySelectorAll(".crossbtn.calc").forEach((t=>t.addEventListener("click",x)))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,